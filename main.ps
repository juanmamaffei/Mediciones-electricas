%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Wed Mar  6 17:57:14 2019
%%Pages: 7
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMBX12 CMR10 CMR9 CMSL10 CMBX10 CMTI10 CMR8 CMMI10
%%+ CMSY10 CMMI8 CMR6
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o main.ps main.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2019.03.06:1456
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-circ.pro 0 0
%!
% $Id: pst-circ.pro 3 2007-12-23 16:23:22Z herbert $
%
% PostScript prologue for pst-circ.tex.
% version 0.01 2007-03-23 (hv)
% For distribution, see pstricks.tex.
%
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def 
/ZeroEq { abs 1E-10 lt } bind def /EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub } bind def
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
  { pop pop pop 0 0 }
  {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
  }
  ifelse  } bind def
% END pst-circ.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-3dplot.pro 0 0
%% $Id: pst-3dplot.pro 882 2014-02-01 13:12:37Z herbert $
%%
%% This is file `pst-3dplot.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-3dplot.tex'
%%
%% Herbert Voss <voss _at_ PSTricks.de>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-3dplot' is a PSTricks package to draw 3d curves and graphical objects
%%
%%
%% version 0.32 / 2014-02-01  Herbert Voss <hvoss _at_ tug.org>
%% with contributions of Darrell Lamm <darrell.lamm _at_ gtri.gatech.edu<
%%            
%
/tx@3DPlotDict 200 dict def
tx@3DPlotDict begin
%
/printDot { gsave 2 copy 2 0 360 arc fill stroke grestore } def
%
/saveCoor { 
  dzUnit mul /z ED
  dyUnit mul /y ED
  dxUnit mul /x ED
} def
%
/3Dto2D { % true or false on stack
  { RotatePoint } if
  1 { %  dummy loop, will run only 1 time, allows exit 
    coorType 0 le {                                               % the default |
      /x2D x leftHanded not { neg } if Alpha cos mul y Alpha sin mul add def %  /\  co system
      /y2D x leftHanded { neg } if Alpha sin mul y Alpha cos mul add neg Beta sin mul z Beta cos mul add def
      exit } if
    coorType 1 le { 
      /x2D y x Alpha 90 sub sin mul sub def  %  |/_  co system, no shortened x axis
      /y2D z x Alpha 90 sub cos mul sub def 
      exit } if
    coorType 2 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x 0.5 mul sub def
      /y2D z x 0.5 mul sub def 
      exit } if
    coorType 3 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x -0.5 mul sub def
      /y2D z x -0.5 mul sub def 
      exit } if
    coorType 4 le { % Normalbild in Trimetrie Skalierung so, dass coorType2
       /x2D x -0.5 mul y 1 mul add def
       /y2D x -0.5 mul y -0.25 mul add z 1 mul add def
       exit } if
    coorType 5 le { % coorType |/_ with a 1/2 shortend x-axis and 135 degrees 
      /x2D x z 0.5 mul Alpha cos mul add def
      /y2D y z 0.5 mul Alpha sin mul add def 
      exit } if
    coorType 6 le { % coorType |/_ with a 1/2 shortend x-axis and 135 degrees and z into the front
      /x2D y x -0.559 mul Alpha cos mul add def
      /y2D z x -0.559 mul Alpha sin mul add def 
      exit } if
  } repeat
} def
/ConvertTo2D { true 3Dto2D } def
/ConvertTo2DWithoutRotating { false 3Dto2D } def
%
/Conv3D2D { /z ED /y ED /x ED ConvertTo2D x2D y2D } def
%
/ConvertToCartesian {
  /latitude exch def
  /longitude exch def
  /Radius exch def
  1 { %  dummy loop, will run only 1 time, allows exit
    SphericalCoorType 0 le {                                               % the default |
     /z { Radius latitude sin mul } def
     /x { Radius longitude cos mul latitude cos mul } def
     /y { Radius longitude sin mul latitude cos mul } def
      exit } if
    SphericalCoorType 2 le {
     /z { Radius longitude cos mul } def
     /x { Radius longitude sin mul latitude cos mul} def
     /y { Radius longitude sin mul latitude sin mul } def
      exit } if
  } repeat
} def
%
/ConvCylToCartesian { % r phi h -> x y z
  3 1 roll			% h r phi
  /Phi ED
  /Radius ED			% h->z on stack
  Radius Phi cos mul exch 	% x z
  Radius Phi sin mul exch	% x y z
} def
%
/SphericalTo2D {
  x y z ConvertToCartesian ConvertTo2D
} def
%
/CylinderTo2D { %  r phi h
  x y z ConvCylToCartesian ConvertTo2D
} def
%
/convertStackTo2D {
  counttomark
  /n ED /n3 n 3 div cvi def
  n3 {
    n -3 roll
    SphericalCoor { ConvertToCartesian } { saveCoor } ifelse
    ConvertTo2D
    x2D xUnit y2D yUnit
    /n n 1 sub def
  } repeat
} def
%
% the angle in the parameter equation for an ellipse is not proportional to the real angle!
% phi=atan(b*tan(angle)/a)+floor(angle/180+0.5)*180
%
/getPhi { % on stack: vecA vecB angle 
  3 dict begin
  /angle exch def /vecB exch def /vecA exch def
  angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan 
  angle 180 div .5 add floor 180 mul add } ifelse 
  end
} def
%
/RotSet (set ) def
%
/eulerRotation false def
% Matrix multiplication procedure
/matmul {

  /M@tMulDict 20 dict def
  M@tMulDict begin
  /m2 ED
  /m1 ED
  m1 dup length 2 sub 2 getinterval aload pop
  /col1max ED
  /row1max ED
  m2 dup length 2 sub 2 getinterval aload pop
  /col2max ED
  /row2max ED
  /m3 row1max col2max mul 2 add array def
  m3 dup length 2 sub row1max col2max 2 array astore putinterval
  0 1 row1max 1 sub {
   /row ED
   0 1 col2max 1 sub {
    /col ED
    /sum 0 def
    0 1 col1max 1 sub{
    /rowcol ED
    sum
    m1 row col1max mul rowcol add get
    m2 rowcol col2max mul col add get
    mul add 
    /sum ED
    } for
    m3 row col2max mul col add sum put
   } for
  } for
  m3
  end % end of M@tMulDict

} def
%
/SetMQuaternion {

  /MnewTOold 11 array def

  /Qu@ternionDict 30 dict def
  Qu@ternionDict begin

  /normRotVec  xRotVec yRotVec zRotVec 3 array astore VecNorm  def
  normRotVec 0 gt
  {/xRotVecNorm xRotVec normRotVec div def
   /yRotVecNorm yRotVec normRotVec div def
   /zRotVecNorm zRotVec normRotVec div def
   RotAngle}
  {/xRotVecNorm 1 def
   /yRotVecNorm 0 def
   /zRotVecNorm 0 def 
   0} ifelse

  2 div dup
  /q0 exch cos def
      sin dup dup
  /q1 exch xRotVecNorm mul def
  /q2 exch yRotVecNorm mul def
  /q3 exch zRotVecNorm mul def

  /q0q0 q0 q0 mul def
  /q0q1 q0 q1 mul def
  /q0q2 q0 q2 mul def
  /q0q3 q0 q3 mul def

  /q1q1 q1 q1 mul def
  /q1q2 q1 q2 mul def
  /q1q3 q1 q3 mul def

  /q2q2 q2 q2 mul def
  /q2q3 q2 q3 mul def

  /q3q3 q3 q3 mul def

  MnewTOold 0 q0q0 q1q1 add q2q2 sub q3q3 sub put
  MnewTOold 1 q1q2 q0q3 sub 2 mul put
  MnewTOold 2 q1q3 q0q2 add 2 mul put

  MnewTOold 3 q1q2 q0q3 add 2 mul put
  MnewTOold 4 q0q0 q1q1 sub q2q2 add q3q3 sub put
  MnewTOold 5 q2q3 q0q1 sub 2 mul put

  MnewTOold 6 q1q3 q0q2 sub 2 mul put
  MnewTOold 7 q2q3 q0q1 add 2 mul put
  MnewTOold 8 q0q0 q1q1 sub q2q2 sub q3q3 add put

  MnewTOold 9 3 put
  MnewTOold 10 3 put

  end % end of Qu@ternionDict

} def
%
/SetMxyz {
  1.0 0.0 0.0  0.0 1.0 0.0  0.0 0.0 1.0  3 3  11 array astore /MnewTOold ED
  RotSequence cvx exec % Now create a new MnewTOold using xyz, etc.
} def
%
/ConcatMQuaternion {
  MnewTOold % Push onto stack
  SetMQuaternion % Uses [xyz]RotVec and RotAngle to make MnewToOld 
  MnewTOold matmul /MnewTOold ED
} def
%
/ConcatMxyz {
  MnewTOold % Push onto stack
  SetMxyz % Uses RotX, etc. to set MnewTOold 
  MnewTOold matmul /MnewTOold ED
} def
%
/RotatePoint{
  MnewTOold x y z  3 1  5 array astore matmul
  0 3 getinterval aload pop 
  /z ED 
  /y ED 
  /x ED 
} def
%
/makeMoldTOnew {
  /MoldTOnew 11 array def
  MoldTOnew 0 MnewTOold 0 get put
  MoldTOnew 1 MnewTOold 3 get put
  MoldTOnew 2 MnewTOold 6 get put
  MoldTOnew 3 MnewTOold 1 get put
  MoldTOnew 4 MnewTOold 4 get put
  MoldTOnew 5 MnewTOold 7 get put
  MoldTOnew 6 MnewTOold 2 get put
  MoldTOnew 7 MnewTOold 5 get put
  MoldTOnew 8 MnewTOold 8 get put
  MoldTOnew 9               3 put
  MoldTOnew 10              3 put
} def
%
/RotXaxis { 
  eulerRotation 
  {1 0 0}
  {makeMoldTOnew MoldTOnew  1 0 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotX def
  ConcatMQuaternion
} def
/RotYaxis { 
  eulerRotation 
  {0 1 0}
  {makeMoldTOnew MoldTOnew  0 1 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotY def
  ConcatMQuaternion
} def
/RotZaxis { 
  eulerRotation 
  {0 0 1}
  {makeMoldTOnew MoldTOnew  0 0 1  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotZ def
  ConcatMQuaternion
} def
/xyz { RotXaxis RotYaxis RotZaxis } def
/yxz { RotYaxis RotXaxis RotZaxis } def
/yzx { RotYaxis RotZaxis RotXaxis } def
/xzy { RotXaxis RotZaxis RotYaxis } def
/zxy { RotZaxis RotXaxis RotYaxis } def
/zyx { RotZaxis RotYaxis RotXaxis } def
/quaternion { } def % Null
%
/VecNorm { 0 exch { dup mul add } forall sqrt } def
%
/UnitVec {			% on stack is [a]; returns a vector with [a][a]/|a|=1 
  dup VecNorm /norm ED
  norm 0 lt {/norm 0 def} if
  { norm div } forall 3 array astore } def
%
/AxB {				% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a2 b3 mul a3 b2 mul sub
    a3 b1 mul a1 b3 mul sub
    a1 b2 mul a2 b1 mul sub
    3 array astore } def
%
/AaddB {			% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a1 b1 add a2 b2 add a3 b3 add
    3 array astore } def
%
/AmulC {			% on stack is [a] and c; returns [a] mul c
    /factor ED { factor mul } forall 3 array astore } def
%
%
/setColorLight { % expects 7 values on stack C M Y K xL yL zL
% les rayons de lumi�re
  xLight dup mul yLight dup mul zLight dup mul add add sqrt /NormeLight ED
% the color values
  /K ED
  /Yellow ED
  /Magenta ED
  /Cyan ED
} def
%
/facetteSphere {
  newpath
  /Xpoint Rsphere theta cos mul phi cos mul CX add def
  /Ypoint Rsphere theta sin mul phi cos mul CY add def
  /Zpoint Rsphere phi sin mul CZ add def
  Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end moveto
  theta 1 theta increment add {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi cos mul CY add def
    /Zpoint Rsphere phi sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end  lineto
  } for
  phi 1 phi increment add {
    /phi1 ED
    /Xpoint Rsphere theta increment add cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta increment add sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  theta increment add -1 theta {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi increment add cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi increment add cos mul CY add def
    /Zpoint Rsphere phi increment add sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  phi increment add -1 phi {
    /phi1 ED
    /Xpoint Rsphere theta cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  closepath 
} def
%
/MaillageSphere { 
% on stack must be x y z Radius increment C M Y K 
  setColorLight
  /increment ED
  /Rsphere ED
  /CZ ED
  /CY ED
  /CX ED
  /StartTheta 0 def
  /condition { PSfacetteSphere 0 ge } def
  -90 increment 90 increment sub {%
    /phi ED
    StartTheta increment 360 StartTheta add increment sub {%
      /theta ED
      % Centre de la facette
      /Xpoint Rsphere theta increment 2 div add cos mul phi increment 2 div add cos mul CX add def
      /Ypoint Rsphere theta increment 2 div add sin mul phi increment 2 div add cos mul CY add def
      /Zpoint Rsphere phi increment 2 div add sin mul CZ add def
      % normale a la facette
      /nXfacette Xpoint CX sub def
      /nYfacette Ypoint CY sub def
      /nZfacette Zpoint CZ sub def
      % test de visibilite
      /PSfacetteSphere 
        vX nXfacette mul
        vY nYfacette mul add
        vZ nZfacette mul add
      def
      condition {
        gsave
        facetteSphere
        /cosV { 1 xLight nXfacette mul
          yLight nYfacette mul
          zLight nZfacette mul
          add add
          NormeLight
          nXfacette dup mul
          nYfacette dup mul
          nZfacette dup mul
          add add sqrt mul div sub } bind def
        Cyan cosV mul Magenta cosV mul Yellow cosV mul K cosV mul setcmykcolor fill 
	grestore
%	0 setgray
        showgrid { facetteSphere stroke } if
      } if 
    } for
    % /StartTheta StartTheta increment 2 div add def
  } for
} def
%
%---------------------- Cylinder ---------------------------
%
/PlanCoupeCylinder { %
  /TableauxPoints [
    0 1 359 { 
      /phi ED 
      [ Radius phi Height ConvCyl2d ] % on décrit le cercle
    } for
  ] def
  newpath
  TableauxPoints 0 get aload pop moveto
  1 1 359 { TableauxPoints exch get aload pop lineto } for
  closepath
} def
%
/facetteCylinder { % 
    newpath
    Radius phi currentHeight ConvCyl2d moveto
    phi 1 phi dAngle add  { % loop variable on stack
      Radius exch currentHeight ConvCyl2d lineto        
    } for
    phi dAngle add -1 phi { %	fill dHeight
      Radius exch currentHeight dHeight add ConvCyl2d lineto 
    } for
    closepath
  } def % facette
%
/MaillageCylinder { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K
      /dHeight ED /dAngle ED /Height ED /Radius ED
      /CZ ED /CY ED /CX ED } if
%     
    0 dHeight Height dHeight sub {
      /currentHeight ED
      0 dAngle 360 dAngle sub {
        /phi ED
% Normal vector of the center
        /nXfacetteCylinder Radius phi dAngle 2 div add cos mul CX add def 
        /nYfacetteCylinder Radius phi dAngle 2 div add sin mul CY add def 
        /nZfacetteCylinder currentHeight dHeight 2 div add CZ add def 
        /NormeN 
          nXfacetteCylinder dup mul
          nYfacetteCylinder dup mul
          nZfacetteCylinder dup mul
          add add sqrt def
        NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilité
       /PSfacetteCylinder 
    	    vX nXfacetteCylinder mul
            vY nYfacetteCylinder mul add
            vZ nZfacetteCylinder mul add def
       condition {
         facetteCylinder
         /cosV 
	   1 xLight nXfacetteCylinder mul
           yLight nYfacetteCylinder mul
           zLight nZfacetteCylinder mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
          showgrid { 
            0 setgray
            facetteCylinder % drawing the segments
            stroke } if
       } if
     } for
    } for
} def
%
%------------------------ Cylinder type II -----------------------
%
/MoveTo { Conv3D2D moveto } def
/LineTo { Conv3D2D lineto } def

/IIIDEllipse { % x y z rA rB startAngle endAngle Wedge
  /dAngle 1 def
  /isWedge ED
  /endAngle ED
  /startAngle ED
  /radiusB ED
  /radiusA ED
  startAngle cos radiusA mul startAngle sin radiusB mul 0 
  isWedge { 0 0 moveto LineTo }{ MoveTo } ifelse
  /Angle startAngle def
  startAngle dAngle endAngle {
    /Angle ED
    Angle cos radiusA mul Angle sin radiusB mul 0 LineTo  
  } for
  isWedge { 0 0 lineto } if
} def

/IIIDCircle { % x y z r startAngle endAngle Wedge
  7 3 roll % startAngle endAngle Wedge x y z r
  dup      % startAngle endAngle Wedge x y z r r
  8 -3 roll
  IIIDEllipse 
} def

/IIIDWedge { % x y z r startAngle endAngle
  true IIIDCircle
} def

/IIIDCylinder {% x y z r h start end wedge
  /isWedge ED
  /increment ED
  /endAngle ED
  /startAngle ED
  /height ED
  /radius ED
  startAngle increment endAngle {
    /Angle ED
    radius Angle 0 ConvCylToCartesian MoveTo  
    radius Angle height ConvCylToCartesian LineTo  
  } for
  stroke
} def
%
%---------------------- Box ---------------------------
%
/PlanCoupeBox { % x y z
  /TableauxPoints [
      [ CX CY CZ Height add ConvBox2d ] % top or bottom
      [ CX CY Depth add CZ Height add ConvBox2d ]
      [ CX Width add CY Depth add CZ Height add ConvBox2d ] 
      [ CX Width add CY CZ Height add ConvBox2d ] 
      [ CX CY CZ Height add ConvBox2d ] % bottom
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 3 {
      TableauxPoints exch get aload pop
      lineto } for
    closepath
} def
%
/facetteBox { % 
    newpath
    dup
    1 eq { % back
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    2 eq { % right
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    3 eq { % left
      CX Width add CY CZ ConvBox2d moveto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
    } if
    4 eq { % front
      CX CY Depth add CZ ConvBox2d moveto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
    } if
    closepath
  } def % facette
%
/TestPlane { % on stack x y z of the plane center and # of plane
  /nZfacetteBox ED /nYfacetteBox ED /nXfacetteBox ED
  /Plane ED
  /NormeN 
    nXfacetteBox dup mul
    nYfacetteBox dup mul
    nZfacetteBox dup mul
    add add sqrt def
  NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilite
  /PSfacetteBox 
    vX nXfacetteBox mul
    vY nYfacetteBox mul add
    vZ nZfacetteBox mul add def
  condition {
    Plane facetteBox
         /cosV 
	   1 xLight nXfacetteBox mul
           yLight nYfacetteBox mul
           zLight nZfacetteBox mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         0 setgray
         Plane facetteBox % drawing the segments
         stroke
       } if
} def
%
/MaillageBox { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K 
      /Depth ED /Height ED /Width ED
      /CZ ED /CY ED /CX ED } if
%
% Normal vector of the box center
  /PlaneSet [
    [ Width 2 div CX add 
      CY 
      Height 2 div CZ add ] % normal back
    [ CX 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal right
    [ Width CX add 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal left
    [ Width 2 div CX add 
      Depth CY add 
      Height 2 div CZ add ] % normal front
  ] def
  PlaneSequence length 0 eq { % user defined?
    Alpha abs cvi 360 mod /iAlpha ED
    iAlpha 90 lt { [ 1 2 3 4 ]  
      }{ iAlpha 180 lt { [ 2 4 1 3 ]  
        }{ iAlpha 270 lt { [ 3 4 1 2 ] }{ [ 3 1 4 2] } ifelse } ifelse } ifelse 
  }{ PlaneSequence } ifelse 
  { dup 1 sub PlaneSet exch get aload pop TestPlane } forall
} def
%
%--------------------------- Paraboloid -----------------------------
/PlanCoupeParaboloid {
    /Z height store
    /V {Z sqrt} bind def
    /TableauxPoints [
      0 1 359 { 
        /U ED [ U U Z V calculate2DPoint ] % on decrit le cercle
      } for
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 359 {
      /compteur ED
      TableauxPoints compteur get aload pop
      lineto } for
    closepath
} def
%
/facetteParaboloid{
    newpath
    U U Z V calculate2DPoint moveto
    U 1 U increment add  {%
      /U1 ED
      U1 U1 Z V calculate2DPoint lineto
    } for
    Z pas10 Z pas add pas10 add{
      /Z1 ED
      /V {Z1 sqrt} bind def
      U1 U1 Z1 V calculate2DPoint lineto
    } for
    U increment add -1 U {%
      /U2 ED
      U2 U2 Z pas add V calculate2DPoint lineto
    } for
    Z pas add pas10 sub pas10 neg Z pas10 sub {
      /Z2 ED
      /V Z2 abs sqrt def
      U U Z2 V calculate2DPoint lineto
    } for
    closepath
} def % facette
%
/MaillageParaboloid {
  % on stack true or false for saving values
    { setColorLight  % expects 7 values on stack C M Y K xL yL zL 
%      /CZ ED /CY ED /CX ED 
    } if    
    0 pas height pas sub {%
      /Z ED
      /V Z sqrt def
      0 increment 360 increment sub {%
        /U ED
% Centre de la facette
        /Ucentre U increment 2 div add def
        /Vcentre Z pas 2 div add sqrt def
% normale à la facette
        /nXfacetteParaboloid 2 Vcentre dup mul mul Ucentre cos mul radius mul def
        /nYfacetteParaboloid 2 Vcentre dup mul mul Ucentre sin mul radius mul def
        /nZfacetteParaboloid Vcentre neg radius dup mul mul def
        /NormeN {
          nXfacetteParaboloid dup mul
          nYfacetteParaboloid dup mul
          nZfacetteParaboloid dup mul
          add add sqrt} bind def
        NormeN 0 eq {/NormeN 1e-10 def} if
% test de visibilit�
       /PSfacetteParaboloid vX nXfacetteParaboloid mul
                  vY nYfacetteParaboloid mul add
                  vZ nZfacetteParaboloid mul add def
       condition {
         facetteParaboloid
         /cosV 1 xLight nXfacetteParaboloid mul
           yLight nYfacetteParaboloid mul
           zLight nZfacetteParaboloid mul
           add add
           NormeLight
           NormeN mul div sub def
         Cyan Magenta Yellow K  
         cosV mul 4 1 roll cosV mul 4 1 roll cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         showgrid {
           0 setgray
           facetteParaboloid
           stroke } if
       } if
     } for
    } for
} def
%
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
% u -> e_u with |e_u|=1 
/vector-unit { 1 dict begin
  dup vector-length 1 exch div 
  vector-scale
  end 
} def
%
% u v -> u+v
/vector-add { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch { 	% i u[i]
    v 		% i u[i] v
    2 index get add 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
  end 
} def
%
% u v -> u-v
/vector-sub { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch {	% i u[i]
    v 		% i u[i] v
    2 index get sub 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
end } def
%
% [v] c -> [c.v]
/vector-scale { 1 dict begin
  /c exch def
  [ exch
  { 		% s i u[i]
    c mul	% s i u[i] v 
  } forall
  ]
  end } def
%
%
% [u] [v] -> [u x v]
/vector-prod { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  [ y zp mul z yp mul sub
   z xp mul x zp mul sub
   x yp mul y xp mul sub ]
end
} def
%
% [u] [v] -> u.v
/vector-mul { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  x xp mul y yp mul add z zp mul add
end
} def
%
% [x y z ... ] -> r
% watch out for overflow
/vector-length { 1 dict begin
dup
% find maximum entry
/max 0 def
{ % max 
  abs dup max gt {
    % if abs gt max
    /max exch def
  } {
    pop
  } ifelse
} forall
max 0 ne {
  0 exch 
  {  % 0 v[i]
    max div dup mul add
  } forall
  sqrt
  max mul
} {
  pop 0
} ifelse
end } def
%
end % tx@3DPlotDict
%

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR6
%!PS-AdobeFont-1.0: CMR6 003.002
%%Title: CMR6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR6 known{/CMR6 findfont dup/UniqueID known{dup
/UniqueID get 5000789 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR6 def
/FontBBox {-20 -250 1193 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR6.) readonly def
/FullName (CMR6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE339BA29C1C6F656
1DEF13780383DAE38A868377CC7D396B2A05F341AEE0F8BD0A0191F51AD11A4D
2E927B848A1EF2BA15CFBE57A51E3AF07598275195C9613041F71C1AF39E61F9
EFD5F6512FBDA76E29DE6B508F62F5CF9F73F5288DF1C7B0B82C92D3B6358BAD
EC3CA20BDE55DAA7CC58004AA86B6CBF8C410D8287E88BF20588A39309C2B703
CED322F030AA6069869064486CA651DA054FF3F5E56534CA358B0829A6B954D8
9103436E6B06DAD1658BD4A95AB41343B01F5866FC87C4EDFC71F1477C98F8E1
1DCF27EF743FF90BF918AB8C4E5AC35841E2F745480E5EDE1C1DEAFAD8D0018D
2C1F1CFCAD9F6609859DEDFD1648A6CD23D8ABB80747F94899F17C8F3E6CA55A
E176F19CDFDAA0D7C920B3A72051A4745560AC81978C92459EEE5AFE85AB247A
32981139CBE352B248F4BE5F73503A084A3E91F05328EE521D9669E44E202584
5407E7846F9FEE3D54EA18FFB144BF2D6803BF65AE402034B3CDBB40DD24217A
3CE0E95E2717CACD603A958187C42B3558AA38D6B6390EEEDD396F96E6041FCF
6F8888221AFA87EAD79F46E0E32CAED91E6C8500879AB6E580C581E8C8CE9B68
2BB5EFE2604E8DCB2432D39D75EE556969F1B2FBDF6A4BC72D106AA7CF22C268
464027898B311613E06E1584707F262F71D9F49D2149306A88E02BC60BBD6BDB
EF41D90F19197BA9AEF32B5E63D5B9FF41B5602F9F786E76621DA54D574981AB
87A72081EA05D6C6BA940EFEBD0904EA4E77BBCE17E20B42E1722617E0F6EF32
F1ACDE9D758594E9C81049CCC10605A27C2A06872FBA9F159CB155609B496ADA
4886F478E44029B5E620DE8319E257697E93E1CDFD27D560E2E4D34507020E2C
D9FF06BFA14E056D81DF701FAC3ACE4BE6C098AE116E079F0044391EC1661F6E
7A93B9320BD7F91E8FD2E8EB3F5CAE997D5CDD35107A1D35302260D1499B8B65
39625B7925F97D917B66BAFEEA992873F07220714F192839948CEA080BDB9A03
77B9DD032273DDB5629CB28B5D8797EDEFDBC601823E038384C90C79012A7D96
8F27784DA15BACE21501C26E3AFA5DCCE81B52B0ABAF71A35D33103EA86F2415
A39A830D559C5C6CA7423945BD3DFA942B20A06D7A8D8671F9831DBB52907AB4
4E54776D29C6085CD9970B6DD21DD3EA8EB09C49CBEC6CDCEEB0BBB1B8827109
3BDE64DDA024D67F098D6C1998506DDFF7907ABAADA1C39C759C850E0C6F8E89
A392D1C9329ACFFA92D361218D75E115F70A47C53B73B356D703E9C499AAD098
AA9C8119EE9E9708A9EA3049E976FA19AD04210D5F6092C7903FD155113F3A3F
269B746560F70970AC9F8D09956E0E84DACE4112C4E7C7F6B3F0B63D26EFF95E
2B2E9699D16BC8AFC4AD9113AA3A974C9E82E877288CF71E9169D2DCC61AAAA6
C536E5604EF0716F6487292BBB677518504B52C63822BED3BD5FD14EB41EE6A8
AD4B6CF90D39F98E12A765B645CBA3E8552FB9A986390212CE119E7C3DD675AC
17BD006144BEC534DA2A860188619F17589008409C5A309CB83FBA70F6446B6E
2B56991B6A03B1DE10C621591CEE45BECA27C54BC8B4F1754A9E8F660812710E
117850E1BB6FD89BB13F8CE391C43DA89EA67E9C3E7A4697790EA26B0E4E2E80
DCA508873A7AFFC11B8C02EF86C2316E8D8B6BCEA37F81A3A87546705F070C3B
9D4D28C366CEBC1EE485B8E2357DBE46E86C87B9939DADA60888AA9F1B92FECC
CC1C198DDB594BB70A8FE690ECAC21A414BAC89BF019F34D2A130F485EAE35B7
2A10C67EA3A48A4D9734759CC93AD85C6A570500AE5AC9973FC76EFA06BF5DDC
26E20E28D16B50957EE01AF2653F8D860817967AA5A9BF9BF7ABCDA710E9F34F
4F0EBCC32B3C9C2971F6225D2DAA6A451366B83F32B2ACB83E746D365B2DE38D
C1AB7447FE7B37F9630E410E5D8F0ECE74DF46C538947B3A167AD9F3E4A7EB3D
60F5425AE75AC3A27D39311DA35696C3DC7282AF1532E7AECE63D13DDA0296A2
01487185FDF1875AEF55A36C17D6A8DD329279D229259463A2F05CB7A874374B
E2320E1F6CFECB9C1CE62FF468C29751ACD9754AF1EABE8E7696C2888914416E
235B6766F20FFBEFF285277B639A51EA2F2E30D207BC891B00F0436008F980E0
9EEE7FB375BB069B9E0BA11DA951A99D8E60B4F920A0495C247FA7DE904765AB
DB5C3B2D634757E43EDD6FAA4DB3C67F82D6853E1170F0B2D8CE496DD4E72B0D
28277BEF172F1402959F64527F9B640619F04416DDB9D05FB2ACD019CB9C119E
E544D24EA6DAC5C69785394EA50E6EC9AAA9E14B904EAF29A733C6D7942B63F4
85729686742F26DEF78DF0DA1CA7CEFBB684F4CAD99021A3B3D1FE03B9C5A4B1
BD04CAC89BB91B11952A2B17A61789BEE0C54B46C03FE9A1AE73D17CF94BA30A
237C29D414C3BCE8E3E2DDF83C0BD59DCB66C4D2C3DE73DA8378F3C6C8035D28
7464399857E57651A53E9C4AA68DFCA91B2376CF98AC5290FDB9BDAD9EF1604E
9B0A70EDDA1E564B6D2456E7BC722454ACA8C4950FDD44B6EB9AD01169A9F845
B06A0DDB7897C847A5B1F42258AECF3807AE936C8F52C3A7A0A85D68160AE442
FE81543DA6702D76AB6E8701F80DFC1D87C961E350D0E52AB2A298B9E5908600
7E14D2A87309043CBF13F69AEAAB1BC239DEA88EB5176624F6046664B1D2691F
FBB2071D3706F97DCCA355A6DCC4D09FD35DC078FBAAF672FFDECEC61050A120
10B5A96629041303FD01ACCC7686165DED6AA712FF8E5E85DE33C4E7D877C49C
6C469A90410BAF60BE65ECD91CDC2EE7AC0CA8BA7B53865F26092BFCAA0BCA77
B80DC51DAD09C93C8DD8E43502B4B68F3D5918C3492196292447732BA90F5AB4
9F5E1D634ADE1CCAAD028DE5EBA9535F6FC5908DBD2D643E0A7E059C8C386FDC
E72659C0033F535C0D7F6B98D0335552D0BF3C6E302B672A5EAADFCEF81912E3
8F54E6FB7EC2B325125159713D0AC50DEE3673B9B148643727E94C80971A2E73
5E1E13237BE69C84FC039DCE02ECE2668AFD047F21A61BB94A9F498C9FE5CDEA
B274B40728B6F6CA9B6C15BAAF92F465B0D7311B46545CBA90D874839443CCB9
3110F052EB247B24B45A3D2FA6FBC7EB2A4BEC2A5892914B3C5EA3F4F9B9DCBF
6F932D95700E045B49E4B1F2C9D2A42CF39CA2F5A2654E6E8E6E92473D28AACD
5E35C6705EA728F704F5996D286BED433F976AB7E018621A577AED7C0AC0A84E
A032FE1869F603E6F20386E3A190A30A21EA886249ECF8CDDE2C33D73BA8647A
3DCA7A8DD9E8EC8D9A415D126BA38B6771C489DFC419303EE9C1B83FBFB3A0B8
97D64F30E4BCBEC24DF603FF3BF541E00D5804B6B6543D3D2B661CC551D497A9
9DFFF535AF424B2F3150BB39AAE8CDB306AAD37767BA10BADB031DC2FAB16955
EE78342CCC0E8B5976BF98F215461A8C6F63EBE6E2F1A1104662DDE53388CB51
8B44F3534853B8095F3B746A2459C2EF800FB1EF7F235EBAA9731E3AB3BE4369
1D3636E3ADD5BDF0C34FA80E90D8A1DDE770943FD196E0A7C5F1FAF6970B34C6
4673AACA6B2B5C12B9608521AE736C1F4B97209B063D991300ED5AF3D7F27E76
68E0B858FD8BFF86581E2B9548C691E3E5D9EC4D39C9715CDE86C7D22223CCEB
8A38C776A30AF14912390A7546DBECECD7A687D4F08646E57A12C80DCA022B7A
33399761A50B8E0ABEFA1163EDEC3DFB5DA3248792EEEDD894872D4E6814B4C3
548BAFCDE0CABBCDB97EC6D1BA47F2E77CC1389BF19D73661749AC33F46A618E
A665A85776545BF9662F2179D7BFD604FA8EF4700591AF3AEC647E27B24B76F3
133F9198DC15C1AED830E737909E43EB91C334C44BA35810007A3888E33F5DA5
B3B2C35481C648AFE630CC3E08F77744E401B2934E407D1EC17ECE737606B076
F8DE8EF3344F57495EF49D11580D6FB28AE0B1422521B320843B13467501CAE2
3DB93D7BB779F73B6AA30050DA74BDBC3F8DBB30F32EAFD07734A151BB2BAED5
C9B1F790059339B64BB4146470F30928C9A49AE88906BD6FDB7431A4B50809CE
0F67ABA01CDCC2320B0B097187B9299E3D80CDD7BB5DD5BFA7B28D924C5633C5
45A23CCEE097C41C3759C1FA8DBA0DD95034BCA89BD23FAC18C70093F40FF2F8
0FAC5DD4835F2DFD40540E9A9E9FD951A8AF2CB766597DE00147B163BACFB7E6
EFDA4DED594F1C746D8B46A1145E0E4058F5917B3F21E9BEBDE745EE72CDCA64
FB31EF7A2E55265F32559480E2B6726D3DE26FFC97EB4E3160F117E890C4B2E5
8DF310E6A728ABA85540F571C024F8DD58E1D7827FE97CED5EB31547EBC36415
02B8C0E10B7E37D816F01D56A364B8552CBFAAA95BC4BDDCFDE91CE0EF005B4B
7AB56FFB47A093AEDF0DE1EA48FC8103CA3CA1470864D2693E360006D05668A8
AA422CCCED20DCEEBEA5CE0DA1EFB00FB93E922B18124FA11A88D0F6E0F719DA
57603DD5DA42E1C56C2FD9E5415AA199D4F334C151C1157E75C107FBBFCEB706
5F4EA47A29B54ED8CAEB8DDA2F53D2A703B95487619780A52DA1270011648A28
AA64338E04AA5B92C1EDF3D8DA34FA6D227A0325EA6F22E9B38B6338C657BB21
CD4C582DC04010330F62923F817E4EDC6E5C0E6500F2A975A8A95BAA30C4A134
BB31B5AC45A2E7F6E9CDFC810D41344C4F606049445F8E93D74271C1E29DF7CB
5459593BA28AECF64D903D3E4D77CF5C04B06DE44A41EE4D9FC769854503AC85
69E4A5106E84016DE3D59865D4AB30BD6C9E45C45DCB5408421CC50CD6179C85
34E55CC70FBD8FEFE9F1D5160664981716E3BC7F24B6F54E0323D9BC4B692971
24419EE62D8B0BA726E2B4294A9A76F328B8101DA29E78BD5C4AC383350FE196
4D42DB1653637D19530124858950C22F1E9CF5BC07D46B7A58CDE19CC88DCD2E
7FE4EEFD8AA6047E919823C8CAB2EF5274F45E861E6508CC11A8AA90AED2403A
B2BF1315C2157B3B50A3685205D93E40906EEE9DE5985405974BCE0B84BB37DB
080A45C5237B269B93C0A7CF294A18B45464A41F604C494CBEF829A381155CFD
71CEEA54CC39EEDB6DF58A9896246B09F95DC6BC40BA6916AAB5ED3D24F66154
3662F8978FC63DA9280FF7ADB09EA5BA79D3B66E0C88BEC1EDD78DA93839073A
A4D7B0E627000C4ABA76C47CCFEE92E319315333A5584A951E34C55412049C4A
A5569FE65A006F77B416E0530AB6A8E7AD6C72340AD4CE25937158FABB2153EA
281E1D840206F5DA38E00815E9081F81DAB9FAA8F4DAB305867AC84735DB4F52
A36129929BD2084A8EA37BB6889695204BF7290B68D5E722540BF8A276F8BB6D
451D582EE59D2FF03F6B97DDE05FA00C3D375D2D0AAC8FE298F85CC067B15481
48D70B6A0354C705715B891915FE8EA45244677B9FCE81E72D66177E309F3F83
F744B9EA9E55C3B30DEC6E5E03B3988FD526A82A5E8E1DC79127FC62B2FA7949
B3AD3148868DE22BD4B5708E32CEAAE6ADEED1F463EAB9692411E18F8D6BF391
126B2700B4CF3B59D02E3F8795130C96285A63FCD1E0F647ACB1D35E9C58BD01
1DD06BABA00CA4343BEBEDBE677E053E9732B33A7495DF51782A07DA07F5646C
770C957AD915CC70BA8E08BE7A1F4E6BA5BB9C603E38F6FB0A2578471C4D02F4
283069856D926B9076EC73AA39CEB0A061AFF1575C7093FDAC9F89C3DC06EA45
06F3C2A3BC9FF21128B10CB758DF0F099B459A5264A8C24C098110D2BA1A8532
8FAE146A91BA7D033F591AB1A94B8A6FE0FFB610F698D216D58B4EF6C87B1524
8037CBB7E23D8550A620341C6625A1A2ECE7CEE2598D66277F857231A36155E3
984F147783E9B93975AC38A29F2FBCF704C8A04AD84C3E04A12D2321FA56811A
5B6744813CCC187968C5C26BB8D3E6615A912FA5369C01CCF8C0DB790593B190
1A90CFB5339B8771F325C5FC448D36C7312B11A15A8635BAB59CF3CAD176131E
026F6E141B2619EF7F3048750CC9291397F141591EEC8B612D6656DD34DB54D6
DBDD303CED74BE76664E7DC86FCFEEF2001C9DBA56418FB61F589566A47AF36E
C94671C5E8939AF9F4D53C0DE7142B7B63C86AAFA65877EBBB48C64589AFB2CB
1280AC099FC48058855CBDEB6C2D2A0D092267996591DC3B5EC8252984E9B27D
2E9EDE8CD8303F0905DBFCAE497DE1B755B924452CDE11CF4F20893DD6FF7251
427F520FE00580DAF1703FD968E0F8ECCDE618E1EA5820EE6CFED97C78864EF6
26FAFEEE194A268F24249D44829AA360D731C34DC285501E966A959180718F72
6330E4CC060588A2F65AE64A720DCAA818D49D4440F5D0B6C1F6C3A107E12445
F1BED2D3FCBB87A9597F01C7332AA79143564056219BF87D4B907A04F77621AD
054935E883B2B137D3D1C4BC792E8335CA08B6D83227F35736C41312A0BB077A
60FC6488C5E02FD51A10AC113D4EF70038C649C1677B2204A77F2ECBE9B3C341
F4126BECBCA61E3F3801F9188A3775924A62D30FB096B440286FA655EBA00A74
9A4162904BEA07CE68EE76018346DEEE20839C9A2FF71179B58E1D4AB30856B5
F5D97295A097174467010B15D733AAC5813CAA633746B430B1AAF9F997FDAAFD
436844D1A56B8E25A89D2CC4BA6EE7ABD167818FD4F6C747E07B262C99EE2C35
323F0B471586CA50F54C6381B052B15B0C58C19DEA82C0CA29F00400B727419B
2379979CDCBFA966AD513FA903160C571C3BF1BA239540B11EF2371A3880837C
6D6CA2F374280CFA1586427AE975A2AEC34244874E4D441DBAC6CD1828841C91
069AA87FAE849C5DC7C9EC1B9876E59F3CCDF8BB23D939F5348D7486934BFB02
CC5A22541ED352616830A510DE7732E5D8F7E785BBD31C2BC9D348CE5632654D
2C1740F89D57FB2AA1FD8FA3304EA03F757BB8F498ED98E48485722E78D97B12
A05F3A28438084D1CF90AC4C3FFCD7B3365941C45E1E02CB13CA1E99F7FA1D00
1C9D489D5C95F019AB4CE89FA3B6604473DBD2CE8E278969E0A0FCBCE68C23F6
9381882443D3FC16966555FC222F3FC4B1207522201AB7A15A7A6F22CDC9D392
360BF4C95DAD35770E0AC7E5EFF015F2C74ED7391F40EC94B8D1C163B5DEE5B3
911A20C2625AD3B24BD94D2A42405E655DA47D3F94F882CA2F479437B4E0BE71
8AFA4482C6FB270F8D05B4599A01403DAAA90C01DF3AA7C2BC7E66AB6AA833AD
FB6E5EE13E45CC7CE7E200FBFE639F9CFFF5D08512C02764997FD28368969BFB
0876F236EF6189BE73AD827332DF1B2EADEAC0ED3B939CE5BC3CEC78975FC636
44FCBC2CCF4396AC7343EC62E0E4F3DFFA2B880BF31D93ADFE201BE9CCEC8BA5
0B9B919E05B851E0909968DA259EECC6AA0743F25247978CC09C28C4F878E29A
5070E4023BCE95FE0ACCCC01D0EE219FA8344E8F6D7D4347563BF8AC030B9097
41F24D4BC9494915A82EE9FD37FBB6A46BF077B728FB569B1258CEA5F51F36BE
4F4D0F890D782E44748CA3FE8C8A515998371D9C7D2311F192B4B7E7C68FC6EE
3F7136714C282A2570FE591F247A08319CE9EF1E43274E4E57166E31A2ECA506
85350DA31AA4C33C9687F5210BA225EA1007C444FBFA2126769767E47A967884
9F68589E4BAA9ED32A7A466DE35554C132810C68ABDAE536D9D884352F28EA02
8A555D2CE11F30598F44A65E2D86B43ECCBDEED9E4E5B5B7DCDA20EAA09D9FF7
422FC91F2201431A9E8FC624FF44D26C0100183D77BC7E6B1A6CFBD3FA8BABC1
AE4CB0FD382E26BE0A83169B46D91429DCB746A0326243E212F802AF6A56C709
6E70C6C7CA3775C382F911F6DF3D26A9F9F39C6A49A61FB0FDFD443ADEB01F74
1254040BC520FE9C85FDDA97E17CACFC505669130254F9C16D813DDFFF35ABD9
F6BB806C8138B974A5F04238A6E74C67684411B94915503133B27DCE131280E9
6F1C994EB581AFAB29C433337F40D3DC691D98C47FE66C75B0B49A09E086BC38
ED8B4F690E0E9848B3602A13A3BD0FD800C618C6CA60EB9397A78C285BB8AC49
CC99A84EE7C903DD48A13B074D142DBC3B5A765D05ED43D547D3D66879BEB840
0B24834FF601400FC99396AC6411C9968F04EC643BB1005C0235743DD58FC6F3
010CC1517CA0F37DA17F47FF62F3E48698FBB83E8F7C99F4D7F8BD922F3E5A9C
E074FD9E33B80308783E17221E760F500A185C89E3279101A0DE477E268D236F

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 67 /C put
dup 78 /N put
dup 109 /m put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF728D2A654E52B6A6C90A3A
725F86627D7C3EC5AF5AC512976D35FE42AACA3FECB401788D0BFFD9F4743BB2
EC5B4E7891F216DCA5A69E917A171E0069A03FB214ED307DE947225049D46E0C
4707503F09811A597A9113921AAC23AB1CAA9866F81A02BDF349FAB129F23E86
E384C043053055938D42ACBF9F0EE86CEBEB011BD5BB7D59360C8C44357DF473
7964EB4DA2EDFC44A24AA194DFF3495E425BAB69118ED72F0D07C72DFB31A87A
502B95B1D741ADC785B39D4E1ADA30F5BAB2D6F3B11B7407E66109BB482A2CA6
F246813BF6EFB2FBCDD1B3081D65BCA3E219BD8146944CD3DB7F8BCCA79113DF
A36E2EBDD64167E59B58C6D9BAD0A89C4495469F5AAB7BAF242408F76102C114
FC33C0E2428B31AEF28BADABB7900DEEE7611AE940CC70A6C27B33DCD569616C
9CA75C529926B7061B59252B6D7232924F2DAF4EF72AA4E0A946C798D96900E1
48DA207F24280C1C40A31374BF5D037FCD8DD4FE5AC7231158DD15BF29E1759C
70C6552FE31CC6FA137C0B1343B0A05961953802DBCB64DBB63CAB573CEB0E88
026325CFF588BC0A1050B9FAFEA4DAA435D88AD94D0DEF00E25EC091FB17FE50
9F0CB7D752ECF94F700785551E39C991EDC94713AAC2999951991BE671E35776
2F699661077FC2FEF52E5C544D42B179BCACE86DD9DD868B12D9A57045E224E2
5465D30844917727B7E33D4406AE3F4A54CEEB8B200BC5A1C2DF1912FB9676A8
AD368664228A25EF0A56D0CC88684E7F7F10B0D6C9C0B15ED732F035679C4BB2
2AF42BA4A80890D98887568A10C5B16D0694AEC8EE4D8A7607CD13DD06DE0226
4C856C24670AF0C426B7E6E678DF3E598A900EEEC9A7AFD53DBA5BFB598BC9EE
F75BCEBB65D0FDDBA754888C326F5ACEDAB78016A9832727140EAD4B156FC280
6AEC94A393F49EFCA6DEDD3B11F60AED35CC372DE33362C3BDF4B1BA5F157C24
E487CCD0A712E33407446C48FD26EBF77D6CB2DA4449054B69BA08180BABAD2B
CCF1A2D88286D58E946E68740FCC3D475E789FDDED3D268AE88C40CB3001DD58
7261FFD3AFCB06C2897DC33796B5AB6C8CEBE52CEC48A668A0B31EFF503BCD33
695F8D826AB2F2289F1F5BA4DE08A622798124B8874760126A6F4434AAF39186
775D25EA1424A6F8B1D4F56B55178AB8AD3156A1F248037452D44960518AFF01
BD88BE97CD39C740217E71EA5F9080E2312EC8D889A78FFEA738CFAD1753B8D3
A1608BAB07DC3FC2617E266ECB886FE358F50E1F0DB5DD029CDD3C67188B8982
8B0ACFF64D6809801B3E494E9303D680A14F7FFA90E5D9E3114BF9FEE5EE3DAC
62E37C168C74EBC0F3820A5978169150DC5F23DCE5BAD9078E67860EB5ED4B9C
77E7C7A9DAA94430C8DB083D456B7490DE06238FE438CD3CA384E09975515A32
2E3C332F52ADFB0B07A305079571FF532D331F3BC36386ABBA04B0CABFD20443
A597655D24AEA00F799057EFC4E9FBD1270061577275025EC7DD6DA251AE5DC6
286360057C8E0B0C47317EFF1836301EADC12CA979C0B595EB4D668D08A310
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 2 /multiply put
dup 25 /approxequal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AF3863EE8A24A003F07FBF0DFBC12CF2625CE95B5F1C575C28144E1D3C8CF5D7
6D071DB7562414E228147876D4529CD51AEF4B2BE347530451D0908EF11AC8DC
93918A00840C4CF8DC8262539A2633ECE031FDE71E95CD70D495FF8E813A3296
BD9FC3CFB9233FA0C800ECB41156D3A6BCE07B0A230189D213487D3E2C9244DC
04A297CFE71DED5CF81D8BD30AC6787C86AE20FBB58C31FE46F6014FB774CD6A
857BBD272917B8F71AE44C8A2175080F1D8087E55F1FC186B9D731BE77FC2E2A
45D9D2870855819AE82D0A2CC4673DD10F0A96BBFCFBACB608D6F02960E1E2E9
5D4D0444D2A96CA14F1654ACCFEC4655582E8856D9D1DA25CFCD54EE6FD2119F
25C2CDF37ADAEAA80C91AAD5D3F83AC3230609F938E65C1FDE3DA41BF2B3AC46
F7C4482D5F48A97A748AE6498A4ED4C45E72609372580F4D75D2F35E9C99492A
8557EFB3341366739D90BC68CD14E39852B25BFB14352D7A9C738C7374225407
CF9CE0C32711A8D878EBB58855762433603FC41A72F9E80B85CEB8647937AEC9
5BB70C318C1FE9D08965ECBD5A983EB27516EBC8FB3BD7A49EC96E5F2B2B72A6
68B8C6729A2FE5C8B94E51C22D616435440EACA5D8E332BD5A2312FE2DF96D1E
A590B6C921D39DF3C96594ACA59FFBB137D4AE8442E3B4E4C042233C81183BD1
5426C832A93871D1802AB5B25B01DAC2AE8DA91B42BC52853AC7EF781719EA81
87
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 61 /slash put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 74 /J put
dup 81 /Q put
dup 83 /S put
dup 86 /V put
dup 100 /d put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 113 /q put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A90B8A9EE5C613CDB822F07B
115D4C174FB7945535F2F9C2875C9675143B8D98DEFD3898170FBCB19B4C29CE
1E6883E0F68B5D42751BD7AD09E3EB745F0A6338BA2148B769B5E1EB21109414
C1615EC1A1FEAD5831938F74E26E1F6BF51136E5C76F823D29D35078412923DB
B3A32176ED7935058ED16528D28E50E37BBEB1D1554503645DD6809FA22A0DC3
112E7888A499450162B7373CC8855953B351E8873A4D7DCC40EEEE5A8A2D00E0
EDD8CFE7153824BF94833ABE10FA64768E457D5395519937705DAD2FFC5E71D4
521F01213B7DF82426867DE914CC9866E428F614F18078B4367187426E2260AA
AD0175A7982C15B2B2E58C883A8418ACC0FE8BC50AAE6182EED147AC8011D743
AA2ABE187EEF62A1773FE302D173C885C5D5E44178832B25891B97110E3AD5BA
310321B90A44328AD3AA002C1958CA45DCF3054FB19AE23FC918445C32224612
F6E4A4E984CA958812E35438AB36739A2394FD26063B566334CF8DEFE891A4B2
3AD5EBF2C4FAB9850D1344775FBE72F86BA1E78F38EF9BA870AF4E71DAA3CDD1
B8D4BFCF8453F1DC4117E6C93BBA39DE6B1EE84BF4DF3AA5FA7905F538096FBD
072EF1908ABA3C3FDA95953F92A051D6C2248AECB17FA4D325BC41BE6A0129B5
3C32D6AA6D01F519680FD0F62F681143778D4D0A27D4DE5AB3F4E8E66CBF82B6
6284F49570C7A6B86E83C242DADFDB4F94A68122B3B92ACFB47F73250F56EF06
18539AE96D6A9C7B945B0EC7A653DDFA8B25FFDF65AD351365D76A32BDB1D4E6
72BAB4EA04977759D7911C36D7605D67F01E69DDDFA5180FAD116675DE6C67D0
0BCCC658FD77338F482A52EDDE4DFC310E5AE7AEAA5D27C8C21B27B12FD2C569
0B75A29505218E59EB4CCB4813F6921DC17A79A208964BB70E8DD11A355FD7B3
81D11F3315EEBFA4F6EE98B9F6E9ADA52C43FAAEDDADD4AD58A64209A380E16F
4CBC13E7C2AC22C5A3448DF6213C9F6955A82147A4DC8BDDAB53CE7B64B63A79
5111E63424030F8A9C98E012521C015B5855F0993CB4BB06DE7FC036CE1D3595
2219E6359AAA0656474E1E81A9DFEF9B28409CF560462B2B5B124A0934C64D0E
B9367907D90EDCB7143EC6AFF1D46D6AAB6150C1FCDA40CB4A0961483DCD1581
B308E32BF738E1F3B72535F40C98F1A89930EF30138D959BF8D88C911B1D6706
560AE7FF51D34D957E9A2D2AF305A16D8FF9A2F27AF7470880AC14FF9F0E79CF
3020C8C238F822FFAEB3A4C9233D6F11166232D5276C6CD7F3B16D9977976F34
46276E03B6FBE0C79E92AC438CE819738D2789E7B8111A32627AFF8B4569AB1F
B3CE2D724126F633CCE0C412C3E2E3117B80CB7501DA40CB55CD8B9D77E3D0A4
05C9497D5F6F845E2DC85C4CFCB6DA7FE542C176F6EA6D262BE88B82F1014A01
3F82733F488B2A7CE1F88254E465731048555C8469EEC70B780D595EB97CA9A9
9B2D26B238C9A1D8B0C40664C182CCC7908521ACA42A4465F302A8127346478E
9E3057E0D63252FCF29F3293EF0221CEC9105C717C7F4E241A37225E5CF87D1F
7F1C32707DDBF9F66107989D616A8EC56C4D697FBBC097F8C4805BD544CC587A
C337E6F55D9D7CA37FC4DEAE4FB978E2A4E6C836EF0C96F53A9C1622C1D638D3
A7910523AF00E6466F6A0451D7EDE5279972E161C2AC5F8EA558EF8D0E1F539F
A980862D1A857BAC276FF08F7326476EAAD32379068979C952D594E2214A5C83
F172CA4360E6FECDDCFF3234493751DA4A00A09DAFF14EC92DE2F920A459C036
9476248EE5F8B884B1D67E9D0DA5A30A295050718F533E5F588653AF1FE39BDD
99401EF40BA11B37589525D99A0CDE2B5ADA1702119AFE1BFD42BC448DCD0422
13A0174FDCA413517C82895C3DBB663D77E588A62F47849372EAE241AAEB3E57
B4A2E8D455F4C6C3588B20B43789A4E5B412616F5184329207DC1AD9BD319F59
68724EAFCBFF52561A31A05489D7A071B4E24EE88FB207ACB0CAD043CDB16073
7B73A059B7E70143F1198185987758CE57C98819419287EEC6756086A06B6A28
F98F7E98EFBE5D0E37CE90D259185CB4D86E1F93F6DBDAB6F69227F09F196843
ADF17832B6CBC888451A0E04E49FC171E3C1AC5A89278C16342AF4B9B1FD62D2
737915C9E2B91868B8CB9C0FD83A12510B1EE48922687DF8B806CCAFFC1DB9E4
D73E444631F377778E44ABDF47D02E76459EF8AE5C563283A1E3EA689A75148E
99189E31B1FB836BA3525FF75555DA49FC8A2E0BCFB2A59558822429B1630EF3
17203EFE4E7BC6FFB4ABBCA2137740173A508E43EE4F88D01D2A7A923CD50088
8892D793B9EDBCCB494664C36A7DED4281A3244AECB6A20BC356A47983CCFCC6
0710749DA34E24E81629788C6938D08EF718CDCB7C03ABBDB4BD4D93DCEF8955
5EE47BE65B9167710B4569FADBBEAD911B5DDFD5B9993DF13906047D3A3091CE
62E714E6AA3315EBD61D8D552299EDC2108AC9EADE4C0BF41667EE4A600315F7
3C67F2BE0C407DE74084795F74A73EE2DAA1EF90B47619E9DE52B7774F17EE87
DC7381EEB8A2E48F8FE2B771C8890B187CFA7A24B542888BED98FB9F7882FA2A
418D110C31898740C2EF455DE06A843E85BF1A69658D43CF349125B4AEF44773
500DCF4232F7D270D053EFB85AEE147513F3652401EDF39E2D74C514D956B4AE
0390E2D25DE0239D6451965720C9D283BC663FECE2EF0998DE03E4559AB8A21B
E1B314D368EB90142DB45839095DC2EE24FCFB598737311267FF48975D564CAA
470F10F5435E3A3A0E0DEDA9DB19F579BC1FB4D932EB152EBB5468B05B8003EE
B4CF23CD04992C4EBB7842D2B1BDBC0F8D551BA7A22A27933AD4E0682B40C044
9E38902BC558BDA27699568F21B79376EC3E45BC5CBF2532C43B56855ADA5B3A
9C560C53F4EC103804D6BF51A416C8BEE6E7E8954D879B3441A9ADC2A20BE573
8EF25E15EEB63782DE9F91DCB0C600C41E8C7F3140D340EA83F1735AD5CFE7E7
B25E54DD61FFBFF71BC229352A803CF25C55B850983F039D7B7BFD8E96BB9407
FECCEEAF43BB36C2BE957B4DAEB1500B7790C4895A881AA212F3D2208C5F44F2
0367920944A3240ECA635788736C3F627634FF1C4E6C78FA55AABA89C4DA8C75
C8C1AECEC4137365FEF43CECAEC5EFBEC7A1932AC40D9883075E5DA3486867BC
CC2504DA719854E3A27C5A88AD6FBC2E7095D051C12FE6DBEF2198250D04D54B
D10FFF63E18FDDE72A790C3E1975659D8352CC840D0AF4F72B4EB3FA0FF6F79C
7A1D15D19F69B3ECF98F30BE5F0093B43A356D14B5DA2DFC50A7823EA13F5887
3E39C760B174793BA9A322ACC11137E23E65B3EA1800F7012D0FF5A728B1FEE9
72DA5FA1A99D103EFEA41F4D66C614CA2F7FE785053C7E7FEA947137458CC5BF
B1E97916883DC5373E687F9194E4447E008ABD6C9C97D32A1E0DE3E59A965FB4
22752993448C3D45BB9C34E5AB3A30D4D193DA50B5EA0F23B9479E097C52D97E
3468E89463E19309335547D8261A2318FAA7885D1313068280C64B2724A93E03
1F8020640F581931ECA329ECC05B5E99BE0ADD9F5B29757678FE8DC718A986F1
ACD28E9054119038DBBF26641B38E57397115B71326F6A7887063CF77171BB4C
7B79B65A26CF3A2674EF208082E4566F62113EB09352AB57C0BEC139A791EFD7
05DF754082404632547EC75096A62EA60DE261797314F64A16E0A3F3EC8AD222
18F8018AA812B823C205E47EFBBB6D3F50296EB6BEDCD0D557D310D3035AB8CA
3C2C1B6EAAC778EB924458551E7181960DC525098F262F7060788468EF33C877
FAEF370919681A0C93FDB8E2902983B98E0D53DE3B9D3D66E0308B559A36C02B
9961E45845DD6BC118824F04BE5EBF1DAA44E1FEC061C45D9870BEC745D4D5AE
498568D870E83A23ED99F6FE72B155E7E03B5758768C885DECB5964B12FB68CD
0C4CA88EA976BAABF20806FFBFD2A3BFD87BA0B34433A5890E4DB4DE83FEE0A8
E784B911878CC3474ADCBE3ADCF37847E6134682BB9DA1A543EAEA43865EE132
FE65609BF7648FEDB812CE03BA4F5317197F1546ACDE4EA00642F89E6D89F7F7
8B1943B887379B081529B1A28B83BF00212C394C8A10B4448B0AB9E43BCA7255
5BE4579461179AE6A829524C935F30A883CDAD3B460273D42D9422CD772675BF
5BEA168712AF21815057B79EB1D2BF4242691FABD38D6E5D42F02B19325AB3EF
01BBCC81CCB5B5A96B0963C9DEFEF088E30AD62EA4C038C678B90CD825EED980
357EAA3C132774E0860C018A50F1A61E8796FB66AFB6DF3D818CC9EA45A99C9C
8C6F455E65ECAB525DB9355D4178A18BB6C9E466CF8205EEFD7ED1E7E0824C3B
3CA6398D5D4DF16A1E2A68BC384DF0B71ED89E92DF5A954F2947132981E0FFFF
198930B84EE76FC4C1FB2D425173063528EFA3D8A0FEAAD21C7B8C8F53278F2F
53BBC0D61918BF73D44B24E7C823094232FB7DFCF3FAF6EF9F3595963527D2FE
94510DF67F6457104D7CB706F4D96CB1F14D85B00CEE79C4CDB94A93328BF2A5
F83D0ED4500DB126AD67DE54808D1B06DCA548D41AC5308B2DD618A393D88253
F8DA2B84EBA754D50F385433C5879522BA8E6C7A5ADC387CD8AAD5D30EF2C98D
9A2C81744FD89CB019E0338FEC080CE18C98F2C49A855A52A202D8E596973C8E
F176E52D7697CC00F20EC5091CEF35A36CE107162F94A3E16C0AB9EC1D46AF58
510F4B44C58B4B9038B39604CAA5C408FDD9B224EABDE5D7225CE12EB45DD714
C2FD01140C8B467963F9AB7B932B47093A0F189A089D630B3593C47C5E8C64BA
DFBC214069FD677223487715CECA4EEF859FB16A93CFA1FF42630B341209EA05
0F04BB83A1603C0DF30BC33064E82B283AA4D9F077AE9A8B6E61C4C875F07599
E2CCF580F44868C6057107B792022314218C0C75AF0E8A84CF345C1CC7199ABB
761F73C7CA23BD9BA7F3C2299FF5E5CA0A41D32549B57A492A8E0CAB33AFB071
9475C74A998C34B16E03573E0D2826D05BD873D2E90B06A2ED79ADEBA41863EB
A905604BE957D3DA2BF2780558C410689B3A0BB9463830F9E05CEED02CDD8346
AC1FCCDCDCDA77FD58E207D80D9126723BFFB35AD715BB0DCD121133D22E349E
9CE6001AF782496956DDEADE496150A0DC59245F997B74FCDDB3ADF263A3BBC0
084E41AB7E156E9E2165C7E9718529865AE5E9074690A469C5CF63B43D4BCD31
FFF662206B62DCB94A1053FCD5E1EA8967EEABBC1C96A2DAB950BC1B301F19A1
B75975697100FB1F50DE86F6E54C21A9387F6FACD91A7B54C89BAE02EFF0AAA0
EB7C7255A33398F5BF31C224C3B7DAA10978CC97B56A541928FD21093809EB72
4DF550F0CCECBC7AB4DD25A95360EF04E13FACA6E44F5D3B8855742658D8FCA8
68EF94E7D145F679ADF3D59A67E3FA63D13B8E3A43
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 16 /dotlessi put
dup 19 /acute put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 58 /colon put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD1A68A0C3496BCA768F4AF8016D7A65BBA3AAFD7F5FE
E75FE714FFF3D54D09C9747ACA01CEFD260985C6E87477C9C7843343C7E9E3F4
0537D461EF019E046DB8B5BA258462B2FAEA1826B3410BA3333480CFE0DECE61
CE2731FDDF7FCF2AEF7CC2B1EE7095F480B3B27D78FA90FBE923D372C680C87B
7F0E702B8FECBE0CBCB087ADD6D28549FE707FCB616448B0D94CBDC404915943
66539B177D5940370C2035D0FEBB3A3C666ADCEB45F5B15DEA729BF86BBCC309
0294FF267657EEA805DD28DF5DAD281CF587039D1E639833E2CDCF795E97068D
7B3553D2E8175A82BE3412E7634D9B961ECD7CE3E0AA8F32E6EE05C07B4D133B
2EACD352094C2D6AA2DA88EB80DEFDE26EA7497E5C32233AE17B59D78CB23B82
7449AFBA2DD833E89D545AF0642CD2BFCF1C99051658E60A5E8311AEA9CD08A9
D59BCCAE1A635A12399690CE9A253406DA02539F759806856D79FF28E4A12043
AFE100111E8021344776706D2671C212804EB8B347918C4920C7E826C2EAEA34
F61ECE9C7E88D84DF70740CF56C7C66E07A2EF5E71937D93FA73B5EE02C2BEF6
EC0FB032A88337B4A4BCB2FE040CB0E1E2D2637BC5657A1AE2F2E1D8542F7759
20C6583518789701E70948A205668864092D49CF2D1F46B3A0C33E3CD1EFBEC7
8AE44C4DD71844BE36E421823CBA00DFD3716DDFF4F3EC7B63BDA09446D5521F
FC9F003CDB7D6D037D0E070E22513C8895730986317CCBBC2913C9065C3CC2EA
30A1385A424F969C3F2151E69DE08053BC23667230FB93932F7B21DEBB25B865
E50EF21DE394760F74D19182503463EEEE0580F0B2A057462EAE8729BBAB3ABA
91D8D85F8BCE2DFFFA97243CC8724351AB7AD461E9F5CEC364CD22E2ED171581
5BCE4710CC8110EB5C0D323EBC8E0A17ECD640B52FF6C65AE592A99D72AE16B5
4A872E6C5A46D0F4031BB45349AAA844386FF4519A55A4970893BC8C0B6B458B
AFF2F192E622024F4378E7C1B5904CCEF97F4E0DA0C98D9B9C3F42C9D2E1EB20
F7671A79E72CAF9C74C086E87F186630012E5C9BFCC7E55CD4EB691FDFEF6F2B
AF8A433E06CCF5F4A25A78F07D0213B4E2C7504A6A93F2CF2D564CA3C99CC084
2D2EECAF8A551CDB1B964FD66E0C5C61A99A648017C8BDD15EE574EBD215B437
48FEBDDD86AA0E1A4D84703E98D54A71CF50ED4EA6D35E050F864E261E023348
6A83A4428C732F4BE49330DA4BA8F3193864BA40C5CD64FF865482215DFCAE0C
E404EAF7B0BB3AF2F1B02D9B08195D71A74FD3198C2683EAEE0D0C7F37B56AB5
F42641CF3302F17BECF942E052B3A6888863137BBAC03236864421F805B8DA53
E5AD28723CB33DADBD36261E712ECD00D7B82995106B849711A76636C539571A
78EF1916A9AA5740344C32F11E0537EFDEF4CC7BAD936B6641AC713E9E5D0A2D
CD4A8A3FE8CCD8B43F82ED37187C98FC18D4CBEBD99CEBF9084A98973E3ABCB9
EA92ECE587266458F73F5556EB57DD626F058BC29F2ED8AB89FDD286737F63E9
24B42E0E29107EDA7E57211434140C68252DA1BB4C630B1A2422F58E86BC447A
BE6B6864B3CB3CECFDB9CCB20A45D31DDD2B970E0164EEAF5F219725F2CF95AC
4B016439DB3AE7876D6AA879348752609CE28754807A884719A2CF9A157A16DA
708A873FB407675C5C1A1BE06DE7A199A004D438D7BA6C0918A1A0EA4291EBCC
40506F68C9CC0E8F6961CB0B42C292CDC541F60176EB75092EEDD81631232DAB
AEE83514AA13FEC2A64E480CACA46CCA57F51BDF0615783C7FF19110C85B2411
F25E9C6A871EA7AF18D246E0B44687F26D91E479E83F715281C4291C9DC1739A
E42C9A3A42CD6355DA325147D03C4059D78F3B14CEB8D04B6782F47E9060DF6A
FAD31249B97C170CF8FABD5A2D8E9D8C05B1177840EC7C52F772CC37DAD70A4C
EC13A3D48CB6E19277F090E1C3826DB3DDB6FC5F6B1EEEF3BC9A96F0EF8A2692
CCA84735F6717FCB1393C9D9E9A301A41C1C616302DD930D3F4CD1F65DA6ACAA
8ECB26E0DD89B889CC3FFA69A73D3040378C9F409AFBAFB79EE5C009A09224F1
11940C467C56566CF6868A56FDF1E7F212D5DAEBCF10A980B2F11164288BF042
696A7DC8C6BE05BA7A4034CABC434E434D4FBF7C2BBD7B559F5F416E7BD27D5F
6906D950D576C731B4E5AC7A558FE72A953CA0F3AFD8AD506BDD842372534483
5903741B47E291575E81317FC13F5C00BC316E3B0C32B641AD6DC772CA899FF3
EC83724AAEA93A61E554C00D7FEF7DD7C8152605B55D525B31D79DE7C9A32D6C
4CB48753BB8E36378DB5A0A68FF058F4637632D07125DC6DBE23F3DA1EE71B79
7C106F0C810A24A05969AF65FD9B7B4CC98CBA4D3EE6442C0A00DD93847628EE
8C7B230431BEEBADB8EB79748B2B1BE9374E611F3EEA091C117107FF8FD17719
F4169096B8D56C666BFDACACCF3DA7FAFC3F6DB5E6AD80B8F7C970C0C7C08388
010789AB97078CB7551ED964CA23A547DA1ADA4AC1D29731E81F8BDF840E10EA
5057C86672D91144D88BE0CBD799B550ECAB2DA273F583762972927257470B0E
6FFB82283297F9EE804F1F95D582045318A9596CC3442B69A8582633AD91DD47
253D2CB53C3F54D091AFDB9F241A6ACD6DC86E328CA04FD8077CA858461427E9
C60780113D4E37792D653E8E72AB26E74050E19438C5D606BD8A09693198E765
ECBA7CD8F7EC2BE9FC6B028860D3E06BEF3C2B5B46CD46B69CE773F32FB12486
4004952E92657C36BEE39824E04A7AB5C20F2CF205EE36A78860F82986193CE1
4C731736CADCFFDF25F1D7C8469AA559E56F1E85D2F6A087CC14E686D03D4F71
68EEFE5AD12F75EEDF720184E18A85D87851212A661B6F034CE401EF94678791
A4BC31EABCF181E6275062BF57679E31EA8916D770ABA3A5666EFDE8673ABD9F
E8E09E3E7DF9A98E18AF669BEFA0D46E6F3C1AC6F3DCDEE3CA8AC48B50557920
034693B03B8600BDFFC20DFA02DC1FB03DFD425F97DDDEC6BFA5E567E9AAD530
3DB12D4E064CBDA0F8251CD8B2B59028F9E64CCD592F3A5101C3B9016957CA8B
048EDF557FA3F9D0B0960FC78216F3A178145BE20BFAF00065AE02F6DD8CFE23
1E404642028C88220C719F4AE2197E61E555683C6DC3114DB1EBAF45284C9E83
8CB2498495DA1651079EBB7C6FC6F2CB479A1372D42DFF6D3EAB2D1373AC29D0
2DD03E418651F8BAA2C85A14E0D7E500B31416A7A0E0100C0CD8AB79AACF4E18
EB7605EF9B4C3F520147F6C273B4EC009114EF0E61FB1A2CA58608FEC4637A20
6009320F49D31A41BC1B050BEFE4DEC3333B8F1ACEBEC19D7B4D2D6D7DE95732
DD6D1B9DE5FAB1CD1C3AF8F0610143946416873B003E3A3FC45530BCB7AB286D
BE8B1239741E0B8AEEB0D114DFDB27C06BC330A9AF962DF6288315929D0EF478
4D079EC5D8BD6A4ADEDFB378E47FC245E7283C6191EB4200D68F0720B78DF6D9
38E32F82AB101DD20DA9204AA96BFDBF5FBB2E3BE01FC028C5D8C9097B526198
DB87A89B5C640F8CDDA437B9011FF50D57BDD4A6DF9AFA8F9A8CBC704F278F2B
0A16F6FED259C2D45C851652AA1AA0BEB179B3EE4C67AA0A4781E35A53DBC9C7
F491798EF89B075994A2FBD235B1F3041C50CBEC095A7E05F600FD03CC51FCBA
B68877D1669141618792CC95C93F6631575B5D758DFA4D6F0C9F1C314EA8940C
98684FBD07410DAFEAF98B615376B8FFEC86510BB841EBEC6B70E23BE091B749
96FE26DB76A15E4B508F07657A775DFD09432DC9CFED25B7BB6E5BA44ED561D7
71AD99529ED8BBA54B6539631A521510CFA1BD880979A44ACDDF0B95CC133197
03D0A47C843546AB715EBC4DD6F5777548141BDB16DD72AFABF04478516CF80C
1A35B1F130F648A5A0E4AFE39F8E0092A8E24AB711FB65D394604E5F222140F7
89C2AAF47BCE7D0ABBC82BED669F72F21EF716E36239340A3C91882EE441838C
38B00F062BB97E78FD0FD2A62B72D80EC08AFECC4B70E03B1DCCA773AE818B83
FCFBFFAEF6E795779F7ADBEF22876E8FAA195DE4C4C31E19397915DACE4B6F6B
55ED1D99ECF16F5132AE3E7698FD505092F5F8CEABDA51AC33B52AAC73E9CD96
B0F501C5A3630A1851DDAC072D19BCD5895D277FB2832EE0FDAA76D8AACA9C6B
E5B45500782D55B44EDE54A22B184ADED3CA6DAC3CCBE5EBB5796B0E12AF5E13
4421980AAA59A038CACCB938B1F8CCB86CC4295C7202E8946FD76C88EBDB8DAC
CFE1D7EADA9B1B7747815540010657D8244CF19E38737E9471CE7C2E0C611F37
5621A47A580E32713FA9C5D6A34DED5428132F438E94804937E536746A4741CD
1258C85683E5BDC4777F2069E2DB4B23CC84FE8DD20852CF0CD3DFC76FFC3841
A3B1AAEBD9B1703B2F9F066F5FD85A270B1D1973BF6634BFDD005149EDC22160
841DA513D3CFB2C70924CB41B3E8D430A3B5165D1F781BE95531B250C3F3520F
CF2BD9CE7BB3B8CDA210109F98F8F7AEA4B8DB04D3FC7E56DA9807EBBD2A6B77
3B2C9924F6723F855A64867CC313080C61D111F78B951FABCA7B7BDC4799F709
BFF1809D0BF2EF7463227FFCCE2B40673EC58F27F8D891C89A8B3E3D9A0DABF4
C532D227D47E95D3528FF313276051E83DF483CFD470599F2720BE4F50B7FD36
7C3B1FD73307FFC5F6206C8F833260BFE6F1CCDF2C3F7CDA25DD1E3BD852A017
132E599AC25A3BDFDB20808D689965E489AF7DEA790E2C08BF46CEDC1141CA1E
77A16D92EF81C24FC885A53079B6E2DF40A1ABC46BC61B1BF13785461B5121FD
9C4D521440B6462747CB767A89C2D2A45B791E5A11B0608908B1AE682591DA35
2DD3EE380A70151E8F31FD458BB50710AEB1F33699D3751272E0CBC652B0E7C4
4148F288639CA04E7895862A20B47A43FBB20F27423D4407E454F1ACE26E0EF9
E28DE92212909AED274BFE9DC591E5FDA4A1B794977C867055931D7BDE312273
D3DC3D1C997358673B5FB495ED7FE10F98CFF7B94E72331FEEAF15E4366EF366
93A9B7EBD6C452A1B02C456924101DC40BB1C887A697E2F324EC580C9C0D780D
E53CAABD0ACA9F6400480B9D0F53CC25CEEF87294D870A080F9B81421B9A8F03
14BF2179861AD41C4EB1BEE298B4D2428DA162FCA8173C0A835BCD17798D8DE3
5939996150FC06D978B2DB752BF8776C3E1883D16D98B8EE6D6949C6AD77E0E8
50BB8D00F6F09BA36435A70ABAB3A55E2E06BA6598409E76DE9764F56EC19382
F20493215D69D0F8A6DFDBFF8DE193D1B0402E753A9F6977A72BF879E3C7D497
1360607BB4E815FFAADAB49F623601A4EB000073E85C85C0883410AED70B5AB0
E568E91BCE8D470E11356E31ACC824395769DF11F1A8F27324552BF2F0038D9D
DC8B2E42D4D0358B380B106CC0F935398CD093B78121904FCB8BA1D5977095CC
005233474F401C4F616211DDEFF9BB2526B840B79AC5A6E5519D3352D0FD47E8
BFE73268D637A2731E9914F6A9DD4989E3BCE46A2F2C43BDDE51C16A2B8552EF
7EDBF1BD4179BCEA185441B85061D3A640A103E899B8972ECF71CDC5B3B0FFAF
6424ADBAEB682C6B6AA8D6532571516FF5B6AE5AD4B5029BCDA1772ABBCA9234
D481835ED3BBA62471F90C67BA04A91C547C7D5F72FA4CADCFC6E2A8C61267D2
83E348CE7A5CB39956F5846ED37C1A36EC7D09EB4705B5E770212781C0B98884
EADF1BE6CAE286D75BB73CFD9EC30A84C988F86B4C9B0D37EF5669DF54D138EC
84A9B18ADDCEEFB08560627622B8F994CFC48DF1910C515F8C8E6EA3C017950F
34B058F08F66F930A5D3D5DA2464760E8DD148733F4932BBF1333B199BB27E84
1E035E0EF2C9D137939C87D303FC9FAF5FA6904527573BBA9E7B891808439BC1
37336CC76F808571EB8A19B93F0037619E17CF2EE96900D18143F09AB1EA0C1C
98C7C85D67BE1ED750445170DDF4E10823CCE874F4FA76BD092BF6B9AD3055B7
408D0CDFCC835DF4FA442EECFBA1A59CCF41BCB35FA51097230D6AABEDD5A92F
B7321C0E3EFC3440CCD303A7FF453A8AAEBABFD9FE37135756476D3F774D1001
94AE684F42E0DAE8EAE6021835EEB95DE8BFF92CC52FC0CD05BADD6F637E1640
D1EE6E0AAE928E82DAEB5FBF0713B7BD5CC8D99ADBF88B12C12E8EABE5589951
8A3FD845F6C650E749B939600407EB2E8F9D93486CEDE4F26DF09FF533D00A1F
EEA87FB20C30A55D32ECFF2BEB0B2275D534E4401D1327AE6189EB1897E4FE55
3BAE20B09A6F2F534E4E4804C58B4AD94B18DCFCDF3091CB934475226D06DE60
0E039AB6E5C732E20A923E4D30FEA488971AC4078E2645B1EEB075DA1879BC57
2CF4EEE572552C0BE628038EB3D760AD5E08ECA827D9F0318F9892421015DFFF
EDDFAB10A67976CED69DBA6C627C8CBD44E58AB19A4155347218705F41637EB9
47B333465BA59D52A21832F0F33EBB2407AA925149BFA36E2FDEF9F0D9510FA3
053C0D144C3558D2EECE68EF68B752FCDC471ED6488AA68575377B042F1113D0
7F8A54B2F870D3CB408677A364A31D8CBCF3923033A37D5133ED808DCB110C25
355FBDCE0DF84C8519D2D68D6B5E0C1ABCE9E54D2EF1FD090FC07CC8B9C028E7
F3352BF42D00147C84380A7E01B5BFC0B954B758F36A21840A851953B313B31A
A92806D59728F047C427D2A0B2FD84652713411FA34B0ECA99671E7E2DBE2012
36BB2ECC6B921C52AE787815CBF0CCECA73BE1247EEC0BE541863E5CE65FAB74
5016CA277D832AD04EA925339F35BF4F243FBF14FF96B5AD911BFC509E6172DF
2B03FDBC76046F545B225F2BFCAE962F44199D1BF4BCB64A4BF8E14DDAF1DCCE
39064DB0969D4369744E9DE9708051F86DD612F9F6956F5A42384A73232B1C7F
D8930733903529B8CB56F88D6A8DD1591CA868B25C9887CF01BE20221FF6D991
6D0B26D48F5FBB036E61F811114AEA051B4C67CECBF330604480C3A66ADD92B2
94708E71C484066BDE90A89A45DAD53D8DD0F4A812B5B6F38CAE1B7EEE09F412
BE7A0A9DDA5A55E518B6C5B7B7BFA983E203459BB23686E78D11F418510D3219
CD6C4106FA7F8BC6AF0D6AD72474297ACEF46786E946E845854CA069714D7691
106457634B6E54BFA12B28A487BD529F82801699826FE8A7CA7F5DD210B3E0F3
C2E6CBA61F8C2F8C06FA3374124EFA238CA4177EA4D224D0F5A53B4851F8ED08
6C06D425435DC356B77F89E86CA5F22F2D5A85FBACB57B140DFB08F9F96409B1
1CF75D93C6FB3F8FBF8AD20D3A794BEB73288F2B631C602BC5CCE9E0874B8A92
62A811BD27F6002745978B4E3BF5016EDF800AD3817365958725462FF756EF12
61664F4D970D6A1236A38AC03531D5E1C1D5583BDBF8F2548116C5FC6AAB861B
C6F0CA5946A3BCF8D2DE66829FF4739096830CA6B9B6B408747D977849822093
1DF9CB314209879C2255A9C9E48BA17A3D7C1D3DCAB048C6E359C9787F4006E9
50999263DB5B33C66DA6ACE7E4ADFD72BAF5B0CBAD98E63F11494A41EA06ECED
A7FD7FF4FC7A483C6216F44AC9B2B9E41EA3807A3C17433679187D9992AFBC93
0B00E358F2FD13DA3CD42791B1964CA8303230E274C47D6FF808F0341F674BCD
5B4A9198C3A063CB70AF3424B8009CBEA5F3216D7F3181BE6EC0819C182B4BB2
447FF3E05911A2049A61A2F577787DBD8670B7043255F111F81D35511C5531EC
643B605D707A3974259CB9CD27A449034AF619942D26428C5DCADC6EB3AB5B3E
F231CE1EA055739C1130FF225C94AA64F2E74E33B913971B13BB0D44453DC841
9BCE1D8C05FE45B23A7AAECF57CBA5C06C2E9A7216EA80BEF625392238EF185B
6DE1488D2843813AB24930FD14E8160A924174D11DAE5606629A3C1E52FC20EF

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 56 /eight put
dup 57 /nine put
dup 97 /a put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1D577B7D81EB9B61496A8BEF677DBB4D8F34DF77A4469B8A0EB0ECBB676
CB4CCA7B5AE8F11C3DB4FE99737631A4FBB4B2F9ED0E80B3323E2DD2566059EC
002A5A1D19849DF316B2A9707357D0B32672BA33950B2EC03E1D6F6C7685DC6C
7F08860D60DF7104C1241782AEC0052AC930CAE2910F92ED90173C983D1440F7
EDCB2ED0664EAC163E711EEC1CE52303877A36971FF679428CD4112021DC5C04
736D596EBB05A122E0CF314102C95A9240565B1C597C233C35AF3C703E9463C3
564CD9F27851311DE1D50BBD66C43F330C413E80C8DD45ACF2177D49874AAD2B
92245CCAAA7ACC77213C1D9EE9AC617A49BD651F40D4277F01E219CCC27B3CA9
B97DF87962BC4FA5249BDE209E906A7CF6A198330B0C2E5258E99E6B6D457C26
D57C9C6BEFF7369DFB1466D4EFB0B7AF9756B04581FFD2687D1B7D0E91DF2A4F
757436432A38A4B91F109F7114DF9812D49ADB79375A63926A8F697E8B5426B6
01126B2CE72AC322B412C3E81F070526CF1B50930F89E768998D60BBCD1908A3
817892545001652336E76C9DBAE4531557AFE03844F52006B90413818FC19635
60387DB837B6283547762DEE4C2F2372D4A7148667DB02D56A5F3349AB292DD4
456E8D527FD572C0114307810C5369775D0A51C491B3F81F3E497C569D014D3E
A415EE3EB6BE2F91A6CBA89394108F51BFCC301448568E5974F523248B1E8A05
32C8161DE2247D2FD0E07E489B332552B8AEA4386BB395503F5C4090FE80E15F
E0A412CCA1A643A5190D7B9BF39E2A7255C8CE6B5D25A061984434A63C2B937F
D1A979D10841286A80A8E6A297B47D2E19C758AE89E1A7E7AB976A61AD3D5563
11B34B256E96A24B4D4F768E4020FF1BCECDD3701FE874D4CF4EB8F85DD0DD03
F6B994E511A4BC22A65C3F5DB3D866615217327D26EA961BB1A84D09D927CD8C
C35E6AD09761D36667826785EE195FCCD43D82288350DE16E4139C21C2493981
0798E241BEE3FC7198287C8FF65BCEB012882ABEE0243363E530E67AB2CD303B
AF26DE1775A3A85BE3DD88AFE7779EDCCC7A4B02D652CB0B7F09EEDFEF60DD1A
0BDB7A3BC13F298FF06FCFB24367D5B1EA0BB0C71A0F821C1DD4A5A071241F1C
576209D4A33E95F14BB882D059048C64E6827751B9EA64CFB88E809EA2E03CD1
122D769EDE28A5F6E7CEF0B4AD219E5B15C512EB436B751C46F7F96BACE24BDA
62F21DCB163C886BD2A6235811C2DBA9AB1AA0DFFAA14F8F4B3213987406600E
E531E55AB411974C62803A05234326BE4169A860E40A147F1B7B4E158C0BF5DA
D5DBC9250DDD7B58634902FA461181B169823C43BAC82D56A35ACB5985D7ECFE
4A30FB804DB4FEC71A650DABBFEDCCE15C9F4E5E585DD84DE4CBAA7DF040988C
F8F97416CC01D36680B57E617D801E960ED6CC7907C22AEAE2956D5D85D0B368
2079847AD82BA4B45E8509187715C472628E0317A3D10C1B97E7892B1C88B016
2A5426E3E527B7E529FF0854DCD474DB48B6017EE32386CC41CFEE7942B73771
C99B819E1D3C53C184E886FEC0AC15E408BBF2D3AC1E3DC687A2BC6A10306B1D
5B57FDA1BA295FDEE640FA08164151BFFFC56EA9F5D9FBA4794CC7368C301863
C432457C4FC05AB5E25A9EDAAAE9E7C1F2F51E1E406AC5189F9757EC0AD68DBA
5637EB3A0D06BD2E6FFFB4CEA73C483FBDABEC512649CED8BB92BBC98FF2722F
6CC309216C74E01BD3B628E715B04EF9A72D165973307AE98D284AA51C161997
05D30E69141C46F56235D049F247B17E62CF3C636F4658AABA3B7DAF4ADDC552
E73B050E7D5B282E9314C7803087BA5FA70DFAFB1DF99F700BB66EF7E9202DDB
AB66B21F5A587BF153AAC0534860EA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.0: CMTI10 003.002
%%Title: CMTI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI10 known{/CMTI10 findfont dup/UniqueID known{dup
/UniqueID get 5000828 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI10 def
/FontBBox {-35 -250 1124 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI10.) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /fl put
dup 16 /dotlessi put
dup 19 /acute put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 56 /eight put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 74 /J put
dup 76 /L put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 89 /Y put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5FD29DA32D34C95E
2AB2ADB3F60EEB0600C8ADE15A2380DE10AC5AAD585FBD13097B1A7E8E210D4A
EE96785449E07F0C8EBC2EC5EFBFD0897DFDC15E5BFAC9584D8DE95C5AB288CD
8AD8B9BEF0B8E5F887B3B0B331542FC8184DCCB753DB6ACEEF98B85756B988DF
CAF1AE0DBE7D37D5F44A2E760AAE3A5197C27B15E32275A64946C3E4D0476FD2
7FDE148C788DD2106F7C825E270588AC05B57E625AB17BDD02306F9E5FC851DC
32A5A6EDC43C770A71419B2C0C8074EF3F222C8A2097CD81A91F333A521B3A09
482A4FE1CB231CE344AD126AA284C3280AAC3AD162CF0EE241BFB4C8F20502FF
118507F5D1B5FD898571015E73E5CF2281085072E00D401F6F59761EEC3E8381
1F26F75DB66C504AB6BABA87D121B1E7040A07AA2FE01F80DBC246CC03C4B2DC
C2A715980C52B7F96BC1A78FCC7F4F52EEED5F705E08FC1E5BBFCAD121FA88AA
8EBE58172C162AF409DBB0728F14923ED02A65EA24E5D52B6AD07777455A70A4
61833D3789C719BA92E901232599767E423D5AD9C807670BE0E7B5CFF8256A20
C7BF7214FFE0342809570F5966A2C43E784F35015D9040BA34FEAB6A6F089504
3A40A9E9D711A2721D3F4998371430FB3C94BFC619559B97D49627BB630F4B70
9D0A8FE4E916235335C3962F3CFDB04C4A3CF714DB5E260F4E66FFF2F27CEF2A
D4AA26BBCAED23B8BDC98F8F453BA27AD7758537561E766B82DC3032E92A9EB0
125D98A22C5466AF069BF72A9BFA052A8628FEC6A6AD0B711DFFEDE3AA2D7CE8
34EA487038EF50F953B8B4471CBA6FC3C53877EC1BC94582B1123EDF44B4056A
30F49394BDE22CDAD7F01951C7013D26979277D18EFA594E8F4F2B5E615187D9
39E842EC28461B9ABA52020A127D2CB9002A673A435B13C10602EEFDBBA6BD49
9DDEAB9E68D655443A5C2492BA061C1391A51592BA8C353A6F6A0708E8860184
2B5D031D2CAB87D618E9F6F7A0BF3F66B3FD5A25BB91F7F1F5F99CFF56EFF4FF
0A35C55658001ED2E97B26C869292F6274D433A5443179DBB8EE987196306348
3F9E87C6422AFFDD30080C9AC4EE7FE5E2DCBFEE4974331F4AAE479FD8806D4D
9C2B85FC69EB0453AD827A1E767E5C484BDFBF5C8D6E2B3C96298B390F22D757
802643A79D5E29CF3AEDF0E12CFBECA4663444FC87F2027571DBA9ECF688BF28
FF0DDB3AEDBA0FB28447CB4B5D5205F40C1E7A525FD7373392EEFFD910AC82D0
98E71660A1B3227C4A2592F3E853CA4CDF64DF19A52582E167234F4036FAAAB9
5446BE102DE2BF43E82F0112C2A20F15A3F92C6571AC761665A905362C4F8BDF
AC8705519C99862CD9C0D75113C4AB5FBB83C880E46B82715B5628890D9103AD
A2329638B95D93C4DECDC5E6C588C9D5183EE6FC28FAF9825F02DCA567306D93
5440987A81B51EE7291107A08F201C609FEF91A8F0587E8B13D4BAF74A5A6815
DE9E4441F46AF8E1DDDFA2D611C889614040B144A5EC064DEE4638C04EAB2E37
4CA8F50FB8C4D65BB296DCCCD39F1F554CFBED96670A91F515CA10EF896874BC
8EF48C6447752C70FF5A06F928DB55586354076773BFF7E94C4C3A7A1C1F421B
A9B4E3936EC26E0C19BBBFC90F021E877F54B62108F6DD1C7F6D5B8E64FC9362
E173F01BF2904B7E5A08B3543611562C2714099DE7D4FA330DB148B560A9601F
42A84452811CE213DCE782A0D7809CFD954D6BC1EBF2BA4D1B18F50FA8174C96
3E0120E266AD5DDB40B3F6798AC28CDC5C3C4BC34583528F5B5DC8A222B80B59
A3A93DC715D061EC6915E6E6E21A25425C25E8747C60F170D61047108826F96F
7830E220C108B441B6EA3198E33C49BAD8D43086E49F5A2BC7958A1A8CD011C4
49045193394696EC3DDD0BE084E8F2E9F0B9496F035C0DEC1CE11409DF566428
D50043CFF5CDD1092F6E0807E660B68163BCA738E8D98FC6EE3F713164CD204C
0BA84FFF4F33F47BC31750B448603D7ADB9AE92FA91AEBBBEC0DCD66980E6955
CEB425ED07115B24E40F53B29B9D840842EAC691B4F591F866DF27556474B485
1C6F53DD72499847109B16C7093984A6B8487D4F3870DD517945CD90E648C1BB
8A6861E540FCF9D75B984B5009B5CC760CBE297042C240DD624111670B703388
6FE6FC0E89C6B4C88F51DFF3913D0CC1FB4770C8CBEADD4B86393605C0B6C468
83CA5594754411B6FC331EF56D7CD6D247FAE42E966583C29239A8F862348D29
60B177984B6B957E733DB4D275015691D91443BBB13C2DA96097A29733CDB284
42F89C85A7A743338C9DD3BBC4EE53F695E5163E6E1ABE5791ABF100B198B9B2
1C21E2FA2FB4AFE7F9BB2D381260CDD3A2CC05BF513AA1E80ED69FA27BC5ED5A
21445BF00BC2F997B356D94AF13736C6D3B0613EB6F4CD96A685FEB672661DCA
206105EDC3CA07900676EB2FAB37F48D2E8207BDE1463894DA3C5B1488AC1EE9
D39DAF691648048F5D7A384B8927F8DA2BE3602669F71D80686E427F395134E7
7ADCC611BA91AD4B7A0237213C60CF2C905359C90795230344FC3C50A22BD44B
55B2044792509F50F5C21F53D9F9E9F063ADBED3AB99E2613B23334FE8DF70B4
6120F2EDF69F50BE793EE145B9FF9C73179DE640FC2ACEB5C6617F918CEEB762
4CD81E665B2E544864D13230B058717B207D3CC5D6647D5343DB4D0356082392
871EFFA896631A7E0D6477942B632074A9A4EF7B09D4701B1639BAAB4E03A40E
9B54A7A4F845CD63F88831EBFA4FB847847CB98F3455CB5957F2E0A0F5623645
DBB5C5564C7F8B117D6E27E65C0F3EA81AE67B4AE4B201E7C4FB0A8364FE53F5
41A7CE8F834C2C4B322809B353A5E63BBA7BF3B7DC1A85EA700BD287C2BD3FC8
2832B0BB4695FC937FF5EF06FCD87DCE6DE793C2B1EE10E6450352C17726155F
220D550B1759E15AB2C1D5968E52C8080CD280E99D3CCC0E80C2EF8BBFD96001
A226FEED7311EFB4B67F424B557A877379A15BCA54780F0CD2CCA00400B9B39D
981C6B552AFD2506D1B23618FA9AE6D8143CD7198A8482CB416CCE62B992347F
337D505A4078713BBD91E5535BD58EF0351EBDCD749CC24D4AD39F8CECD7D6C8
139756680A4C03A58B3374CEC658D30160AE4863A3938A891BB59CBE02BB451B
1BA4B2B6E68AB61DEB85F95E3C909B8B66E220B9F18280161C279F10F7093CDC
100A53D542F071CC0A5AF834DC1D18738F5DD62A5573E884E1FFD22BD810828A
1EA47F8218C15A2E97CBC609927DA3CC2B802EA4A0D7EB57627C135E3B065905
F97597D818A2C5CC6F328AD25AD11FA50F1E4FE637980B7474D6F85A521892FB
72989AABEBE02A2D0EFE88A6F67AC29F5D8DDFEDAAF465C439983C6B84389FF7
A6434462BEB7B07DBE4BBA61ACD4A60C55B5C0AAE527DE381DFECA2E6BAFDC8D
310364ECB42CAFF72BA93C067B2F02D1CA7C34AE7CDC46787A0E234C8BE8A928
7A6F3DDE0338FAD532A9886E8E3525B85DD39364AB03EC4C0DD25DC179CC1989
1BE232E387E857C78332D834679195E10F1E7B87B7966DA3B2238F53D1E13FE2
8F55ED6A92A750C7250C9B91E29796621E7E9520373214D7DA81B2875A986D33
80382AFF6DE1F829F048E57664D9C4ACE91E4684A51023943A4964AB5657D610
3A5405EFD4CFD1EBA684243E15093C9667797BB47617B66054EE02C41FFEC45C
C1BAE8AD56B00D323FCB1D2744F061FA16E161988741A319B1564E04BA210996
4F9F02A3268CABE450D166A763F5284954564A1C86B76544C5F5ACDFE0D758DB
865A1CFCF9FE8CD5F9C3B2998C56468FD52DF8EE60C6935A3D221EAEC7714E3B
301371C7DDA0B03A2416238F2B47BAD3A2C5021C886DF51C695AF9C87A864B48
3BB3FE0B355EED5454B59B25A0D8A1B8CBD356C24F64D9B55E16C30C011365C9
1E0380753BA3EDC0868788D5F50B9353D0227BCEE1BE36998B2622C0759BD66B
E4444250589F9CEDE766D8B940770CB6B89503E925B35C00CBEC2873D2DC4A29
0823FB7A3717B69A7DEDBAAECC067949932728E89BEECAA91DE3AF9BF070B9C0
30EEFA8C0A55C8388CAA2F0515915C98E67FA095BB98967D14B0DCAFA9622E4E
2E0EBFC768D80585ACDF28D8A5C2B6EE2FE7AAF62FFB90F569F84A0903996DF0
C1D5723366C436E4088F3E2BB9B47F9789052A71CF5C49908CDC1DDA194BFB89
14D7E3D7D4D72A150FD6FFD8303E9DE5A97A71B808B8BDF2AE466F31BF5D7A4A
44F81230BBE2B456A221E2F72A8B59F8FEA8D31F8A005A5BD93B9F49CFDC3DCC
CE2B67090460F632271C7157BDC2F05BC2749FD562FC28682A616A52D1B67654
DF78B7843A9EC26A7DE2EB168F874904C2915B97534B2D4D9F74A9573A771D34
9F7BC855E8F794621BF6AD471BCC347E2DF5F620F5C209E33A4CBF1EA85AEA87
4492A77342DD33EF615FF34037D660B713C908786D9022051B825226545827A3
2AD1B05D654DB6E6D261B4E8AF0933AD1F0FCFC7201E1A7C1B4199F160C38676
21ABA2DDF1CEB655B3EC3226E0B122976EEA998F7A5241F062E54AD1DFD6ED26
47C99A439E0AE95415059179867CDD3F0FF751F3141309F40E00A6C7C28433E4
F649BCD5DAA64177580E05C495EE7BCBCC5FBF104DAF360CC2711386655B26F9
D349D887EEB32ADE595241560FD5924A1745A22E6A01DB9C285EF14596EBFF0F
03F36EB2E0A7C3864F819EF7B0855121292D49482F046A55CD7271FE03F02EA5
886864D9D8EC22A68C23089EAEFFF03DED6484D8C341861EF8B6FD3C5BDF5AC8
352DA4E13A1E30D0CB71E090E9CFB9AB2CAFD0CA7C34AE7D8E3B2EB4666834BD
9CCD1AC2108348AFEF6071796F4BB2FFA4A67ED917E76A109FA2DC2A30D744A0
9AE653A748C1D18FB52595D84E87F1C1FB6B2F32667FE203262C66627AEFFED3
92B23861E5EB238BB4EDCE09DAE1C65BAFC198CDD1B45D42CDF93E16BB82D35F
821E9E49067E966AFAB2AB52928F8DD6359984071FC37AA652FB834A09E5BD93
3AFAE161140E74C6531E413E8FBBFC42BFE8A464B71EB1D8CAA93B33D7BCC3B0
47C7EEFCD3E9FCF26FF9441DD9BDE68D77AD7251C06BBB9A2103049E8827CAF0
F26BEF33F656A690235DEEC623CC519AFA82DE2AE16FB99F780FD7D8290DA40B
9B604AEF36B529FD184239E7D50561A07428D28E51B55546590A1AEAD4B7F2B1
AB8C5B9022C1FA03E33F8F409B24911AB8BFCF6EF4A8E415263C789F89063E71
C0910DC20347469380B7FC1EEB87D4CED7F4A361E58B61C91AFCABA35C03F978
B9FB5257C31657EE48504C355CE893FE3C553274C641DBC4004F5D5B879CC5ED
D3F21F867F6DF054127067DE86189F0B59A1B90FDABCDFEE61423609D888EEFD
F4A1367129962110C651D9481CEDDB8C5C2576A59AED64E95F7ED042AEAE2F7E
81AC0C408E593DC30DCAC334EDE9EE27D932B98F040DDCD195D6155607DD2038
970EB78221A94C52BD4F0EAC65F1FC10E5DAA93C17266F351669CAE56F42B68C
6D01E1EA03AE554D63CE76D800FDD9CFD89F80A241EAEFF7EDFA41794EA25CE7
97BD5028464D2CD45B53834B4AEF8BF0B9E7C6ECDEACEC887E8790A47A93F668
A9095E5FA1116A122C0E5B74E2226C654D3187C6CFD8807917820423DA3EC1DE
AA020EEEF2280C44A15209EE2F3FC1776875308CEAD38571E7BF889F287E4594
971A83605E0B4169D4A23EE790515223DF8724054EDAD905F57918FC0BC64F96
514B4BF7DC9BA79E763C22C977FB6146B10D26FEA1BAA7BAF21312F78D1625A7
8E242D743471DB5821408AB786E4A7EA9D35E30E85533C617689F95758FB2C7C
392E759C299DCCE36689686DE0C4DCE32649493650BA194A6208C5EAB670B170
3F2C70BF0EF0E3BE2FB0A79224FF4ECECD6BB3388C6D06867A0E5E3DB93C1B2F
464C23E44D3132E7D4086E3B59B1D13F49EB4772DEDF8EDC4F603217233FB7BE
C13C28648E9AA51D53F11FB896839F97AEDD8834BCA53CB0021AE91FD8E95E2E
F8A094093AF556B9639F508A401542B06821FF9DE1A745FE9AC5CACD5E8E1053
911442FC15CA5333751ABFE2C617D38FA1DC332BFEF44AE569DC631C93EC54D6
261583A695F5A392867A57F59B741EFCD2DCFECBC55D1EA5F2317601C9DFE9ED
D1EA466210FFA905A8F85BD58B98991BEA58DFD1CDED5C9B086D42CCE632DADA
147941917B879139E016B0DDEB8446BA017FC8EE5A354533D667B0835F5D027D
C2D580C16B80B3D05CC92C0465CAE077729F0A15B2DAFC89DCD349B3F81D0516
C65526EB5C10E45A8A85D716EE35FB9AB201FD7C89ADE5AD925A174169DA20FB
61E96C73A143DF964C20589EF24A0FCFE6195317F2FA0D2249C0D8E649C3D9AD
FF13332EA2E4C9CD36D8443EC8F027B61CEF92C6A6B72DD4ACBACC16E429A9A3
F5F29C1631360E32F8C1C93ACB22F810B86D2969A7480F486F62F8488BEEC74C
2C1AF13BB92BC578E8CD30BEA6BC8CB68ED730F54CED0167605FA76AD7B7E88C
7AE7688E598F91C471BD65A542E96D64B1EAF19FB4F1234308C48C2DC86E2193
11ABDB4C6189C6F201627C693691A86DD07FF55C30FDB3F72381E09C6080FD7C
9182762E5001E30F52A216E0B71E4D2D4E2F3B20F95DF3A11FDB2D2B5B5FAA66
C46226D5E0C77066349770514E5675550FAC9394FB27CD2C2F974F1FD58C04A3
1EF53A8AB3B2202CCA1CEFA66228E1480A0709436C44BD3319C40CF888AE4692
5DBBB52B15CF3A518F627F672135A24D5DB9B2EBEF04C860AECF231EBB5A3BF5
6DCCD5E72FE4B6DD29E896691868A7DE4120AD06AC573F5608B8449B38E71CA0
EB5CDA3F942482EA7973661170F81DC88D54DD5B92323F46F833DFA757107E9E
F62A47CC50FAA1B68ED535C3E0E1073532A05ED339C8D70B3B9864808ABACD23
AA95E9FDA43D54C66A675FA074E0A5B8777D3C07850A09087F36852B5351F35D
8BC4DDFCA35CF29CD5E3DE118A741FAC4DED36847F2E2C6CFE08669301722D94
376F540982958074E7F1383C409652F6C99DA39FE90B38221E75BC1ECB93ABF6
B00F410A0C5651DB418566AB350FDA1789AFD88286AF3BCB42B98386F7BC144B
02DEB8940D20A6B3062F0C4244EABC50923390064F1D027A8BACC3DE45156E56
4A942D1B87F1C4A76B0D4D6801AE792CCAE3009BF25368B31B6AD5476FBD3BFF
9759EF463EF5E78E10B7BF64005B2ABE0E8813950A08A1808587A98E0021D0DD
751AD515E8278F1A0759E85D8A084490BBB0F8206484AA36388B1013643D3198
3509078847BDAE08E76FA5BF3E3A73C323CE093DCC148E3C02C2DE1E26C94D5A
40EC8308ECB02FF7DD04EC1005A2A0DC74D4E587F10A3EF349E828F69FD38962
2F0C74D5DAB3ED6CC9F97008ACCE74C086A503948DEF1AAF58FC8BEC703CD360
D32098A56AC776B1BD08442052A2A4EF6C8798F7CDC102AF1A2009657254762A
0793F79A39DCD6ADBAA5EC84A7ED6018BBE727E5D477893D84F157074B24C13E
8D4881C7DF8ADC13EBA0D89745EF93B7616EC5355600BB0D2B630AABA3CF2946
AFFD0B2B724EF0F28393F2034B2E69DA5061426805353EB4D80E20739BC4C510
6C45275B8261DCBA10DE1D104B12F46ACD230977EE7D7D1D35D2814139E38C4B
CA6937CCFA653349B1EF64A98457F7B4B5D8F2978F16ECCEF7054905863AA46E
DD524CB33459220C71E9EFA7845A3A760A507B3D3ABC525B35930B613710A13D
098832C58EBBC8B0CA6AD516E6385792C59220331D0922A1F6F838A8DE13C337
900462F952EABBDC2EB1FBF94A66186C177501453CD3FE3582073DD86F04406B
41B6AEB440DA475E13240445D46726A6D45185D56BAB8807CEC8A8F7CE1AD149
7CE2E1BB5DE4E5B9592241DD136479A65905FD0062C91DFF7349874BFEA5D9EA
2F610ADB9AE7757B2307A1BB9D6797D9F9C4844A59841C7C7682105E23A374BC
A91885E7410F56F60C29AB8B417E2D6092F8BB70A2DD5DEDD4BA1077D7CC62FD
EA43428C6F79C332342E15F75B08A1ED360CD1885730E570A3252A5ECC419A7F
D124C3FB3A7D58C0EF6AC117F50D7D4B6CD852200A1F3193BE101CBEF414F60F
85935BDBDD23254648DEA12B95871AC8F859AD8C9315B258E525FA7BB0DD294D
497646805C3CFC1CFC72C17EED56FC5E7A5FA54691474DEA0C85DD18ECD59923
619117DC6AF37242576C4E9A56BFF2D3E717DFA750607BA2BE87050F8AE8EA72
8056655F9D9DA1ADBCB07A6697F6664AC6B6C1F5650255776305892A6E3D986E
10A3F76B65763C33A249C23C8616B866CC56D8440C501D46E821750FAFBA1CF3
06101C7D563C43EFE7A7AD8D402F232034B7BCEDA9C49AB562DC60CEFA521711
DB3D81E0400F776034AA7370C867BDF8F8CBE2F2E59D2099F8627118EFD202D3
51B7AC1FC6D959ED360AB4E5ECB4966369BA85B6E7733A5C7123CD2519845706
4B684F1C65D278FBCD01A64C1B5BDD5798313CA7CC3A03996EF52A5BAEC94596
23B4C55EFBEBAABF72DB85657F4A3558D4585AD1918E86DAACB863EB75D64BD6
3E250047E910F5587847B9B4F6BC4385D22750F78FA3820035607BDBC19C7399
F90508F5CCF259DA67858F9393AF9AA5E6146E1D4AB77FAC6E459BE47B063969
2D917CDB0ADD125F3A0304E0F0C548E655D710716E4EC8CB12CE2480A578CF4D
587A5A99FBD5CB140E02C5A8CE9D45B1684E027CF555018F19EF54D4F396354A
0C5947E6EF09484E90BBB69AC4EA851AF4CB1A21CA5F8E2827D8264E60CC2552
CFD63851BAE8AE22D898791E61F4413C9E8BF423A7FF763A522C2B09390C49F6
2F8B36645A69B98423568E1552BFD1EBDB58DBFF344861E2698B1C135A260DE5
DC01B8DEAF7032621F182F4ECDED721EE3D52D788FB2660AC0BA836E8B1EA4F1
BFB084AE9319C95757E75F340ED07C1B142979D80DAF664E472E5735BFACECFD
0037901ACCF767C1A67F28594B4037D46C8398A374BC42CF2A222791AA7F9267
FFEE493EB243899F863CEDA5E526054C8A94A04101D51BF70A469D302B99AEAB
322E5D5F16AF894B558561839DF440E07247D500AE9924A74D75FA534116CC5B
4389E58968D6F283AED79E4C43D9338450ACCD1A381F3FCE8CFB2F128C393A6A
A9E7DDF26B6E9C7D1A637A1ECC1335208026AB554031EA627492EB29BFF03444
8EAE1FDD2A51A42C4D86F50C32BD9054603767F56AB8F73124E62FB85F961C7C
CB8ED6A185AF28A9BB968DC08B75C05DBBAF5AD93B2884BE5C9CF7B8D552A9E4
239975ACB799D98EA20DAD98F7031F9031938A9CD0ED5086E66358D95DD054B6
83E7844B60B4F0427CE2FC07AC2DE0A96021072E67649116340041B3238AEF70
207BEF9244D7600B6137131B93A3012FA75DEB10F12365806B0853B041915285
630C97F1A4C805736E43F8435DB7FC12D4A9184C29464295E8A7955FDD090BA8
37B86779AC4B7CAEF9C1259263247925DDE230671158AF12DFE34BE5FFED7519
AF2D6085E83600D55508E00D2A268C69FA557DD87D25E83CA0AF91A866DC6361
91B211ADCAB2EA569D3FDBFDEE3FC2162FB111DC497417DCEF2CDC8C38AB822A
B24B2594C0D963E2FFF6932915C5C69B15CEB7DC685F66EFA2246BE501A629AC
D7688ADCEB87DC593373ED64F3502AE5F6674DA84355E87D6E1BE2F7ADADF365
4EF0A9B3A33B83B9A2683CDB30E0C97C0C6264027030B3E72D64A05860D0930D
79B47CBA3A32C02CA9125AA09D8009414B74217450C0BA777C1B93A5A9CE9539
F1EADF90410021306E10589A42BD6C35AE5C1107D773495C4743BCA601DA71B7
AE3DA9E8B4C6BAA6825975EAF495F92FC61205659ABFE171ECEF479C6E657A4D
88749559048E75A156675E635ED3BF9950CB1A46769805170587B87D7F8E539C
D3CF8ECA48BE6A5A64211A50C112610A7A16D3D509E468227F611162AE77FDF4
F1D503BECF5668AEFAAA9455A9BD1C06F7051FED1D9F043B2220F830553EA1B9
F9C852E7B1FF4A68741BA5A76217C9CB40AD1A30A43B6371B27BB7C9D890BB35
08C233C59EC3850D88DBE34B91DFC53F157BF79467B3BCD8C6E1AB642D4A7CB0
FF392ABED89B93114E6C24DDB1AB83282FA2955DF062F72E0315EEB5903B10DA
938819AD112BCDE8F9FA511F4BA7313ECC4F41B9A2DE9F90FCAF80B12989024C
34BEC977E7E0FBA2AFBC60DE10B87BFE2C6455EA321256F5654DF5C5B2144289
C1445E53D3BC4E61BA75C7F2FCFA520DBE08C85BEF124F955A342F4D621528CA
98E71379402C48FCC34C8B0A7D660989401399F01BD94224FB3B431819662AAA
D4F0BC02659DF33CD3D84B42BC969B4048340B6CCFE03811CA14E2A8B4F54D4A
751D3DA4C6A30420CD8D3890576A0A3E96014A5AED04C8A875AB579AEB2BBF7A
1FD50E7701178E341FA4F26A3E89DBF6DEDA936D76437ACD4B982DD560416888
E4C0D8456E38A8A3EA4DC1BAAE20860DA6FE3BE5BA8BF96F5B9650796AE7EE06
5B48D1F5A837DE489D7696CA59D3FE8D92B10D6E8331C2A411F6BC102670085E
CD38178750DF7E7961AC02AD11C97A9F7BC8186164A2D98AB251D39105EAEF73
0CEA6DB32859AF8191EC7C2A461E2B1A283B527C08D8FBF6D239F6AEE93600FA
13FB6CA190B11B2FDFB6AC93116C4B10AF1135D5FEE6A644A3E91301863DA4F8
5A8571B55BBD66DDEA0DC526A10409252CE594B991A7391727BF12EA7BB7E775
54A28B89D29F9F9C47B7F1E1003EFB2ED457C456322E9EB0984591B8F120AD47
4D0372540A3650CB83FF1A7D67F7843C67AF740BD573141B360AD44008DE9271
7D326ADDD0C4BF1E2EBB6AF8CF01925AC9BAB4CB898D3B0E1CFA30BAF3D81A48
1EDC292C89599A1BC9BB8C44AB6A33E86227F43696637BE24D0A04A3521B1DF7
57C4DA702C49F695801000086329F1A53D14F9ED1D418710B89DEFAA0D790699
7233F024A095D2CE1AB7B5DD54D6F84325C0CECAAB37839B18436746F3F14D1A
6BA0B351FBBFF263F31E62594779B619C91E86434647F43BB3A5B8BA131377F8
ABBEF65DA420C602DEE8BC7644197CA6BF6528252A6C038991BE08F373EC4E59
08C8D0AC248CFBDD558D875B609A4EE896038E4A185AA982B49CFEB3D9952232
91DD09EABE2AF2A39984775367B014E054D2C0FBF86AEAEE43BF2F2786F76BBE
8C22C35698372D0893E97010F4DF024307D6EF540A6FAF561ECAB5699225DAE0
739A2D3F1759BBB8B27E195E9874C07B5AEAC1F8344CB965B5B9FF7EEC9FCC58
6C114BA47B1E7EA99C5A64D07C3C687782F935A0BD08176B85495CB09D8AF917
911E620D921E41697467CC6D33FCB849C0073A906A6D8F0ADA8AFB91120ED039
04E6FD2D97515E87FC364855992F7A342A2BDABB1BC840111B286C9BA61F3E6D
A64C30835F8FD2751391A7E73A2EAF533F757547668DA8DE0F95D09BAF914EE1
ABFEF15B6A9378FB50533D6370A61A553A778F1A08301833B75B4DC09F574867
653FB96EC0358A6FA530A1582D891B740C0E15B43528D8CC0FB347D250F02AAA
E87F58E553F09A9C460E8B903DD0FE31EC67C1296C01B513A1EF20A1CE5EA428
0D6E234AD322E5C43A82EC231CB1C9C1211126EB2EF93D036CE9AF0D05C5F962
4D555D31A674AC2EFB66A76BADBD1527544F4618EF457BD2F51FEA60F6DFC36E
CA0CF53F932302CD07496D2F3F11DBFDC6FD2EFB28991F5EE2C844A0E1323D2B
6FEB54C151DB0DF32EB86E9598A1A787A099F61D3D79ED83FCA3CF9CD46F4900
7E372B4F135555D32ADBAE099127828ACE192DA6E8F828944F38B28BD0EA5D22
099A18483BC9038C474968E525E5DAAB9150BF86620F649591D598D06A332B88
90518465EE503454105B2563AE7F19286AD52D3669696A318BD22F860E7B5A8B
8BAE1D0CC37F7BDF4D7FDF86448C74B5871366F0374695B06BBFF8C1B5DD132E
62148C124768090A8180D0AC22C96C65956F6E758D04FD48E1682A33AFE2344B
5AC3F384CA1FDAC5E600576BD048C0BD04477F336A681D8B439C71C6BE51A934
68B476E5E95567186ED6EC8B98DEA72E4E13CA57CF8B039D19BD7E83C7F50DD9
042234891FC240597A423AEBE5212973439D865D417E42FF76590292FFC58273
1C4623FB302751FB098C44EE4A14C151B73FDAA54C4042F4A480B3AB18BFC1C8
3EAED3765C4EE4018AAEAEB8F479B987CD0146EF9232A53C5F5FE1E793E5C886
BC85DFD32F8F139915CF6EBFE7E37EDCF0FF340E70C650DF39290AB525F2A0F8
11E5A84FAC16098DE924D82AFC5584589D10BE441F5E4B5CADAECBBFC0273583
902849C4ED9C47A261BA3D43C421C29C3D850C7F9E1F5E48B5A8CB6EA47F3B1F
8B528B531BBBA579E827B4E00E1177EC238CA169A7112B865ADD8DCF8A1B9B07
678EC7EC91B9ED91A6859FBAEC0437F2297F642DCFF95D054F68D3453F17A28A
38CB245A25EBB2BF1247B34BBCA954FDF6FBCEEE95F55E6458CED039EA89369B
2B62DE93AFEECA2DA9D66360FFACAFA11DDEA8335BCD96F704BA4927D9875E4A
5092D2498F7A95BCD9D635B724E2CFCF797C3013A648FCA908B283E56ACF2421
7090BDDDB607D6DF4B41ADE2F56A047F46CF28D93F3C1D90089294E35CD59014
5DEC0C3DF0597C4EAF57C29FD49400611A8DFB46F2594E9116E61D10ED90518D
2A7DA04866C1AD51B0B90EF3EC0593F5B235E36C7BCF4B265647196A6860007A
49F2B6F361BCBCC00FE63092F4E264E840091C6F1E212487ED8B20AFCBE2E170
20D67CAF1ED13BB059C915FD10AD656E1FE99463F4D8A69F72FAD40CFB08B1A0
6103658320CE665EC7F4DA29615FDED496A6FC11919B3CE8EF6759E5033A1C53
234646D6AFA6BD2597725772F9D0987AE7A8CDF12736660A0EBAE4526EA10EF3
F90B80651BDE63EA15BF01AF6A6DDF08BEF5D9D32FF09B17990E97E5550016AC
58C44291351C1A89090543DA77F03E55FB0AB17B095979DC77AC1316389C68F2
7C4361DA18B3B733CEB5611B40FE3A47A3514889EAD38FA9B51B9C502B8CCE7B
E48979ED214A99E3A58AC0992EC0E5614F44DDE3EF2445F8CD5A444067E75BF2
1A48EE19EE86244A9D7530A33FFE04D1D20414D3A590FAE600AB9E4083C72064
A0C6FD9469B1076577383A7A1A1B93DE60B4060FA54813475CF023F80E388AD9
0F4D7FE3F577E9B93D67165931CA63A0A6F1992BF9D373A0FFBF8F67C6F90788
8533BE1ADC1B1F25AF63A506A39CE1094E0A6E6121D9C33AD85384E3A87BF9C1
24B389AA32F1EA910BEFF9A4F506792DCACB914F464F515B89F0CAA1E84BBB8A
FA983DF957E6E149B1F6B1F742FCDC60EE799EE48FC078DA6ED6F26DEACEFCF1
95C899E9B5FF9996D9B4362E7E951B23FDB0FDB30388763F5864DE1E9CF15C00
24C5F720B643C594E35781FCC73B074A17BF51112CCF98387F0D653178DB263A
C30049388CDD6FA2CC35B646ACD0A2878B05169B60356C5C2D87B242D09528C7
1CEAF189EDDD10053C0B167BE7C4830DD8ED88216EF687432707AA7B62486867
F1E161B5E5601B971EFF12C5EADDD001C6AEC8A90424FFDE3D68213E127AC706
BE4BBF3779FB3134F762FBADF4443EBA71BE074B456E51F00DF0E1CC1E232750
FF69AA082665D1B19A162A08AE663F421590B7C178C45A243CDCE0259BDFE2AA
27BAF5F930F38A07E80624E33C8B621F53EC1AB3C9CE3A45624DB14AA9EA3669
9965A8001965FCC86EC9679D7E4A6BCA4E9E5BE9FCB7CC7DA646773BE6969647
A25C0F98AE82F9A8903F948CBAD8F30092830FF05B9AFCF4E69F403A188E6744
7A35F280528362CFB682E6487B793E36D51F8145A3F745DC04A3BB886BB21888
FDC8F2C5DFCBFB9A44C01324CD1F31D781D72435D7DD825C4C6CB99015D6A3BA
24BA236B7477865D8CB14EEF2526A07467B1DBD0C2EC897E0D416023E1CC5240
14854600D9E877BF1FE36E80CF9A9395DCA5C1ADBD3B97EF21B2B3CA955FE190
656E4F228E9EDF6867E1CA070733F6E8F7131731DC7D3713E1E805286F9529B4
E3C1CB9DC833F77D0ED1CFA480711A2241127DC21508296AE1FA67E018B3BB7C
EF28302C93BEEC4DC45531BA25662614002280834C049877A4729F05119DF155
C1082C1E5915D0DF4C5CDECC2DC891C9089C72D097656B4F9415E0CA9ED4D723
58270555053C18316B6E4460B65A466CEAEDEA8DD88B4BAFA56CB50354CAF24E
B17CB1522CCA2397CB86A15548D2BAF1C6ED0D1F7640FB60F5492D594AC8FB3C
00AFBCEADE92F82F027B2FE54F85489B424DD194499B47DFF877E3530DFED02F
40C158DCC72CD8FBAE09DD216F678610A22E3509AAC9798F5D0151ECDFA89C20
F0C38AF81F3B6A1D831D0126AA6132F51CAA2BE363EA90E1387585D8888A4E91
45042A3AAC75895422C7C1D3647771C6AB57D5BE219201FE6A661401677EF8E8
820AE19D8D4A19D378F2492842F6E2D3695E44801D88A40950C7A2E09E901265
A305F7271B62D4D5E9551F0D24E5DE17EF96484FF07F194E39D5DBDACE365DB4
EAD0BCF6A6E71238841CA02C4DAEDCE3D6AF86769C2F6109B03AF59C605BC87D
A47BABFECC6FED2F283828E93944F0A8414B8CCA33C47C826A224677397502A6
3770A601A81487DA27B0862BFA8171087DB888363D188F271CC00D86FF0DBC06
96E06FF72ADE96187D86E71D8D539C84B3BFB215E47107A174547A5F859716B3
C0346DA00260FD672291CFAAFC62CD343FB10F8CD1F574B5D1309A76532757CB
AE36E7DAAA91128036C0826451F3356E8220E20023944E7C29EF501DA677E7E0
17DBD3C9AB7FC6CC4B0BD7DBB04512DE8BEE80EDF7F6C570AB6E45AA50189F5C
D00E63B1DBC5AFA2C6E0BDA19EC87C6435762416A7287BD46E1185C6A93B55EF
5D9C8F755FC03B9130CD76BC491491653655E7DCA9FB9F5087518338CDE6E350
80DC2BB72283C82E6CE0D15D4B2FF598F08E0C5EF1B18B181BB0BB7E3457539E
2AC5A9B892E9D7F6E805E38C870B6BE8CB5ED8CC398667F07D305CCB70F5B184
C4D174A93AEC6464CE6475743F23026F3226536E742D1F299C8FCB122AD5FCF5
6D07FC0037AD0AF40F973906DB2222BCA793FFEBACD4D6E9B0235877570291E0
6E523759945E7B5C6C0A78F5A4984F5FBC02C8ABE2D5E0A511F604F67D146BDB
4059C3D8F765D29FC2A532ABE6D66DF89621B18E4E7765CD8B68A3B325E529F9
2E6EBA02A1D40458FE3576E8B7D973C61ABDBAB067A38E7333ED270C8ADBB06D
ADB98E65405FFD5113DE5376A21428528782C01CFADC3B77BE799F8FABC59983
C8D45DCEADF30FFC664E2FC7A884860639BC2E1013AE5E61B9BD97679DB18A0E
B914F2676B7DB29EB633D900923E6AE4889B01DBD639E126D0110575CFA938DF
F1D6D22DD80D181FBCDFE67F3BDE245DADD4B2DFA4C7B2113AFFBDE4AD2D5278
A472D2BD9CBF2C8B643D8FE1DCAA03A42D965E8BED649C8A10424095635440AC
15207F488DF9931D174DECF816ABC229F092144789D2ADE01EC0116AD674BE70
8C462BEBBAC97EA3889B690865511AE4BD940BC7296052CE9A5AD6E303B8B102
71D1BC340A874F4892D98110A1A08E69111D9B7A6770053F53C8B24456EA1D22
A40FE3BBD679C2D6A14D227FC258D3D9442EE5F92014E4D280A8C697F6058139
F6C4F7D08D00F986223B43E5054876BA8FE6216264C436215838597395D36E47
9D9C9C33F750FAF28548691BE2341C28D90275FBD1673E4FC32C4430E6765D69
08D8034E3C19B0303157409B88261B8EC6799D757C3A1C9A301D6EB8ACDF5462
C817B1024DA950DA50E2464D0424E25E4E1127CCEE38CBA925473F1DC05EBD7E
564B532735CABD276A3D1BBF8FBDC3AA97C8C91FE129433BB01C4DF3215D72CF
30C73403442CBDC5E843182A185811BA0B634D6D38BE6B688B80E55A5745BE17
837074C53D98F2AFB42E0B4943697420E9FCB5F5D4F19E11191963AC74D7CFAE
759E6F37A29A52F692C88A3915415FA162B5F9708A06C383539C4A18233F84A0
7BC769172EE31787D7B3937CEAF716AB3DACC0EA9B9CFF99B37229F123622A38
6CA660AE3174A5A872EADBFF6A5A454288A28A10B5BC865BDA511E6627B8A9E0
2A69A38027E143E6228B370FCE93975A2EFCC4EF196944EE5190C4EC29AA3F47
9754CBB5DB96E1C7EEFB91AB17C89E96020E4E8CE989B26D3347FC1E0EBBAC4B
32AA2A36B7B6289001C3DF83751E80E442E96D34FFF5CF49F3E712EC33B12094
15A3A160A1BAC635DC00DD7545A854B1AA38524E716444DAFB4F67DB81AC3DD4
17617C9CCEAD5875E3F8B1415EBAF08528F05A64DA9C0F2AE47F873D0DDA8A56
83A0F5EA18EB525EC14A7B3E689D7D2948AE4A641F8B3E9542CA740531D7AC96
B54E0FE878FCCED3768DE6582517A58B970D695EE1C2B5239B898729B3BCCEB9
D078C03112C0C2ECF0859CCD59C73A3D5E90246F512BDA7AEED5D15E31F858A1
06CC6BD244F4E90A39291AB18C148F3066E5F1456F77844FC274380A7922FADB
7DF7DE50E3BD89A7D7D5F2FC84BEBAE9543804F10112647D3C61167D010560BD
8548D212FB7B9168AAF7810BE1571E5EF2A5A2F95E8B9E0436EF127463F19636
04E92E80F3468E72C5D884EDAB7911F675E35300A60353090CD0CEB512DCD13C
3AB5264CC67F67BFAE60FED2D2480E02F091A6549ECAC079664A697708931EF6
29E66145385F3107555C460963215A43332AB0CF9293612C9A68BB1431D53353
59D0E2EBA8A70076688335EC6EC9E847FE8DA80FC1A785F9EA323DD47F90E8E1
7A4194FDC39D99F0548D3BD0E095AEEEDB6EEF269B83F1B0F738C427C82F7B4B
C6BC6138EF74D39074AE1E2E285603218D85A4DD1EE3F7E6ED71FA7FD1B648A1
7F67FB457F6899DC3C74BD89C573F093844EF6D58204821D205EEA11655BC846
9CC69DAA23CFA8186564B121F77FE64F0A5C052E245CC5136BE18001E651C750
07120A6E040836074CFF7BCFC8872987B521DAE4E31BE1638EFDA187892CAE47
40AFF74438880F4F7FB476C0775D4355BEEB527E9032D854B590A34485F5DB21
A4B669F37BADECFF73ECE3340B5BAB1065475AACE0110B2AB30B1F78AA0ABB5B
F3525C2E8E407F4F805DCB09D6C697C6560533A06E9B569A2E651BC54498ED28
5378AC4939BF0CF993B405157A5062BA9E35671367BC9EE010F1D9E418983E3B
BD6164143894E8530EDC774B5CF4BB6AE3FEC09254BCDE521706C6BDB1EE4F11
A75F05A522E6BE17CF249B106F25D497801FD568F74109B19AB76DB5ED2A3DAB
E0711DC54FFEFFADF2DCC7F5B787CC8E55C4459DBDFFE6B5204C4FA8B77BFC32
D37FAA7750FBD61B6E58A30DC1CA853199EBE5114DD8CD3F454BF5E9BABC62A6
2B67C93FC03098BE99B307ABE23962008212CB17F60D000EA219997789ABF1A3
780334776D4590B8AAF9F7F3576AAAC2392A2F698DC36A265F773BC92A6233A0
BBC53C0888573314CF5AD4C6C582871BA951749409E3A4BD29A3D9BDCE5220A5
6FC236186821C455DB0B57054B980FD18109E7DFF321682D734565717DE44480
96B6026DF388D9C6F2304F10E84DDC25411FFF6D72DA97345D31898FC0F9AC6C
68DFB6166AD3957BF82CD5C1EC6D2A3EAF60B4222B484BDBD9115551265ACA2D
2EB2E7D304AC2390CC10A4E1CEE9AED9F9863220308E4A75FBDE69108816B4A9
63E03911A93F312CC3621C8C9CBCC9F55F37A0C9CD1F04423FDC1A7BB2C5A4F9
1D34CEEFC0B99A56F67AA753BB8799E0AADE3D9818E29E52BA205CD632E15860
F76BE926DE3F8FFB1214C6ABF8EFA4989D00A055DFC4783E69BBFCBFC314EF1A
4E9EE7E5315888E3A60D2CB4D645367AC8AF993C36E3295D526AEC7645FA8797
74FE153B6D3E0190736D37972D974E3265EA07D4500403580E32A7E2912ECD6C
0B2FDB5F05EED7881772B5672CC45CEC9F16AD3101D3788D9A6D0D058D40D98E
D7D73E1DF07EF2E12C980248032D499EDBDA96196675B5EF8C9EBC8C0772F9C1
D13C31A278B8EA984171CB042C399EA7627E41329777FBD926F05185BC7494D5
203172D40F286FC401CE1358AA8F073520C436AA41F233388985E26B230A29DA
778C294937B0A0951397AE0CBE7795F924E50F6F10793403E3E7BB55E9CDAA9A
55E355E6847DB33304E39C53694BA4AC7B04050C2FDC7124C2C28E6E823E0E6C
D22111CC20F7FB2BC81CA9B74ACE0081D025C5F5FF04D662BC0A9E171A24F772
2236C7D7ADD5D2B1FA4CB77A77B7F384E4AD74FA28EC17B5B84E76BD2E05D002
4433C5A8823B5A3EE31A0D8D4E65B7C679E37DAEB5EF21F1E6CF57BD196CF93B
DC0D3FEF3A054706BB133473176206B9AF7B37A15FF1CE6658CB9036ED960057
DB2109F2B4D1C6A6A56F98F1BBC26B6921B579B8832E18AD272A04AEFA072C2E
625BAA1B99A133D2D7A136E6F0D75D17DB0C6717B48BA177D1730A6DC420991D
CE090EB1D7DA8535C17CF25116EF93D94FE20FBE0242EFE120153BC55E76D66F
CA377FEF55E44346F6E1391AB07B4C85F9719D0530B62E2925F0BBA4A045C042
D3E5EEDB5EB1F83851388D5B727126DB95297B05AAAC9A93776AC5C425D69182
8A13BF03DB9F02BBA5667B7AD3E2B93AFAF3FE81B208AA4E447D970CDE4B9512
246434B8101922E8D611977175DA6BACE887045C06B1365A4A32CAFFED18B344
4FA89AF4F81A1C7C561F2D49DACA205C318AF770EFC690CE0F10E55737198035
FEFC63A81F237A24A5082BFEB038973FBEDCA6FDD8C7CCF21669DBF361F44220
6BF04259186AC38B89E03FF23FEE8D66F8011D1B1E98E6003DFF0125F0E160DD
E30305DD752EFFEBC8D61D76C5CDBFE19F409937A67A9494880E7A0769790117
2F2CB53B74D9C2342482F391333FD9D523DFABB8F421ED46F435386A12B99A39
A9973577789FDAFC843F9BC783DB08BD9ECB344F83D9E38CBE68CBD5B91C6DD1
ED957CF633BB7DAFC4E6E262B18E01D3BC1EE88A173A454FF5924600F2925085
303D96D4D788CF6DC7A8A077AEA9BEF348C25E2C74B4E53E3350C77328B537E7
8C2365626BB738669FA92989150C495B0D941B94390F80796157E7A60FE8610C
E6132E419A854BA277E933B48E87EA2D2E3342283A534966E9DFFCDC8E98931F
740F61EA3537EAB075C654018074F7C629371A9897E3C87E987D399C9C68FCF2
9C120565AE7AFC3EA4961384D4A0E57219191ECADFFD6606A5C8C3F97AC5C129
87DABE6C311432263B2E793CBBD802BE30BCF50760F04BCB378BCE68EE24B610
AAC05BBFF74F9F71F5004BC0916D98E2076D1642EF081C006D3AC836089C2D36
86140BC106C07CA98D601BAF434A68C5C9AE223C0AE5223B6F1F80A7F6069C07
06DB46FB041C0FC2AD6D29E8FA863443B4B4A480D95EB972F7E713C7D6FE7E6E
3B577A1E34388EAFFEF3822F634318B1A739D1F7A5E4FF565671CFAEAC38F4D9
3C2091BBD0C4FBFC33039D8CC4EBB823DD963999C711318E83004E4E76734471
5DE9D2E31715FA68C1B89EBE8AB36265B7631C770B02803CEFD8B2DF115250D1
A77B4DEC683B1BB685EEAF9EC34B923C70CA19273D1F77030CC3BF3FA810CDA9
626526CD902158158073FD5C727401E759A6C6892098DEA569DD19B813099682
D0D9E7724D78D83620A7B9A3B2E7F593B53BC5091392BAEB419FFA9837BAC1F3
3C070530D3B08EDE2D0AE70D4F002C75ABD706FF62A7682AF6E51B21C9100AA1
4C196178631828C37AB4EADD23FDDD3CB6977D73654CB1249ED66DA3B273B56F
9B2C6652CAA96ECCA376FF2966AA5AFDC1D0830A2098200BD26F2B64E32D375D
FAF76446A88272DF65741B9A04231CDAD0AB240DB6C24194D61D1F9B0AE4F40E
C60671EA9F92C9F23AD98A6D8DF1315C5C98A400CD5AF4822DC8144C566B0CE5
F79E6B2F26B614BBA5D4AB391272CABA18A2DD5FD92C7422188C2405B245E66F
B9B28BC026818C51DCDAA0790A31C7FBEBB65C4D2F4E04C95ABEEA51E9A8D5E5
E88E0477050666ACFDED630B0674BE86E133C5914E1DC64C225F5706271FD31C
E55B33F1F5E3E964131E90ACF4CBE1E70572B17F61045056B77E2F5DAC68F45B
8230DBD978273CDA8E5C0593175C2A8BB6067F92D7BF3DB0FDA3BAC9DC01E4AE
BBB68737A5FCD09950C59DE6B88831C2EBEE7B4671CEDA2636292813F4316C1E
C0373E8D619ABEF3E24E3097E9839C7779B3ED173616DCEC3AA2584DA450301F
4AEF343F6CF4CE2C91FEEB87B52E9F1A269CF725EAA3716BEA044413541A697E
E1DDCC899BC9433E23BBB4951C33C48CDA0552059793C0B9C59ECDCD8B1383CA
14E86798E5595562FA76AA1D6B940B85D956EEE44902981628D777819CC32E81
AE69F92920C59D8163FBB797930EC02D43132207E337D319CDBFC7868D45136F
4548AB1EBE71AC6C4D47A6C2C8DE5A2BB958E45E9703BC1823FDD7E91F99EFD5
93AB1BCB6F4BBE55303DB525F42D293B8246BF9AED4B4BFB5323D4037087324B
EDF4248582F10AECDB26D7F6D25B576A7DF7D83B684F46C30AD13E17362583C4
5AAF7A7B182AFFD0A9475E603CA5107F92E98091D34CC1755CDE71B9703FA904
EBB362065536A7FA71E5C88E5DBF45A5439403C16B342DC4A77F40A68DF9A9CA
D5CAEA5A57B90DEC2E26534D9FC1C3A49EEFF019DACEBAAF0A9F7603CBD06C3D
CB633A2FFA2CC637A8704D11FBCC4A29392DA5158D3422702558F75B8933276A
C2725744B55103BD50A6F720FC5480B0877D863A45B50CB6A5C328889E112FDF
12373946784D58C8D4699D3E4B8CE4C0BE1EBFE301F382CBAAC00BF4BC35B8CD
BC8B5FD704D426D56A09AAC345A015E9E2C77A19D0BDD09D21A80E8439CF761E
4641CC7305D2C1F4F3E3819E8D3F20870038B6EAE91FBC402A21338CB9658ACC
40AD216A3D6B530BC5CA0A68019A7E1BB02A611EBEEA1353E499F908D5F70658
B0C50C0A6444572882D3FDC5469A8B133D59126D2B4A50DB11EEDC49EC189BBC
B8745F257F41AFF7729B4A700E0B6A0E5979EE62314975797F44E3DED2FC5BE9
00AB69C076B1446217331F30A00365F9051C27B851119CF5E64A4AF1E8133696
E309E0B5CA8D26D1732D92D9C82EC6BF7232897CF9F3047C65ECE04FF4B1BA2D
3F540BFEEF398B952733E7F20BFC7E73342A07E0D2947353648C62BC3F4BE3BE
2B28D111DD3E533A8C7207D0E9A63320B5DE68112E169ECF02680508BE436586
8134C0BBC519121D4C94643DF489E0CF5D28DFFFABB008F62688B71AA7088260
0EDC399226B94F7D7C6CEC388ED60248FF95666636803202F3B73110E5BC25B8
8BAE75A7079FC9C5D7352143A7B58B8302A84B0DA8A5A80ED403EF493BB111DF
D214A0DB18A67C22B6ED0A560D971BA62955901A23ABDD3AFAA00096B24700F4
DF7569AFD968D6BCF863F89398F75394686A06DEA7797185DED67A505470C0DB
5464E51870878DFEF3279DA103B7E01EE6CCB193B5243F814654A94F48B08F59
261601DC40C1B63AFAE9595B3E359DE5EC95A9D2F63AD105AB62303C8CB5D22D
ADED54C201007D06D853315D177A9F279302B1749C4DFDD3A1C738100FCC6DC0
40070B934883CC2248F27D91BE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 69 /E put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238CB8CE62
255BAF0145692EE3B52643A0DE3E667AD03EEF6C753F57E34AECAB0CFEC7B07A
150D7151E57BB3A026D50C7A88DF5F480147D87DFEFE463F76122EED3A0353A7
E13321F7E480062A971611704D93A866C29AE2DEE5EA872F5F35A2686E37695C
ECBC6F6F2CE5F46491EE865739B0D8FEA41E1070870F50E2EEC5F10542A071E1
A861CC30A769DAA4DDF8CC0CCBACF1FAF00FAF91D446CE54AC20A4B455D06578
4E93EF4D2B88C75F569346AC2B878782D12F909513434C6DF848316629CA47FF
9B07038337966F12D38AAF6ED045BF1102FB39275FF7D8D7983121C2134E34FE
F1618EDF8B9BB56654411A74A23840473DFBA36E04D180892D9E1AD5D37BACDB
CEE97B97156C9B60321F42CEB4203F46DD2D9DAF8F90CF4F43A855888DF002F8
825A21D0D4869F02FA1C99FEE1A786CE64B33ECCA62C7535209C546D9201261A
A71B05F2E629B76DFB0EAE94203BF88AFA8E328CF74D77049949C2CBDD9B71DD
F800A4D407601BB632B33F1E4AA97827F837F97419F753FF9C5850EE37E59A4A
3B90EE6AD37F3D078B6D4120137695A8BE5DEC8383E556D1067F2C6D1A2CA6C8
4ACED9E02D9E46CB2FE2A6C3F956DD96560A04D6A74092A710A9A82AF7E4210E
EE6AC5E5F8D27EE4E0FF266F35E74C0043F6C8C98511EC1E2A09B130BCFF5A90
55C76EF4ED2A397E30973F13C9C94E3E83A75451B152FD3D6926FC9A607428F7
1FD761E209A9DA1A144B6457B085F2B9EC116092166C90766F3475C377D3C5C7
267BEFE151C52A60427176D702F257FAF929178B7AACAE1D371228606B58787E
BCCA96D797EF45C542582B6F56F890EC5EE8DD9D075383DC1F9136BEFBB6F17E
8DE96E921502FB19F0C21F0A4BE48F86B39BA9AAE341296170B648CC5C9EC028
8EF5BBB0507D12F94D4695BDEC556DF7A96D1319C3784A5EBE427F4C91C807F1
A3B23B0DD937C0CBCED5F1639C9F70A7713F7B08F91118993DE5FE47A8C1CA0C
CDFA262B10E301D12B0BD8D72E734FEAB93AE8DD633FFBF0DC90CF308FEABD69
47A94D3302553EB9B2D09470AA5C38E0D171AC1A9679529C433383CA46EE9C73
B2F8CB85EB85B1FE1D7C558D596C7D0097FA31399A7AA052A6E26D52BEC23C21
EC0C0FDE2375719E962E06F1E8F2B50A51B1A4E64F58A1E994724C177116A651
5BB664F3DBA4E2E024F6022CAF15C4D2B23690ABE819E30A0A3C2A83A328B249
65F9D145CCA67E55814E3B2EC0EC3A8E4EE3228414FE9F13E4F119193F66CDCA
37FDAE1C496B5D0E7C1D53E0B769053BED7A998EAA01B575B37DD1D9B0D453E3
A73EE7A34FEFA566F5DB9EAAFD8FA77AD87AA1C89AA1A25A963AE3373031C514
039AD50BC4AD26E5F020125E2F916C89A8C4D453945F999AB608A7E1D372BA1B
B01BE92CDDBADAFBD827E6481D67434810D24D66BFF3E35B7E05F600FD03CC51
AAE041869934D53FED32E0B4F0AA49A630D3375BD9278FF3BF7828275184B22F
8187EA54B884A074C4C44410E53DCFAB648561C8DAC934979A4E19D10790AB99
DC6A5D903B6D5C7BC22B4E9C8207965CF783EFCDA8083E5AEDCF5769F2557453
C4FC03796D43C4276692D1D03ACD2FADCF17B68CADFFA8554D2A0D48865F8BC2
272D6305E14F593E7D067E26DAE85E5983EDCC54F4104FD3280C1870751A3CB0
0F31107967746D5BBA38119A69349EE4C26BB19A947527129175418D032D7BD9
72E9BD165976539DB46C17F1DB0CC263444DB54C89CB0B108B6DB4F603C20F13
F28157D31056B9B3D901F72B2BC3CFD181277D37E74B04D84185661797D1A679
183E4B2C14375C8DA0F39FC77A46FBA5A77D6B37B736A97D54E9EB5D292708C1
C6F65A1C3F6ED69CDF11CD51A2F88FE390CD03EFC463478E134BB12F5E35937A
0B37B5F1BC381AE35499EA5A9CBA58CCAED97D51EECA6EA4ACCCEAFD45E534FE
CF04734C1CA2FEFCE2CFC4ED711F973F0DE9EB1664E649F51A9B823291714D7F
015DDD530C884868B786877422F1177F48E66AA5C67CDE42FAFC100A14267ADE
94C7773021D0F931DE8E2D58E88CE48EBB539283B329780DEC775C471D2C5646
0C44B12F313276251C685A39A863C7DCCA5C9F6BC48A4FB1BC78821EA6472B99
4806D0A1C8135F189B68AF8AF18D14CE9A65283CD9698B571A023DF0024C81B2
AE0423DE309A368190DD25B13FA1B24BD00B001DB1A16F470239A54A704F192F
53949C76343B2561A4D010A3952F8ECD71EA76670B238E78A96DA7DF3323C6E7
BB65CF8A58DE88FC00C0B0B311BC285C65CCC948E06B72248FE3C610A26664FA
20D07AEF6DC4C3D25B0E6BA61F704CAA3E2F8B81F0552F82A6C3CF2AE11EB559
E7E37320115C32897C75955F41BA64263EFC42C31D6227114B8AB4C75F95919A
2D09AEAB251BA1549D01458CC334C7B8743B9CC54ECD71EB313F0F933722C200
951AD6F60C2D6475E3377C86A8F19CA5D52385DE69D025D27EA1208508BFAA2E
245EA67B0D41A42E0B847B9DE69BB20498D959032AF879CB338917FC96016C51
090DFA64730B740E60E15170D0E0BAA8DE114097609E4850788B0B46E26A16D2
B84F2EEA849803EC5C4E36C41EE1C42B5BE29E40811E7CE4C654C9E122065B19
36194F2D20F9C293AB059F0E850E6232A5E16803FD36482645367F7E7A12A9CA
A403859680902B9B5A88CCFD133C91C1AC68CB0C32C147716CA5CAC05D4506AB
F94C6914A674BE90689CEA94986A66BD545CCECC7578C884530C89602D59DB64
1ED9F940FE404ACFCA0D01A294276F86BA1443F753A7BC8B7A60E4C364717B3D
9546AE17060A9D5F0995617A83B91D5CF45D017B3EEF3572329E84664F35962D
99CFCC833566425325B661901216629DF3FBB209B52475C88F9D1D9E74C406F6
AFF152FA6991651B82C1501C46CB5B5152998DBDB9000E06F1AE3A7CB4C9E8E6
04A3D6AAC72A99F351D82404A85C076D9C0743773CC7FF21FF1BF042D34D4848
624EC7BC875FC38046C802A7BABAC76B9E0D040BF3AC4D93D23EA8361798F938
2CEBBB1317F4DFDA6746956CA0AB0475DA734C93626AF9E349E58D3E1516A62F
3C15BA89573348F3A4BD93AE67FC424C421157D9A399C58E9CB8EAE9A2D15A26
CFB97291C39A2A92F38EBCC0B48C2D9B7EDA562A1322AF8BD83FB24FAD9A9260
DD5D895A08AA77BDFC488C029CA884F1221807C0D8E50D53113BDFE425C36DE5
EBD63AE6D0296B117C63E99A6AFA7CFA134B70D7C85AD424A6BCE887DFE06BC8
D83AF487D51D7A9ED3163520C7C9BECE5FD6768FB8D452C15A190F503CAF6BF3
17165381EFD16CAFD6B0DA9B2811CC78FB52B018050C77A8ECC640B114BEA8D0
775FC1801FD007AC7D759CE74DA58391FEE4F64D6429BCF847F8C9FD0EC28D4C
130D6C8C7FCAD36C4D14A14F7862EA28649ADC6A8BC0DD8B6A3FC5B3F6722346
F8756D851FB4271BA0DB3396A78928C44D1320F82869FECBC2665A0BD2363F22
C3AC31DA870F7C19478283DCC49B297B3EFAC075C16044B0E0A9C153D314F2C8
CBA4C64B77E8C96EDFA9D4DFFE20E2E1543F00FC731383F91802C8272DF820EE
4E790A79D8AD6723FA734B86B5B25FEB436E15D3A89065CC73D8445483A83164
7D77BCBF61A8B92F5AE1ADA3811F64116FCC5BF5651AE91520C7D850903A9C8F
E4A27942068CF96773FB34216BF0859A92AF91E6AA5C626A01B96788D10160E9
5D3CD906E2321895C12E286771BE76E39182ABD78AC44F3A9C7C7C3B5905EFA9
C3EB03473E4E0A62C309619082D0CA802190A2C2B2A7260F91CC6F24BF584113
0E68193AD90772AB438A91E13E923689F96FA3FA860AF2E63EC854D664622FB7
195B1A19DF711649B0D6CC53116F6DB016F289D6D95D8646576AC31D36F16336
EEBE988BE3B954DF6AFD1BC9CE82C556A8342D4D0B0D7D4DA479142869E2322D
F466BCED2994676A136ED7CACFBB9F3549570EF8F72818CA212C6595D9713911
94471AF789A1933C04396EF6D611D246EFBB0816878CAD4B8487F366E401E1C6
BE19428DCE545E7642016C6773BF7B26C23C2FB496F71002C4944D9098829D88
5774DD1B4B98C1A230AD495672F0A6B0B427BB2A953B18AA4CAF7039AEDCF436
6E35D218767B5556BDE9C81360A2E4928D8206C44C61176DB643187F4C0975EA
F5F22955D00636810E52402B539843D23382AD7D0D8F84F171FE0E5C22F0B3EE
1D90B03C9F7F7614F04741AE2BC526063213597828C6D37A1A350CB2BD98EED9
658D58453449AF18FAA9C31C58A7A3FEA9749A010F1CC978725E3768E381B56E
3C3EFC6FDBF443D9A69836FB41C5AB4B362A6A4937B82115C57937550CEE44F0
D3C374A64EC2BC54BBCAAA2035532BBD480942B8CEE1735A7333CE22F56FFD14
E63F733A356DCF30D24B9085695B2E99732F94E51BC8CA084887991F3AAE2194
69E349B28C0DB1F7D57DD789F2230A6FA7810840924852AFE7E15611319CF3B6
BFDC90F4D3E9DEDC3DD86D06CD7A29FD2586356B2BCB19687E250009BF604092
65FAD63EE4D8EF5CBAB4909C5F39BE55A46F4DAFA9619BCC228935A042DCF5CC
EDB016E0F3D16A27D6B06FA9B484FBBF28031B8B865218211FD39BC1DDC488A1
BB87169A21EA4C9AA88F585C480624ECC04D86152E01F1E22E595AFC5BAE3076
F799BBC9648870DFC630BC9BCA6578F4677304F9D827364B845680553FC0C38B
4BE84E752796693F66D9DF0BFAEE3D8F4A723C638A20D8C59DE72BDF99F173D2
6A8E12692A6FA4FB53575FF3DE453C36819F5E41AF5424DC72B8297125246A5B
FDF7DDB5DED36BBEEA1CF22AAC3E11BB8F41E57C6BEAE2CAC3EBD8844B04E7F3
3A676EFF6E618D2CA8782A52CDF28580242A6F2FA890A2FC86EB031819C65F4D
DA538ADD3A1AD1A41AA0662D17C6435BE759D8C2EFB2B17D79A8761FEF2F4FD8
33255EB900EAF66255462752AFA9B340C1E715A3AD9F9D51EC1A93670B42B27E
935112973777C4890DDF1F3D6A636235632D452BC8A23D12146E20A8B898BED2
C429FE6445684454F2A5A08B2D5108CE60BDC69C76F3654C50AB59C3B28EAB47
32101B893AB47989C2EB37D022F81AF7D52DA08C0287FBB49950848A427DA168
38210029CD254F52B190E1F0D85F80CA97BEF4B9F0FD8EA65EBE510B826262FE
F0F61421C82734764DAF32FC533072ABEA9B012B6A91FB972714D08B42D6862F
D664B0D6EDC6C7F4FC443B34625BCD4487373AAAF88CB18CFF74FC3864F86344
574F7E682B14C9E66523B6B8CB19CCC1322B193E001DDBAB9CDC7EB7B09E4794
B5532F70CE2889E53EBD82801F5D87E0AAD3A215685A82D471474924D073F12E
A2D06DE67B5975E5AB9D2A1A97454BB5A2343C6C43FCA38162E543B16DB2871D
0EA6A8B6A5BE64F63F775BDACB68A22D50482388803C0227B2DFE9D9DE22018B
12A6B2EC7FF87F31043D5858D94E7E7DF9E996669AD635BAD72170499EAB1C2A
7C51DBBD1B10686A32EE99ECA8745499B0D6D299D555E67E615ECF0158C44D6B
23D4E8FD6F8BD32551B0C7B65A50CE2A3AB99ABB83172EA92ADF4DE2FEDA9927
0E5DB7DDAA824624B4F7AD67E02EE4A03C39BC0A40F3C5103B6579331FD4B1B3
236CBDD55AEE595AAD7AB49A5F3D79F44E3DD81BE257FDDC1026FA70B3A44F7F
6A308FA10C8C644EC54884D3C8F458C990F8DB56E799CC8CFE44FCA25FE02AC5
035984ED782236D3F7F455899914CA751CA295126B36448B6E017EC8C358E7A3
30402E323E82AB0E28D3FB658D1C2A7AFF124A5BD75541590EBCDF029CCFCC9D
0D8524958C61F44239A94589028D493CFFE3ABFCEA9E9C71D8FEFE4A8D2F80A4
C5DC3BAA0A6FB9FD0DA69C7DA549C01C4765822CB0DD659F93EED38DD1D6C4F8
95BD2FAD2E68AFD28A0D334FF7600EC58DC7ACF91D5BD30F82C3C3440CA9CDC1
9731C0F390A4488AAB1A3B15A91BE752CF0AE2F67A53E621EE6B1A4532447F7B
D56CA601511BBB17512ADB606A6DC6CE51819835C3EFA7522EAA85C90F6701D4
0035D90310FC58ABB2A9BF8FBF8D859D91D2FB5C40339AE01B8150B8F2AA4C22
0E6E52A6BE1F06C392A6DCA5C2A3AF7186D2DDF082C05D2B89050C1F6BA5927F
88013667B59376477FFD5B95FFF843A93BB13DB3431CC39A555DED28466DB00E
C8C794B1438B4AEB72DD96932D53084D6EB8C60DB80FD09C8D3C35818DBB966A
E8C91A9546F083A43EB0F46F2EFDB26D007B169D5A0A2979D88568890A92E848
5006830FF85170427E6078B9989E936C03D0CF61B7C65E7348042D6C22BFCAEB
21730FB632427ECDD48F2D070CEA4C7FDC2ABA51B49A8745ACCF622EA0701460
B561C2C1768FE596FA67B1584CE04BF3A066EAF9C725778266CE5AD6C9DABACC
10FF7015FBDE8134A2B148D3F4428B501344B6AC62CB678A823D6753E4DBD9A2
143795D47B2DDBC0F4B040307A6A07A9ABD1B958259EB35F196F5EFC1D068EED
E4D89451CE7607DC819A9DB2EE4E040F1326461500D4BE7CFF619DF7187CBABC
2AB4F9502FA1BBCAFDC74F4FA13A1E68B06870F4F768D4E7F28F56452D154F6D
C3723DDA33E2B72C4AA57C647A6DFCBE5BF825C5B173E5827EE67739063D9AE6
741EF97DDE920F00BEDF08A5B0786FFF31BE0B978156A4728BBC6579DADA3DB1
B0103ADF08AF7351E27C9FE904A7B22E56908576889AC6FF330E1ECC75F74892
9CE97768B1575B91487D77D20E8F7D062FB3FFAE8A357565D4A1F2668BDAC0BE
62BF2F98A946CCBEBD543C1169AEA07E7AB7159EA825307DBAC4C6777CA1C5C3
2CC0FA305D2F1E6C5448D9F50C33A1B7A5FAD9AD286C10AD314ADC2E331E896B
F9BFEB8D71BEC351A83EA0596FC4B80E5072136CF665CA99944A3BDF85C97BB7
4935875FAEBC969BD4FEB84D1DFA28B0511883637AE8E4BEDD391C35891F20FE
71EB2BF093B49CADCCB1CA81E255B315FDA0BF86E13A9EC1B70C9B08021A2A11
CD412B0A57989661A67BC4BF98357332D7723570BE7886E5A30219B2C3C7FEA8
C03EDD1B72DF9D169B77932B246A35942EF48BB4AA399F8924F1B8A875957B66
B9699E50A7D79DF2D8721F5F010BC2DE7275C8962F2631920F0139E3B4108EAA
BF874B8F744697416F05C22DA41788702F06B6FCE296408D3F27EA1539369CE1
44E6477F03B51667FC7C4AE459E4CD856041C3B9BF2CE4C4EB0D17921017E2A5
04733CDB34A10F2F666E18D7F716D5C0D15A82D3BB593AC507D7394509896B2E
ECC4D61F7C8820A6898D42D7598B94779A2BA0063EEF4043896E541D11CE223C
1AE05DD5D79775CA8BB76483C1BCC67DBE9F1B7CDBDE05B72DC19F7DE78B943F
A55F1BB102151C39F1AB2E0EAFE18120CF658AE5AA984E8E4D1FB4ABF790A11F
3AFFD28B945D7E6F0F3EBE41903DDD5E37E38229F835E104E9C1D05CAA4239DD
621ED72023F49781E70A31590629B9A7B656115B391A6475F8689B5A6035C594
B22609784FA52C06850EE42628EBCF6F68FC831D4B7C483F933072AC40ABFF65
4B854196BA56AC3B1B1CA35821230B5B7F07C52E427B14566A35E22EF998C8D5
D72749C67AC7D5DBCE2B41FB6C667D252E47244497ECA5E95EB9BE33C78F2E7C
C6A4FF2A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSL10
%!PS-AdobeFont-1.0: CMSL10 003.002
%%Title: CMSL10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSL10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSL10 known{/CMSL10 findfont dup/UniqueID known{dup
/UniqueID get 5000798 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSL10 def
/FontBBox {-62 -250 1123 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSL10.) readonly def
/FullName (CMSL10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -9.46 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 71 /G put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 89 /Y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1BA6FC8D4362C3CE32E0D
DCE118A7394CB72B56624142B74A3863C1D054C7CB14F89CBAFF08A4162FC384
7FEDA760DD8E09028C461D7C8C765390E13667DD233EA2E20063634941F668C0
C14657504A30C0C298F341B0EC9D1247E084CC760B7D4F27874744CDC5D76814
25E2367955EA15B0B5CD2C4A0B21F3653FCC70D32D6AC6E28FB470EB246D6ED5
7872201EF784EE43930DC4801FC99043C93D789F5ED9A09946EC104C430B5581
299CB76590919D5538B16837F966CF6B213D6E40238F55B4E0F715DBD2A8B8B8
80A4B633D128EB01BB783569E827F83AF61665C0510C7EA8E6FC89A30B0BC0EB
5A53E5E67EF62D8855F6606E421BD351916549C569C7368AAFB714E22A023584
8B1D6B52FC6F635E44058690002C6BA02CEC21C54CC8875B408A8BB84F445894
5D6B3E4841CA20AF852A660FE9C832F773691DC6F7197FF3DEAEE97418A5ED2F
F2AE65300416227CD3BB03C29003C770CD7D2A7A2E4C1DCA193651C2CDDBF93B
966938788694BFB562AB0010268955FC3555E5984CCAB0A9B7590C77C9BC713E
A29E5BD7193A4E971D1752DDD0F0AA4648E7E87BBCE66A1E836C715C408B07A5
9EB56BEFD4596706CF839BA4CFA90CAD4038C1E006B51913279A2C31FBEE5BD4
A7D74F9103CE6124F5B439CB860987DF44FE17EF88EF1BF62C67060D25696BCD
94ADF08F04E349CEBDF9D3389D870D94CC05E393B3F4362A13A6A672EE5E8F5A
DFE7046AFE3EBAEA58FFEBA4A47BF61F92E2003756DA643CCF2C9DFCCAB62669
E3C2A18D690B64D907F50BCA155A85E47C3A6954C6FF7ACA36D8DFCE777B7929
5F5D5F787B9C247ABF13D6D7B4A8F06BA25CCB342F8A5071325CDA86AD71BA23
8A9695C7D1D50D0AAC267AB7CDBA7AAF46A264B7B081B7E79AD937FEE4969FD5
155A99E652461EFFB4BD010E5885631E2B2497D6B8C43CE77D7D47FE201DD46E
4482FFDCE150A1183C22C004A0AF0E1F42AA6804E038E1DFC8B0A3CE26B52038
44D2E7F759DA5C252489E5525963D68BC27C82247BEB18818C7D4CF0BC5CC97D
8C701034B8DF798DD4CE36C3F8B1FD40B2DA14EA75583852875031AF8C909EE0
04495FDCD04B05A5EFEBA56A8CAC1F57F1B8AB91FB25C81CD51EE69D6E0F52CC
A0E12CF7E3187D67DF71A599FFD895FAA7BF80E2E6B96592BE77AE96905BAF0F
F547355A36C443797DDA7C414AA606CF9153E03450B77D1BA4088D739DF55F07
111B9E11AF37F45B6EDE6D7AC126E05886A57C83886DA87761BE600DEECD1344
8A82BD652BE7ABFE6A0F50ED7C6F4EE12CDFD80CA7A5518692F267C51C3FE76C
567BB8DDBE09A2AF901F79AD02B435287CB8057B3D5EE6655071F67B00438728
C4C3EBD648BAF650993AFE5E2B29074A99ED0FB725D9B8CE8B0292B08A280214
C3AF252BEEAD30C88F72E322FAC3E9D78A1038F5DFC41F7BF1AE3744A0677094
51B77C2D630B67853FE5E975A395C06A4D4DA744040B272C2B88D8B7ED3A2C01
66F503C9DFD3C7DDAC865900D2A4F2CDF517F449851DB1963468D0266D7A3E58
9F6B2A1843E6444274F16A9930302DACD8D2BC4588765099A86BCCD8A31DF0E6
2853114DFF2D19F812F19AE6C2E419D7AC1BC024D1195074FD0C6717BFB389A4
4D5428E7BB2E4F9E9FDEDED7BDCBDD3460805AEA0B5F6460C2FDF19273CE5BA7
5D3AAE0DB94C6AFA8339646191C23B0149E7CBF136FC4C844E025A38935DF256
0A0A6466A45EE8B9B23B6A055856FB084F87C73BA28F1883E3B184CD813C72F9
233B78CA4E125ABD26F29B92CD9DF39D6FDC2A217E2B6B45D9B0A4D536790A5D
BC0903069565A442FA7466414D948AC432C6B75D8D0E1DBB217CA3DC38A52DEF
62E9D5AE9E753956C13819D93148C7683BE4F71B80BC066D8C19FC807FB1C086
B49215DCF56A91A42089F0D063B9981925691F7DDE3237403AC714F5CC3ACA88
DB2F1DD205578C00472FD70C8BA4F752E3923ACF3164D442A6B639902ED060D0
C5777BC20F9A3BDA60FA3BC986C38136FBD2E8F910E32EF36377C9CC187F4AFA
CCEC423DB925B378522B748BDF12D523804CABA83CB5A7ED69FAB9AAB75EE8FC
38D9866E3754C4E2F2B9AEFA804044D878DED0E114EA0E9682FCF38F6628E63D
FE1C1B5615E54FAE8684566EDC4B616F76EEFD6207E0386F06D3BFFA26425F24
303CC7C8A8D7021E7D09B202616988287838C3DBCE3179B4FB5C726E603A47F2
8248CB508F327D1291CF3F08F7C88298DC2D0F778D24304EFCF6E074182BF5B1
8E6551811FD6991971692108E289B61053D6DCBA2925B3903E8916EBD09D97A2
C6D08E89DE4C0CDF7185E1E00DF456B249F0BFC686E04FDAAD2772DC2C39DD53
9C23A41471267F53A87E5C2B8CBCDB66CE0B9844BC506428E6150B48D2FA6363
4FDB2CEDFBAE0B7DBCE4D83E29B2955F8966272CB865EDB360C8A8C19EC62A29
03066483E4083524A1E8D80FE3867BC1AA91753C26ACBE8489AB0E3330206212
93E07ED473DBF457EB8489E66FB4B8ED8A9EA8911CF9308CFE3E6D6F36810EE8
91CCB11BD548617B2C683C354452B9229E7C9E68828BBEC324420DF7C188CCE0
FBB514547553A7E9B38AC265783891F42DA472388569C8E7594F7E8810895A27
06E456902A8D9F65CA808F1FD475D011C4572F8A654BA01D67942226A663D179
95149FFF41A9F55AE84EEB9A6A39C017D7E4FD6EFEEE7FF3CE847CDB064A4954
9DCD273B810E0F259501BA4003A3EC1ABA6E13D24C0B57FF82D6DF077833B6A2
7EA54801BA81DB961C261689C0887FAD83771E55D3D137AFBB21779397E11972
6C6CA922F45AFA5C0526863A5AD8B9C0775CCBA17FFD37A44CED4710884DBC31
5C9D3F5441595B86CF7CA2EEE42AE87896E9E60EBF5F35C2B7FDBF9A9CDAE262
3F48396F0F741E9DDF1D4FEF75E68AFB020D06CC29B3A7B2ED819D1AABC12B91
CA2A65F1AFDDA2F3FB322E0268DBBA024663E49EFF076455338FE31A16B04EC1
797EAB0B49AFFB906A0690A1E8E2F5314773E1CCFFF43E6FB3875AC907F0C5D0
DCB9BCC127014D472463560CA0CB1C2CE614D94177C7A52A5B089316689C8112
CA57E35D716D956DBF9013B1E5B9626456B1433C8C15FA906458F957133B9E19
8D46DC3AC015F7602538C2AE3927C6DDBACF38E59220C2F5AF36B68DE9117C51
04CF7DF32B1AF55B87D1D8A5F4BCFEC66F63B32B6548DEDA3AAB06C5310E4757
78AFF947DA22809B360FE535506A554DDDE5A6F2411246653710ECE5CD3185BE
730520A766C47E1ED01890059882BE1432586864E1A86A7F586438C8DD35C00F
021A741ED47E0F16DB6070ED0C50038632CA4AC2975578A8372A080CC0447C79
CEABDF2BCD5E78564247B0F0025F556DA8FB62125227849EACFB724A4AE3EF57
90C07A5B27D2E59425F56BF8AD84C5F5310FEB1BC73D536339FC2E6A5BE2DAFD
97FC835E0D52F680F80ACA37DB498AACF152B9B44626CD89E3302C3EE1623EE0
F998FA78305960AAB9F483F731F5F67A8C963C23DB8E48FB804EF8B86FAFE7F9
4C09641915FA7E3930AC922682313408BC1607C76751CEEAFD660206A39CF394
40ABE2A313AB7D5FD6444E219DC5C26734D322BA268D330AC17959A390D6C8E7
3A155095BDD66516DAD5D65519A7FB871ECDA77061EFB21F359158B4470EF79B
362C35C06B85C9A9505C8361939C6AC013F2CFE8EEF46FD8CB4452AAB3EF1FA7
DC066557BADC2ADDDF7DDC2A0E1DD4A357E27A2073427EACF9B9035DA5272136
7DF37E26D96ED4B2ACD60596E039BCB15E259C72FEB3344E3EEE3D4F17DF4233
04C1416BCADE80BD483DD8C9AF979E1C7D50C4CF015870703F88B92C4FE46AB8
DE6717B55C460C805B391B84333097E116F4A51F631FAFAB34CFC925BEE8B72B
C9FD5F5A79D8F2295FBFAE649DC6AB47794AC7D73431FFE5BE992F2B5AC67049
B5208251C0E442385A9FACF25E3A98D7F5D4C2A1ABDC600AABE84769CA83350F
9B87F71CEAD3600E02FF9AC03C1B5C21C84F911511A0CF0111BAC7605EE31229
3C526A79D943D92E1CC3C38ABE82D560CFD4172F318030852A5FCC0534B8B3FE
D7365987C8B48A072907B26CDC2108130A33233E8E0BB5FDF14FB55098A10EA2
B51AD9EFB119F82B08D256D396D3263FBD9DBF172D43A90ACD1A31F3E89E8571
74BE98B9560E2CD661A2F93C69FEA3FF26B00772AE2C2C24B98D3D122EA2AA8A
44652CCDF4EF4F01CA7D62A976E23E8A86291F43BFAF38FD9C325E70F9C36CB5
A181DAD30156E98339E6A0498D3420B7BB3B4E651A9090D4A17604AE386273A8
3D4AE8CC18345E6E19DF06BA848F203F74B161D6A8882991CBA7385F308696A1
BEEB0130D938A764B98A2001A38489B1334025EA848CA44A116D64926D460D64
01159E77EA7ED9ECE7BA77635BE564A4ED89315BDFF54ACE6AA1A26591D13CD4
6D6425CA7933769B842192858D10998509396829263290A3A7CFEBBDA3EE6CDD
DF1E492AECDFF7941B53573F01F623CA0A5ECC9D05A3D0954F7AE8CE94AC3B2A
CD4E27519B2E16F033EB732AA024BBAF74626DB55DC74B1FDDB07FAE98B4AC5C
683CFD8744F361838D343B657EBF52DEEE7AEA7565C5BEEFE455DDDBC4DCCA7D
87D6D769C5ECCF14118A14A85A86865777C8E28F953160D5E82844AE54D541DF
550D5F1519E183E0C42BE88F0458CE8087F2CD4B1B49A8E9E3D127C4A4CB74A6
2E73BF4CC317781D03FF04BC36AC0E4AF99E2ACAD20F6F8029DE8A035DAB40DB
17D237850BCDD05931FF4B0FE2D0B79EC5A88FE0236271CCB075BD194AA25AFB
3FB93A5206F61A14602E4EB6F1C31C654527CE0C02D04314DF9AFD710D0EBB9E
F8721B97F5FB18E27507E1F800B5509A58A1A8296C72B7B73F99B6CFE42E9C2F
B63B3555475E562672645CD374BCDE937A9B05A157FB3E74C8297507253E957B
1A9DC421946734CEFA3D5EE357DAC7E9DE17A5BDDEF6B2D2A740BC58128FC514
61154664412BA1C05209EC992A77B7CA45AB7C0EEBF590A5B5652866008CDEF7
124A3003AE6A7CF9DF3C72750CBD281358CD2FF25B162B78CBB971DB3477F8D2
ECA3EE9CBC90323B2C236E375337EA0848CD7CB5781A2B0A42DE7E4D99DB2746
0B26796CEE129D23C76794B7CE21C13C7D4A998B752C8CF43A4821B736EBE246
D2A2BD7BA3351FBCD1B0A501EC1EAABE60D06DA2FE39BE1F0AD629769FDDC933
F9D02F9686EC8C2D7455C26AF4DD3F6860B2289E3A30E1C254AD17D731CB73B2
BF4DFE90CAEECE3ED0CD3FB4C8F4C7BE1C056AB4E9B95781A8968E3CC1010003
75DFBC4AB9F6B27C5A9AD88D94441A8ADF09EB275E5F0E5E6F3BFEA0FA8C308A
8593ABA0645ECA8FDC3F0E264B35D4B0DDB86B93CD8A047FC409E18196B501C3
B003622999C47BAC04FD1ABD8AD359C977766E9643EF3BD6385306B08EE3E13E
7DA5A06AE33D17A3D574C6390DB6E9429754B210F0C349C359559C7EAA2350BD
F61D4D8A92B1AF697BC620FA0351E67E0D9F41A95A47EE0BF210C2C48691901F
F905F65693DCB85BE412F097480F6A7266AE0A928729DA0F691CBFFF3B276EA7
322BCD2206D96E3DAFDFB992CA8F2955F0E8B882729DFF840569D12E4DA1775E
523AA734552AAB6F2F16B89B39F1A3FF0E07EA08D13E612F201716C67F327017
6C041760DA30374434808273062C1FFA2C47B3FB578807BC26537F542040FF77
66C995EF3E8B08B09FCD3EE89C30F157158A739606D2CEAA26694A4F1CEA6633
B54933141CB85C60AB262E2D4E824A3B85C2BEF810DD774F296AB37D0BAE7182
5648CD18556ACB124246A75474B232D712C2358908B5D9A76F82C626BFDE01A1
093B8FA6AA0B32F2CDEF737B28BC0448FF816DDB5812131DA0DD5979D77C3838
B978CC3F6778A4BFCE9A7087EFB19749285AE4C92B99A6649DA349A2E0889D72
6D4FC664522F06C8C4D86D30BA43ED4E42211217D01636A4E17E2A132D26F394
EC34EA12D84594AED9C6CDBBC0908860F39B240FA7D7B3003DB10322498691CF
A294C0FC7ACC0BAD1EED3E9D60AAE3F7429695892D1A21CEBF062C6129B33966
8B2EF6E932F9891DE6028B81C5E9B23278D35B7F0D83989BCBA25E20E9D503DE
144DC485F09A4EFA1268AC5E4B551C5B2F1D51E9B9B9C0FEE585204F869D0BE0
7287D7570A12940A47C1F51AC6134F03B415C30E147C49F89228855D093EE55F
172711F37776E97A99CC4B36E2F10713E36FB279FD3FA5A0EB9F3938F42E2BB9
254EB8F0C0F30391735019E02BFDA21D9813C6A22279B898EAF01AA892B14DC6
5912B9275167AB46EBC420836CC1A5F38A4EB47C039A7BCA62BC3FCE4199FC71
011DD6E5FFA0F3D7F04AC02AF91B9249B9F993AE346572329DA852115BEF8460
B94690E790003586F473F37EAB5AC2922F5F663EE2C3C0C336A8DB71650631AC
0A923A389AC911CB215EC2EC7D50CF8AEFD59EBFFA53A9F1FFB7E6215F17093E
3975F186FE23BB5FA5474C11408FABD223E1E6F62035B5A5C1AEFD8899F00FFB
E729C2D5FD551E80716CEA4E8281660286A802AAE8D5834F37F2EAC46297E57E
993B09251DD7789D3467417E393B7DEABD06676B96241B0E43ED1A1A9FC3B12E
0D34B2B0792B79AA648FE9450C3B209FB6D7D91F50C52A5DAB0BC81A8B698BD9
18946EFF691912D7348D48FE68CD876FC6F71F81165D0C3272DA1A992308D9E0
ED6D0A4DAD679AF495F62B78D462B463BD4A40931172290C615B3B3B6B47E45F
CEBB85E0A6AB6832067CA6D403C239530D07F199788AA4DD52553836851C5228
1072406F6D7323A334E7A7FCA588897C4FBA6D4F7DEB65525EFB74E539C988C3
A685A98752F7198E77E456A545F0D23A1BEF81EF58B02D289CF980A3F17BEC8A
6F83DD90C4A917EB0E5E2B444A608E2E9D2FF80620E16AC1D7775C0A10C1299B
BEE0E1AB24C50647E5CA1DA65CFF3B2C295F0644CA7826E1DC6FADEA93D66A20
DE852F20AD224D28DB900519EB1569837139C833F24B799F7EBE3FDC14235323
1D0BCD4991C861F38DF413A5A5588B73AEC3BBFDB885CE17BB3E97B4E6A79761
93EC8418C2BC4725CD61B5E30C07352F647C3FD50083878C13CFAC241DDCB082
E53703D182068727F9EB6FACEC25F6D901D7309ED7370867E34E267519E22D62
4FC7093448BD0D6B1C43D318A3E14C92032325C132AE0FF7ED707E1FA4A955FB
F5224BE0045CB14ECC321D0F333FE24EEFCC504F7C756451D7693C3E6CA87526
4912E1B6DB935BDE76FBFAFCA4ED473F1D2618812CFF25A6859C626A216603C1
361BE3E071FCFEC2D4BF2FEBDE07DBD56A1BFF8303901168FA06488BA6B76F36
95B0A90D7724E9ADB567C2ADC65CF3482CF47FD1D16F70AA19A97D0F9EFC611C
AEA5E1ACCDA7FB2DF05E9480936281484BC329F0B771775E73F7FD72FE3F45F0
50ADBD03932B38F37A8F0A66B2F739EA3AC8811C8F514E68C5643E4AFF485C81
88475A523D7FCCA5C8809BD49846C77795A38DC6406082000236A4D2628B5932
AB7916D44EC2210CB941B143FB218EDE899E4C47E0081BD91A7BAA1D80F1562B
A19D442C49D1295FE662395CA9143CB136751300AB9F9341255A9BA1323DDE0B
DB92E2D787DB0F57D7600215E8FC23ED8E1F0D3764780499D425D7824DE64B3F
988AB0C9ED06E600942526F12590D8A239B8AC70E319262AF6A41B2D45B2C200
5DDD22E105A1F4AE4D2529C9B9A1CFBA75207C66D0B692FE7C9CEED9A54EE660
7CA1534C4D5B05FC33F83790ECFD7641DF3FB94289E2A1F6E611ADF045E0AF3C
46E2F650CC36E969855BFA34B66B0C13481151129AA93F8003F666C963A5086C
8F7DA89ED6D2616BEC5F71C3D5C65C821419AF3C96D8B886441B1B129C103CE9
71961454C9E8EEAB50A684882F5AFA6776BEB4765C6ED70B686F135C483E6923
656E924A1A3AE8B1C8F2534E57EF4B62EB5F60AD32CE002FE7F15CBA8F8D641E
848C586A3C6CCF19C49E038F56DB0698B5AD852CBD82C7852D6DB691F71A1B3D
33AE7ACAA789088D8AA0AC9639BAFD8478636D028610FB45A3F87A84A0258806
35EFCC18C665943291DF8304FAB48700A001189C575427FA5DF1FA6A29CE6187
352649F116473EFF3FDD88DAD052FA85E99298349AF85AAE480898C93005277B
C09DC903C36F7FEDE72ECB3FC3099AC4F71592126BF472E8900F8554F359B4AE
356D1DB317DDFAE6424161905B682AA31744DE6A440811B278DD1D33787E6028
69E764EF6B71B09BD27F30C58BB0A05BFA110EAC183BC2022AFE7DF8F7FAF83F
E8DF0EF373C74592FA02C83493C1843B4585E3E511D1EC813A641D23E8AD0476
07C708D3347920F1AA1B720487E684C6E3A2A3ED84E59C3FA1D46AFD2CF8B1BD
3BB47FA32924763E96F2C385B9F9229A5E406E0D75467F00489728B84F1CACE4
FD23ECCEDEE5F066DFB3AFE762DA1D17BF4CB537158CBABFC49D0A04A2E01D16
F04E856309E6E4A5A33CCCBBEAAB3B1E9CA5720767457A9499E562D6988402CD
D676081568BE0411770C637B44EDF1613E368817EB29AF92042A1068A725E2BB
5E30D1DDF7476CF385293C928B3ABCD537664125B8434A960C2E633C8CE01BB4
79F1072866122CE86D15E6D7C8B3746BD7DE7691EF07A36C18F58304026A636B
DA565DD8DFB60656BF840581648384241AC9504CCC8BB9B7093CF9B91E4DE528
5A944A0754BE592FBF14ADDC2C5D92327D28CB4807A33A51273B1048377F5F66
CE09A3A5BC57509353D068FB435322444536C01C940FEDB58E94D7BA2DA37248
229BFA76DFFA1BA9245D9E2167396CF62625FF9E30CBBB6D3BACF317B132CE86
363BA8788A76793A5FD5B711D0DBFDE9420517A444E4CD35F62B0B64D965007E
1276153325460F5DD3A3275DEDEDC2E8A85DB020CBBB8D53E55F1B8F1AF482D0
944B17EF520E083A83937F29D7B1431DDEFA39FBA8EDAEBC328F502E5E0A9E88
2E5426D8A4155AFD20B7B49F30D68FA6AAE54508FA116FE351170FA6168EF122
C63F4806958F15ED49D607F608A3F94B1FDD05EBBF3E50505551CA75BF7940F5
95C142EE9E8868BB10BC37BC4AD9B33100B69964E54125DC41CD0C2606DF7A70
56D0DE1C04C6745CB1085E210E51869FDD9134F90FFAA7813279EA301B5D705C
CC7D20855A6BEFC921B46B8E5F23251482FB6C66D73FF8D730ED689967283318
0BE684F61C7E5CC429352BCE019304C97A239DFD8824F52E13B265D7C6E50874
066BB322B1B22667E68327199FDEA16F73D0A1A5481C08CC0D39E5DE322E8BC1
2F17EE81C54436A7F319EAF5BC6E54D3E200511580B1FA86A9ED7899D20CC71E
B8DDED80658003989CFEB8D4EB27F2C448BB5A9A4311B34A47B18A4EF30D1BE7
3BBC75177FE9496B50AD9037B35203523D219DFD1AB34ACD32E45DD4C9D1BFEC
6E8F19DF37130AED9E8B0067288EA40E6EF5CC0D829F2C7EB66C6380D5C10D25
86DFD75E0692381700F5429DAF7918E6559F42DCF78F3E28D26F2ADB16645EF6
E8A6577649BE039E5124622E85F6711E181304439747DD57409D23128DBC3A6E
C0DC98A19CBA9A2B675B113224CA336D446C2044A6A0D5D285A4C4741297D91E
AE965421CFEC8AD49DDB3F2C27F5FC98CA648C3B81632E353124C73F6FF00A82
99B0BDF269740177500468692446D4AD8CA6AEA81C299FC94F057724975E8252
A10192B8A43CF5CB1F9138441D0E9997EB90914684E94549BC3E52318217DD58
43E33237279795631C75B9400622019E5A4ADA6A818A99E82CA7640002DD6864
F73BD8A9F924AF57C0FDDE712EACAE732E3946727128307F60B2F8B8BC46C5B1
B067DA7E607081AE0F2377A573E716C3BCE64B3B6C5FBDBCCB10C5F827ABD9FC
FE6B40B948347B02EA45AE93B40665CF10015D669C3289D810F12E9F9078E98E
98F22205A895ECBC4050A26F0B3FD9D3435DA7223A38F5313CF22BC31646BD01
EB11AF2590D4C4A1E9C6E9E9206899F6779A915B346B2361EEA6E7F572BF8FC3
8FEB07E680AC3CBCBE33CF3B9D50D4DA40E1F74D6E73EDED5FE636415935F809
450303520431D7B8C9E897333ECEA3A1D64526D661E6D7707CBAFCEBF5860B7D
15487AAB0AE2FD9FCFCC7A54E9738160581130CB2564131513E57447447FE9AE
FF3E6BF4BAB9002BD002F3E64EC2088AA0139A8450AC5CE118C232851B751DBD
58F3E9783E802AAA96C4B3ADD9881EA56B3255FA4DFF4243196F34F53A7BE5B0
B1367C566260DC14BD2E245E46872A0ABD919021B5BB9CD6B0E119B4396F7C5C
794A42F834E8CEE73866E1E6AC29BFCFE8FC432B07E613C4798B2B4EFF60D9EE
67ECCDE4DFBE1E0E755EF07FC83339FA6C2573A25B561AB26DE13A5454CDB069
530049FEB56FBF36C97499D82C4B0BE90445B144E1BEE33F35358BDB225781DB
2C731FC6CA239A47F132A6C9EF1FB20109886A90D966620B76F8017ACA469EDE
E0C199A8DFD7DABE68A91D6EEF2CB9DD2729B0912A9FC69B8EFBFA92F52D505C
5C79FEF3BE5365C9CF8CFC0AEF2D05C1BB4C61C329362616E35B42501DAFDDFB
5C538668D61EB997668292FE935A39F3A242F653AB2EF7CCC514055CE316469C
E43B74E03FB63987E7C3A64FB77A7A109FE982D4B29DF4C2E4AB28448C0D52C2
C74D094CA540115A4C7E71FF2DC7E25D977DDF11E5D864408B80F1CAA2AC70DA
896EEFC38AEE7270D31376A7945FF5805DE05A5EA95188DA2F44881F90B70335
C631AA2E102CAB4F35CA61CA3A69473791E0913F631111AE4755D96DCA2F8739
2A2C9994F0E3A81EFF2834210C35960411B57E072205B63C3B8AF845F68F0EBF
0FD03AA28188F773CC37347724ED8CD2E1885CD27896F3FFBDA304C38CF06AE2
22F461F7FFA20EB6753462ED234D0D86C1701934636DA08BF7BB1475EC41C9E6
F2AA34F3BC88AE10690F444F16ABEB41487F62CD12AE3ECB798F07DB17D668D4
A944F77E002BA6500887E7B9277D80370D6F45DE561A9A491E39DE79F26CB6DC
81164BA4FA08D428032F5E9BBCC9ACAF3D50D079EA2C1BB8200452C69377B53E
B784F0819D5EF6C3AF5519DBF9793F79530B4ADEC559CEF084B3ED4506EE4C34
63E1806C346C3E43044751F60FB40745A16C2B68498F2B047944EA8CA1EFF95F
820C1495E9B8F42D90434A48E34F81C56697CE2711102BB96A2CDF203A891782
69E57EA2DBE67AF5CAAD57BE0F8A805D0FA8DE3E62FE6DB7310A05C5028CBF57
AD1DC92CEEFB275421719203DE2CEF566CD8E1601F4E0DB2246CCA443734FDCF
8CC19CE9DF8361E771FDCA9BDC786D9353078A44D0504CE343CDFF43F502D68F
E11CA4BA79F004B72DAEFD505A66212413A406AC736656037BB35841FC9F73F2
A3365A3B4E1B5FB8CDD571139007450B811F12FA2679DACE1D26BDFE16957C9E
AC911FC6A9F88A2563DCFC64DEAF776ACC51CA0AB10BBB002A22F8DCAC6ED457
EC930A4F2AA5701574D0FD395FA4FA30A65F241B334FA2C07E48C991F80D71C1
56A65308CF77DA8C981DED9B145BBADAC54B7AEF7A8D23887F8B58B98FF90D1E
D040E5F17A4F9927119C368CC0191FD3EC66FD0DEFCEB26F31F2093480FEF184
F880C447F4B36657308098CAE5532350DA44C752CC84D671813C51AB0E12FD4D
EAC33F0C06F6D6C1FFA7658966D97D1F1362C97AD93D5F3FC6475AEFECF846F3
67323B36FE3EFDDBA54F0E096F125A1512469528AE81F54A77B789ECBF72A943
BB3182192ED0D1F8B1C1CBA8DBBB382D46C358B05042C58F38C529CA6D96E108
185705E48F0F4A3EBC0B9F6ED854F07CA61DC9D0FC22DEE6FBC18028D5B08929
4BA39C767B520DBD3D16C6DCD8A7D646C7589CBC21C75A96E9B24ACD2FDF1E9F
E14CEF3F56612BB41EF8E5755FDAB4A1EE433590FE02FC1827C3301D95B220EB
CCB1B767F77D9D52F6CB8D6989CF4E526A385552279EC5B0C136707CF7B1B2BE
A5BBD0DCA3D1528520A5DBCB2C4B2056E50D052A3D9C17188097C1BF8453BAAB
A58BF634251B27E98D543532C8319A32A10F81943EBA06EBC2C42066EBC91DAE
18FCC53BE27CEEE569CA9E473EA9164F5EDC6AE7D5E0B7FF57DB3FCDC1D9CA7B
3FC2DF39CB4CEB9A1E6CCFE5C799A961316338F4FEC3DB207991F18377DB68D5
8579AD0EE9C9331C3CD83F0BC68C9349B975D4B6EDFE466838BA8B05800CDEF2
B34F51300BDD6AD55D8486185EDD193829A13FB5EFF300ECF356FBC9FB133D97
B0A214968372E66639F2B4D83CB77447F3C7785C52208AE9D5391FEA8FF0715F
8DAC0440C70291779A1D7AFC30F7B9AFD94AEAA00B5D5AD8A5AAAFCDD4D4AB79
7CB097F78CE642DB7096DEFCECD10284A8D126A62A405819E8AEFA4099F813FB
CA47F68B3E04890FF3CF32725B3E8E9E053D0515D12FBCEA3C4D63CDEE49F0B2
CC2C45A826FF802D4A28C92702C712C40EC1A6B826997AFE6AD19250899F1403
0D16E5AFCD4B257EDA4914E07A4F3EB086716E8401AA9B1F968BA7D0C79D6C6F
B271D51ED622C5393C563F7A2E993D085702B5FE847FA024F1068D9F168D856A
1D1B93F89253F925CD039BC4AB2A400DF5CACDAFCEBA072D4E4EA0A7E74B7812
3DC26D5B3E78779B24A5825F23BBF00C7E586526120FE9F7F8469AFDC0434BDB
35B37E9108EAC226B973509E5D815C9A1C6D73445E24FA910420A1328F40BDEC
148A46D16C37463DABE8E53C1A555E0D56DF9E5CDBA382A82DD50A0DE8DCA74B
FA141CC6E2DA26F515B6576AE85AE3D3A0230564962A3197186D5428380AD3C8
0CD681EB55451CE337B4C67D361823AF57C0ECFA83682D9BE72528E236AEC3D7
CEAE6126CE47819D3C0C6570A338E1937C0E2BAC90160F31FBD32E3F135E2464
8483031CAE4510FD340E71CB384CC5A2C92B7C47976A919897C33F141B84E8AE
3054386E4BEA16BAA8FDBD93812EE04E6CC81D936064F61493D92DAD2CFDA820
2D547FD2BFB88E8982EA91060E152EA8CB5916348B4BBDEA44302A0497545420
D513584F4E098977AD29AB6662AFEE532713E31F08AF14F0773F4D6498CB8BAD
8CA1BC70FD682ED9B81161AE3D35108D69FE05DA9872F240F0226400E9F193F1
C5154D8863BDA0DFCF64091396BC4D3F519BD40083F45D8EF70D3A6505365379
3C02D28BE67E2A244EF57111EE794F7A5C72AA72C671965163426C81326C384F
4D2B5E30D45B5537DE98D40ADEEF21CA86103966E399861FBF2ED4ACA06C00FA
17CA9A16E738C8BB323697815D1867819F250F81034A014E2BEEF8CC7B3285A5
37B4155C90CB5B9D355DE1C0EABBF0EFFC0D29E5F246C0832580AD346EB5070C
D17873146B3CC5ACE41C1DA5ED516AB9FDAE96A496E4E6739DD5987D43EDE490
21CE6F19EDB5F6B1D624CDB75091C69377EFA2CDBBC3C0F31C68E8B726ADB44C
85B4414ECE1409E9223E86B2B1D5DD1F4750ABDC90E9122014C6D0445993663D
32C39429CB2E52AD18E3F02F42BFD91BAA29256C55EE5F30049B25E9AD121DEC
A8B5C1706B537A2B36E1FA03B0758E4C6EC1EEC54DCA03C308BE11762659F0BE
CD13191A4248089F817FF1DB1F51FF5C35E04FC11E648271AA0692A737E6E945
023A3840AC57003B1D7259FC1FD63643ED369AC65956AFE5E01786D8D5E53872
C60AA26E3E4BB95CF70387C627FB9F71D47BDA8BB9E5428F282697CB8DA78B73
23B75177AA09DFBF0B7A891D64DED4C9DF3F1C5C4FB0C619ED06A89D15F65F25
E32C010ABC8DC64D77F176CE36DF7F4F242D8ADE1334AD7845460158BBD06379
7D1D013B63626FD82AFAE43B5A8E8AFB460CDBCCF180C2736B15E5E802245DDC
C4B5BA12B8D076817C044507EBCADA61E5DA2C7F43AF06668530082C4BCCF307
BC060F38BB80572737ACAC794A6602649F9FE605DF63DF3F73470ED960CB16BE
B87FB19E0BF358425ADF1AE37B57D15629742331EF30C078E8CB51AA62359BA5
50DD419E3E2D42BBE30562C3CCB60B701F1CBE6B3BDC4BF1661026234BCB8F78
9BA29BBB7C8ABAD73009DBBC9C5C1116B73B90BCA391B053539E8A31CCE72D0D
BF37C47FF8485A50D88CB83A7C1FF413F91C8FC70394371D2D30B02636AED8A8
43A6B050B11CE3BE974573E6C6668C652A4BD302293900093B77C247917447BA
904D5FB6215B834838E64D9D15662DE044B9B92FBD607C1B7CCE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.0: CMR9 003.002
%%Title: CMR9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR9 known{/CMR9 findfont dup/UniqueID known{dup
/UniqueID get 5000792 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR9 def
/FontBBox {-39 -250 1036 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR9.) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9AF72336CC4AD340
15A449513D5F74BFB9A68ABC471020464E3E6E33008238B123DEDE18557D712E
ED5223722892A4DAC477120B8C9F3FE3FD334EACD3E8AABDC3C967C61FF003B4
B10C56D6A490CE9594D57A2D431B9E5E10FE3D8832E227A7087611431ABCD029
85F4865E17E17F8CFBD2CADC97E0A8820E3ACEC873F31464466A9545E967E53C
DBDDB8478E69063FBB891566BAF88B7660A4405B16834761F041CCF7650AF955
F9E853AA9F5F4382E1FE7D0C5BB4023818A2383F91249D48CE021250EC9EEB1D
2835E18FB73026250B32A8849067D5E2258797C917F998F2D4121D96560C5FB5
B5D3471216639A8671B6DFAC5E3554EC36D9A72518525A795590C74DD70DA3A7
78BFC43E51D6F2BA52F17D4DD00D389D3983EC54912AFF73684A8A7E345537B7
E62361C04A47859DA084BC72EA53512DC54132EB2EE671793603015652EAFDE3
41C4B6B679BD60AEC5153EA0D2200CB1D097DAD770F5F31E6FC475A225995277
B867B731D5401E2D02B85BA85158C80FF7E2BBCC42B98AC867E67D25DB656072
55A0D32AB7AA483A5A9686CEA4E2B3031D90D84DB3E2DEE7706C91BA81CB8DAA
700E5F61E07D6998C9552C81B66FD10A10033D49EF3BCB0FF22ED0A3737523C9
8F851C61C4BF8A213BF6EC70C956AE48B5BD276CC0437C72BF6515B10739919A
F00F6ADD2798CB211668842349171A5AEB0664D2C44397E55A4A9EBDF54A3EF4
FBBCDAD9DAEF4B0CAEF7112FA828F2F8D9F633D37E5516AB5ECEA87342EF8DC4
3A50548490F5BC9A8A1F98AC7AEAD9D913BFA10CA86D73AEB5BACC1FEEFDCC15
B3655522CCA2C772E902FAB2A6FC153597D52763EB44AB7489FF061F7F58E8F2
AEAAF4D17F36CBFC00D3C653F335D14240C87DB4339DA9D30A5BD1F502BC9013
461B9DB2FBEEC01BB18990439A0E9CA6576BC9CF6B1A3DB9386C4A5D4AA6A5DC
CFA45FB75F22E10ECB72565DB441A194902C91427B4F676E531C661F7A2C3C85
CD534D1C89B6779B2EDC8E44667B992C20C70B663BFBF680A6CF4383EB7CA26C
4D1F06B5EF4025BBE65795F1EDB5CCB97050872D6C07BC2974F905ACDB7A765F
291365D6C8152153E7F017A25FB4476C60FD9EAF9A121633DBEAC32F62850223
D6418566AB350F90F4B35F19598478F76B63E347D4C61E203D4DB8ECB9889181
C387F4B663A502C638761D2782BB96EAC81A0108D7BD6938F67FEBB69218D115
D8E89CFABCE15C6ACC7FEB983332A51A6A73CF4E341574F366713D7FB29956D9
9BF238A87483D37E526A2EA2F101EDD34E34CB92730DCA7235AA0027189BE405
2DAB4AA021A30C28B26C50808E1E965C02F6212EC7C72F5683339425A7739380
A422E6191ED8453AF0CAAA424AE44DFA7CC5C2F6EAA8D73A5101D8E9517DBCFB
2858D0E8ECB7DC430EF23A9E4428CB7DED8D035D6050251AC101A2D0E884721E
2F21E573F948048BB8FF888911C508CC198BD750083B339500C426AFCD5634A6
AAAC1C7E91249667B231BBFC64B4317192FE07FE9DA0DDB5E517D097AAE46577
9555F29D45C67CDE9812CAD03F220B20519F2FF32DCA56A554D4296FE2D1F3FB
B209B5270E0E695EA5A0EF1144957CE045881AEB8D05D72CE57F4D34617AED67
0D3AF0472CD8D60933651626550366E300E72A9C89ACD475C2E2ED9BD44B472D
9DAFE943F8E02A6DC38E447EED964624C37C3130E48211CA279BB6A0BD59466B
42F3D89B5746F29E084E22CF58395AF0F29E55113F3A3F2F52CB3A6DF3D026D0
C81754B8E2E4A15F6943BE9D0087D5166060734FD07C4C57D7C7D90E8C9C1F35
623CEEE3ABAE75E1A18A1E3B50B7266BD2D8E812CFEB4A46B856885B185640D6
B9C22179551002B94282F57FB433B7FF157D2F0D240836B72AF4A331668AE5D4
E6B85415F4E8B9D2F9AF90FAFAA0A3866DF417CA5A31348CF9B41B8F5F4D2F97
CCF7ADE851B5E2E2F6E319AAF5792EBB9DA2C6AA8B73D889F3CDAA42932CDA7D
07A7E59183CD89520DDFC36E5D513BFD8AD0886046585F29B4D7F42CC0C27AA7
53915AB1167D292FE91957E94A57FEE2D49C20C9070ECD736BDEE0F046E60350
EA539DC298156A4E0D019E7D481FDDA6861E20678516AB80ABEC1F09B126BCB9
52E8272A06BB6DD87ACFC423B4A4FC9A3DC8DCAEBB807C5F748F1FF8B17B8B88
F426206BF1B7B7D239D26BC3CF0776C467A98CFBBCA5FB6145D5900137ED19DC
D002F10704AA680EC753C22E29AAB15712EF22AF73D80820A1EEE953463D4EA3
81FAF99518D4FD0F862A324FC44C4B9542A92C5B60CC983CC8F647CE5BDB4D6D
B92B380E0E5F7208A9CD91FA9A469548162C761C1BA05AC9D60B766764D821B6
B4E17F56CE455F06EA1EE2D38FE47581746C4C5FBA63AEE2B58E877D1A8FA83A
31C972D53B64E92EEEA147426A92CFBF76FC614119C6E9C6476FD6A069C803BF
E949FBE50B5AB1F1463F9747E8D353F7BBD991C4F90F920BC9407D8E24720293
846D052214E60390C3CB926D38C83AF697425D80C2B4FC4706615B905516B733
46ACA325CEA68FB21B2D17CF0B68BA4DF249368625CF83441EDBF2B86C957C1E
44CD722BD2537CE84FBA07EC7AE15C840041B9F7F3040072E6084CD55B301C08
A64A53BD4D3DC30DCAC6C152F316ABC59B8EE978793EBD568849DCC2A75A495A
BC83470D503F8E389F54B4A4A31624E83C601B43AC1E52CB811FAA7CA6B644A5
1AE0BFD4FC774C9C9DFC2769ABFA9C83F900BE2DD4010416053A1D4874E6ECF4
D86E44B4CAB15D53E5630C144B0C15B58DAAD785BA298B1893D1B09BA5D40344
6678FD2D17FF6674433C976D6DAC659175CED26139967C9B2B9CFFD78FC2570A
E5142141C2888DBF2DC8503F9137CE7CB21A1EBC2D65BF33FCEFBC85C9CB736E
24E8595CE934AB032CC70BD6A3B0F3BDBFBBE185512FDB7BE3D4A6620478453E
75D044BF770B44C9741E31985E6DAF5A318D7BED12B02A4BCFE60D25EF12843D
EFC9BAE2A3F2EFAD66D7858E83EB46BB09D2FF8AE9C43844A7001C86ED97AF51
C511E3A89A1BE349FF5215D1A57843EF51456B9838133846F19BE79AAA5C1AB0
5F400E5E8E7B0BF96EFCA3B8F0894BE589F2C9FB6C97BD16D38F0A237CD4F034
099C41F85C7E2C7BEC8E02C4F327306A53B4B48B26A8926670CEEF96F6DF2281
7C2DAD99EF8B81BBB777227C2475AE7400DC393D9C0445E925DB1E955950F7AE
53E9AC4306794239346A419F7B5DF4168382EF5956B81F83BD4BB7635B3BCC84
7D84D05AEDC02D14675D777CD19B08124001A4F4EA96990D96000C082A12F00F
7FEF793A7FA69D56D3A38D012168C5458B667190AFE80E02C816CAFF0A71953C
D80B085CD286027E2FDBB05452AA762FD7C813B2E19A79C74190E04E746C4933
CE1E300CAF5DD53B08110509BDA404EF07FA1BC5224BF1205DE8E0C3276A13DD
866675103B960C5F36644F96B4FAC16F5D6E91F74629B318FCCC8E8CB13EB76B
B0B7B90718D913A52A04732EA3667674994A325A7973C601A7DDD50F658E0826
ACB8E53D4914B0274AED98D7BC3B2B7F9D48A7ECC2F8ABEE05CF2C4F2B90360B
B7DF779EAF3E103D1D83EDBE32DDA873768D8C37DC10A5354A94B4153049AD64
FF3E0BB51AB91D7C0B4134D8731CD0270DAAF19BED9EAD800A14B65B68EEE89B
40DD624111670DDC7C030DEFE0D1B96420E249332445C155BA96231C88E70643
D526BDF3CA1E05FEE72CE2B881CFC01ED780C10E89F0828AD55FE29043BC56E8
2750A6DD15AADD54492F6092618F4CC6A31766B17FC60766D18C307EFC9BB787
39047DAD6B38419EFBA46B4E2C932F97451FE78AD75FA90DE409FC6DD46585D2
1941F5ED47A8FBAEF5A917A240959E8D9F9917DEA3247D9CAE6BF7A88DB4C4A4
F9F5A6DCE542420A032FF3392FE0F3357B51F884D6181583A554F75B1DF192E9
253CC828FF06B0D992D5316435980B044BB191508C7C45CD90F797F88856424B
14A5707459C50EDCF3E3D8D1667AAA83015405354CE744C66D9A5728F29E0085
6DBF740717FA0799E3BCC4ED7841588B496A5E549B953A7FD288B4A045DB611E
E3B2F35963FF18ACCB1C968BEEA2CBF52B3999AAF89A05320BB2E97F52CFE06B
9F10E3A79865A3059A957F97972D80ADF678A36E2B586C101FC6AFA4D137C13E
EE7102C9B8EF78CB057F8B7476F146E8FF5C897FD5503DD198128CFF7B5FB339
FAD0AF0EA967F77B07B367A4AC9F668F8BED99B98E87FAC750EE045602D76C3F
289FC9D97694C96AAC0AD1BD3FA94DF2CBCEA24B40F47B9B59E54EECEE7AC4C3
A3F5D19160E4C1EA830D57FBE10D8D46AC5CA0260F22FAA45236F0F542BEA9C5
5A88F878F68B36114E0573900C65E305462B22A3429A17C7A567694414DDDA46
5F30542B8FD4F00F6C295B2E8D3A986B953D96822DB2ECD48E8BB1763434E652
152EF3717F5E7FA10FF0B01D9F64E22C5DBD7254629658887BACEC0ABDE972EE
67299FB84A05B3EFE22B6976DB4CCA384232DDAE38C31623A4E39EA2E82C1EA3
BBB68F1A7DBF405DEC37CB7203A895C36A44BD2D63F45B3888AF91D37B510A59
3C921BB44DA620892AD87B665F69F6FA510B071ECC403CB2BE2F54B3969C9E88
713244BC97C1466DA8216DA7600C221E7E7EF5C789D2E12B36422023A03E11BF
2790FD6062FE6BF62F5010A92F0A104B76E255A0975E04F6F20F760881BDA7F5
D834D1D328B6EC19AA7D5E5678A84C74C82553DBE8BB5765E84F5A8789032143
6020940B4B8D45FC3433D356E28C25F42D0C19F911213D85951B2B00D01B77BB
A4C72E964F9D95422BEDE582A05CD52E03D28A996E6CC8FCD910CBAB728073F9
F9FAEED5470FFA55930447C5BA816F826F983D53EC9941EC8364B3060FD74C95
26D4F5CA753B574FD2FA4D1D333785241D8741B79E628BC852FDC35478C5ED9A
C1BE88C5EE7302816E65C12B58EA16FEDD4672EB3E24B6EDAD5DCE263BA8A970
350B651E5A9F3C281D85BC3F44EADD0D93402E36489BA5185E7D388974B0B700
70575188BB610CCA20F081E2CBDA13DCC6F72567962ADB342E02C1E763B673C5
F7384E24C6E1730A3A790D690A2103AEF88E0C1D4480DC9B25E5C8C9E1919C95
F83320179B4C7C4A26D559BFB24D7D596FB73758C9990C451E77FCDDD17763B8
9C30A9534E3CB6680D3D419D4B70B0B0A0D160FCCDE169714E373F65B7144CC2
DB9A44E041211E1517D3148E65A2486CBE5E74E625261CCF65392FB4F3091473
F9E8DF327D59A58558E5C9F7190DB577D5DC658F5E36258291C708B3D224653D
064BB6079F91293FC733710893AD1C96169B30CBFE4E9D52E7EFAE4AFEE68FEF
1AFD5E7E9DFCE8DE332B0FDC0514F9B3090AC85BBFB527FD8034DD33E9576325
A8769AE09AF1BA792447DDD932B98FC9486B39E0B04DDB3EFB7A30DA0940B33E
E27490E0E841E87B1C90E5248A91742ABEDC10F43A8AF0F9C5B4A4930B1AADAF
01874B9AC3B8D0DBECCDA6CD7E96471FAA15CB7F8A599C5746327CE392224C3C
40BD60AF97BCA6FF6FCAB2FEA114D7300B89E91C3BC92D5B3E2C83BB37992D8C
72F661EFD0AA034C738C019DFB79BF40651A1A34BC1EB9F5AAF58F8B3DA32645
24AFF8636486F08BC21533B5FF7391B0679A78DFDCB03DAF6BB7475A1D51DAC1
EE4BE9B986655D1FDB6936445EF99B58B303FE79F11275EEA96A9F6808EA8775
D873D1052FAC93769789C700F20EB2ED6D15676F6E563A769CA9298E463FC311
83281483B1C953370D196727A6A0E66D32D9480AB1B6DCA77868C1A2D5DB6483
5F31EB6B18EEFEF1CDC31533E69B0AFC6B30FC9912DC89BAAEEADC30BE14F448
1A6B70D36A5D9B01799BEEA686066114910842D022EB464A9A1E8F0A5628BA69
AA9A1925CCADD44703BC67A89F3B48E4680726DC4360274185CF3C8AB747A8FC
4B928AD62B092EFE48B01E33ED756DB696171FDB775396BBA138E056F71EDAE3
7A1E4CC272B8418114B0E81DE0BC43DB3C133167344488820A92DF10FFA26FB9
65FCA2C87D302E956DE6B4FE145145440C83DB43A68F8B29A592B127BDF49063
B7F11E155CD4CAE305525BEA56B7C412A6260426407BD892A3F2B444AC3421E6
FB6E6425EB5C3053C5644666B80405530FA0012B54557327C98E0F4F064099A6
4ACAAFC1870359C1B6FBE7606BB8A26026AE20C212210449905E628AF1B20490
8CE908B7EF3E3DB551C85AEB0F7FEB6A8D215B97998E5DD9C7CCFB2A9402B8B6
1770D4023777D4B45A73F471355353412C51D4CE71FAD1E0AFBD87B5F86307F3
10D0B94F1194EFFB64AD5DA54A4200490F609CA8B912E149F8217ABB1E9EBB3B
C4470E7365CF5E1E761AA1945044B225BD53D142F6588C50E0644740F7DD55E4
8F73201E5354A8BC78339211AFC4935F44701FBA043AAC4BA4698E9D7700029A
C79F992F62627C91EB855F64C4B251718FDA71EDAF082A0C7B00550949D617A0
7071FB14F05620CCF2180941341D8E60FC88823438FD728A4042AFA8B853107F
852F631518B61B234565291B5D5B89DA818DEE3AE3B68A2869DFA63255CC882C
3B16BBA08FCE3632E57FF7A07F857A1F0FDCADAB39D77960BD827CCC8661A997
648BF5BEBC0FD2286C2A112A8DEB9CCB6330A049170D5D68EEEEA011D3EF3EBD
855236B9380087CBBB6BE24191F728B7EAC5B50F7A547AA0989B7C7D3437DBCE
1669341264E290646F2C8C5A3ACAAC7CB63DC692FAAE13E9B40E8BD39FE16A0C
1660CE66872D061056C04DDDC265C024BEF8B7E3C3AEE76FE5C9702002C28BE0
B180295EE00E567FA2E5CD1638226D24A7C732E1BD8103B476EF5702768689C7
D4FCD47F2AB94A2B1FBAE6ABF87B09E7713C773FB65CA83F7318035B332B9F99
24A2C8897527021321D003AAD7C273E4BFA2710B9BB26C2CFD3D9A5D7ED1096C
552D50028AE2476FCD6D12A5D0A897521313ED1A3A8456A70C16EAA50A3E6733
6DC89FEC56AB54A579EF264377A103939D5EE00A90B4F2206D0023AF9491FBE0
800C6540FC945199E20E945F46CEEA2E885F6800B9DF042BCEF4291A4B1A62C8
6A7ACFF872B25FA3AE69E0093F3D0FF13A3313430C06F1AF94D500431566F659
E8C859A5F80F5BD2E85C8E32603D3745628E8FE6FBC50FA68F9C3811A2BEFEA4
5852CAE2AE5AAD3230ED050593BAD0A9581EB7B327C6916B8FC348F4C23E6FA2
00FA28AAACCB3091C1D83F7BB88672A53A2EA3B8C7C24374E400C57F0F01019F
E52D5C47F389D4C9AF126F4080F9AB8D1C8F470932BBECCEC72A9796F6E965A4
82057DDB43D68298A00880D4C2E2496F26F015FD83C5549215753459310339B7
6B2961EEEE74DA31FEC8E2BDDA42D4080A32372AC372524BDDA580EF6634ACE3
128C69D04D890DCA337212B109585C665AA83EFE47D5BABC2627A86EAD11BF7D
744176652C7F9497785A7A06A994ED8414BBE8B26E74D48CB83FA24AAFBDD507
84A90195EA3D77BCE8C2BEDDD1DC52E8164DF15D65B916EBDF3A8A76849653DF
AE3CAF9561AF3B705F75B9E5DFD6758DB65A2FD54683759912E0D0035CFBCD86
5B4BE8CE5542C87C437FC3B5360349F93FBF92FCC32B212DD9D368BFD504A121
64CC3A7744DA90B76A05860EF32CBF45805D1835F05F2A6117DD0AD5DD65FF12
DF0DD89992DC8DBC096D8D56C91A11973EB7B0E2028E065F9997AC886446EE4A
3F0349311B6AB1110FCF6163A409D01F627E7C3AF3AEE8D8B385478A35768764
5A6E31C97C74F6EBE32208A0FE2366D421F3AA230DBAC8CA9B123F8F534C1574
9BD2571CA84F117D8558ACD6BA0098C6EBB1AD2C08B847BCA2FD7D159B0308E3
3E6C3C2DE14988765CDFADF923F763A8F3E79EACD5C3AE21E8E0E5DD1DCA50F1
B85F57673C6CE09EFC4E229D463548AB448BC13710F72DDE3B6EBB800DFB555B
9E8EF4ED49A6862CEE88F7A612351F3EFAD2EA53AB06C46134B09B4BC658B8D7
EDBF8D085F082F84A35063986A42B5445458688B82C0FCA8921B0BF491B51F8E
013966502FFAFCE4C848E41EFDCB5AA1EE1DB0E3AC051E6654EBF4E8FFBEB84F
F65D8ADDDC0995B117009E9EA4FDD8CF3D64576524BE0B1B9D79A76536DA7036
198FE44D4566D86BBC45F71A9A9CDE4364CD69D506E7D3C9125D79B16B837416
E74BB617589E877EF44F84284B83876BBA3C4AF64523F37F176F3256E298D22D
C5F1CCF5EC00EC532870FD72E532671CF9042E72CC4F32905EBFD5A156E3EF0E
EA375E66905D49892B70588D74C65E153A306983849D58F61DBD9851718C37C2
FAA67FC71D425F9409954DF168966159B2A302B801CBA539CD9B4E9B7F733FBB
AE7E723C2668B7E3840DA5AC7F8BF6B05F3D0BC0DB85EB209D0D6CC7AA375061
EA6DAF5220C11A489D1E843CDC5ED0BC6FE2F8D20EDED866D5BEC3D772AEC255
D01E5F511C6E9AF8082E920664C934E2FC6C13204E89F80CAB3A5537A02D717B
6A189D0C954FF3EE82C5431095893209E1C8E6DC690266B9E6E9DFCA889F03CE
7A31069E1B1A3BDAD73A5E9751C07AEB8F33D7C7BA7B12393FDE84AE96F31557
A70C454169D69DE964889FC5377F0B6C27385C243A4C2C69A5CD2BA0794DD552
94B8EAB30ADC515987E733D60C8ED4C094D0E56E1419F6D528D4F4C217BD3E9B
B6815174CE2B5AC5316319C8B5F62B7564A07861F1D1BC42053088FDB2C11E7F
7491D0A04A3C35AACF27D3E094242A3418A5F1861805C8809DF3B25645C229D7
9B65BC179DE576E3FDA45DAF4CD9A9C44351ABAE4FB18FDB08F65D937C0BB0E0
D2954487E9495C9F42F227695A0C7097F08D2D52C228B8FDC0E876C8023115E4
02703AE7B21C507BE99CD37958765FAD03D90A315BC83D1408DC1C93B5ACDC9B
FCE498D77767798FDAA0AE0403D19E27696805C27AAF678D6CABD2B180628A44
EBE378F4957A4E0152D9E26C449B95678C6D541831AAEC9AA21E7949B73BA98C
E650CA6F100596EB72530BA06867A132399734A52C551168A47ED789C20F5419
84A1B234DE4A631FAA89B040B71D281FB2CC1207B45EF90A9AC93F5E2EC2DBE7
1C32A1F01917CC2CF8FA626B5973C9403803D49A778D6827C4F708A4DC0542D5
1C3B315FA55D8D84B8D42C101471BA5E9EA03CE55AD92AEDAB1D36249F33E077
A0D3F24A46970C4B6D373BBDE75AC01E66245B9ADB1CF5AEF128D25AF7DA08AC
D1CD52D4646742761EB70076CB4236A5F231071795B2B31F930CF97BF3922C94
58D9E4EE114AC0238DFD2E851509A733C2DDEE4E4A75A0CAC6639231B93A9242
5322F44A6E49DB61018AB1C3EF13DF12A4C4052B9E932C8006C35834F586AEE5
8B56582710462D09551DD406E8582821764FA20457895B05740ED78D1EE8B027
DEF6069086419D4CE4AA05D11F631B5C950024BEFB7906D5AA1E685B9B3DA9E5
0EC282574DD700DB6E133B6C711CF54F56833AAF36CABFCF92621A0A33B662CB
16ACEFBC340388B1F2CBDC46BC2C0DB822763D37D3895555FDA3CC9044A5405E
71162051028D45CE3F0E48E0B909BB3AAA0543DBFEE8E898B77BEF6DF7200EDA
4DC5E0F883D50CFBABD20D66134B1C2A8164652E7C02836329E2AAB8449EFD25
8C8D098E5A5C4C973303FD9B082861C5C311BFBDDE65FF81CD0ABAAC8CFF6B92
E0435E180B9EB3E38196C3270C644154F550B3AF9789EC31512B4774532CEE1E
934B57285D463513DE3B9ABF73283657EE6F84ABAD8ADAE76354F9CCD91025CB
6AEFD2E81813B72C9F257C46A2E5703778C4EC98AB8C44D24D28AA65159B5621
D374878E6313651E478690AF2C65AE2CBBD9F4586760CB1DC1439712C41E5B24
0815206467F008436D2C186DB1A1AC0A163EC71C412177F53A2A16B5ED82C42E
D144B25F2D3945E99761AA07303856A388078AA055F98D2751C1A5E119E73B23
13DB0E01A7BB4EC8ACA569D6CE2A080FE9D4DAA445E8EBE6A1FE48B5C3620A1D
6DC1BBDBA328181797F77033135DC180CAAE93B23BC05B1069626FC86B04F32D
B38495664C9510D2452AACF63BFCE97B3227FF40921E9BBAE0E71EAC2F753B83
D7CA15F2BAAAE54C6944FA161D25AB4A209B562B71C8330554201285FA247F98
BA9588E77D91919191DF0FC97A8C6E5A78C25837F9731965AA2B24E5624CAAB6
98664FA7B8D97242A5D366DBC3C99A1830DD0FD90CEDDF4E5993CB0061AA52C3
4252EE0F5054488DFBB8172778C89B57166EEF4237368E0104A495688F39E089
B01B5566E6E4AB23E583C24D475EDC5E7D42A15E131AC237418BC7AA6986F3F0
E7C071D1B66D33D0ADE3FF1EB715B530CE4F5A71641BE522E3CA2974FBAC0D3D
01AB677E8BFEAB65B90FFAA72659882B9F828C577FD2595BC52F1C311AE68A0A
40E866C2F0B07985387C5A187F47F3AC275AB3874D584F06696878EF95A7D443
5D8F94E2B22B48C4F27807C95F6C47263264415D465BCB9F0BB3622E6E5C3AAC
06ECA3BBEF6F4ABB551FF14A9ED1733700CA7D05B91BD559
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 13 /fl put
dup 16 /dotlessi put
dup 19 /acute put
dup 24 /cedilla put
dup 34 /quotedblright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 126 /tilde put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E299575EF2ECAAC7649193843D694E
6CA59318C01132C361A3E43BE637B70B9966664E12EF4707F6B100BC37778D1C
F1806B1DE081D2C9B995BF1EE3842EFFBB8416161FE31633A6EDA118E563BDC1
C42F403BE8A009FC756406669E34C6A08668808E0C31A589D0720BE32F3181F9
8039645643E15D25917F38DFFD8BD08A420854DE15AF291ED675A634C151193D
29AA6E04E84A598350AF17E71973854842AFEC3EB1B58E4D4433309BF5ED9D86
32C4BD136C89169D45718A88BABE25072D8E552AA4CA3F840ECB11519B06EB44
13026DD6800CBAA90F3BF0022E66A54BE1059BD5D224B674AD3199379D82D571
ABF7BDD1BFA45A0F0E9ACA0A400BC5FE22DF4A041BCCB93DC23D547CDF0A49CC
6C7DAFF30FE0843CB3324AAA3B92F543A985027FD2715F4182BAB1640F391992
E4DB6C19A96D1D48EE4A4DD94D6443467C61CDFEC9B11E0069833A45342B060E
F38B19B97882E8F13AB6D17D5373C293BC00646EFA0A96570BAB2AD4C3467C36
EA5E2FC8D2A2347451F3EF50CAC4EB4C15A031545C2A8BCCDAD05A9D41B2B967
6A4AF3E762FFDD479513E1E833CF2810647622ABE473538C81AC60F1A3E7D1A3
FAC5EE1C8858D2CB58532AF7191B77CE667E6326175E17CD0741FD87173F58CB
8AB3F0992BD0B0B7678E2BB2CD965216C53D55F0BBF9838803677AA26568E7B4
C6D3E0930999227862F09FDA424CF47038FE5911A56BFA3BA973206679452D6C
DCEAEC1AD70D9CEC416A6BD4226CB034D1F261A0724B84B2C95343376EAC9E05
48D02396E1F7E6C6891BDD790095DB10C46CABB6D498BC12280979436D3D215F
6C0CF80185DF258EB7D7AE20E8074C0C2DD10D63612BBB71970AB312FC78679B
CFC1B3B342A6442395E520CEF18D77C9340E7DA610EBDA954491126A87E0D336
650532F5C173193D22C8AACB0B1C4C7D190F2DFE16DF7F0434C9599D05234948
3E035EEA365310AE18428F9C065F823DFD8039E6D14DB366F3BECEB346356864
C14CFEC637F4C37E8713A11485E828C6365D96A6183CECBF75CDB0BB1C6C8369
8948F92CBC5FA902E5DBF2EAFA832602DC5027B4CDDBE99C6E667DC49466B7FF
CD44015EF701896D806FFF66EC1EB87148940B9939312A8B3CC3ECC121DAEFD9
A1F1A28F30F0E14CA86CB2E7FF4B4DA35B8F63509B634A40D07770B89AB6E927
E8494ED12C4B4EA788A285518D633BD852D9EBF1155D213F23AADA08E66BC3DD
A8287F545A2ECBA11087764A217B1E950222EE001C8BF04BA1D31FC9ED26C893
5912A6579BB711A88576B8430B4A78AA49091B035EBE97F26B0B5867DFA1032D
5909BED1912276E6016E7C1A3E64030D40F3535AE17854A04CCF5560C9BC0FE0
4E677DF25B5BC1C3AFCC130242D09B453620EB9D20660CE93ACFE9F163EFE84E
8CB01497CB50410DC9BF548B550AE616D7CC864B7F781EBBD8C93AC879D09B84
7173199029B3C52A85E3A069D5265B78DF1E8A68FD32C9BA75207C66D0B692FE
7C9CEED9A54EE6607CA151FB40211D1F114AF6C6B54AD528D7AFAE4A2886F5ED
B5FBAA9E9875835511AC631D01545CBA6F90B8E9A745BD3E2A4E824433934B7C
586B986BD69FD39E64A55157BE8F730AEDAC1E76732CBCD2606E61EF691BB57F
1460F3DCA2F1AE4F6DB85E249AC290F241D098A3C9054E372D225D08B7D30EC9
68D16189FC10CD8BC70C7CE77B97D88F0FBEF4A6B4C111BD7B2A4307A0C3F611
DF40E7AABF085F449843BAE4CC2325DD56CBD9B4B1C19A67CD1792ED4F2215D2
8DAFF0B369FB7E14A12FB3D4E764B32670D0CD79A5DF50A35A7075E0A73A9EC7
7B59540B407A3643F7744D0149327F0FFB5FC6CF9A1854A07D5D382369F9F596
70F469C6352D659FA6F3703FC79A130E645C3F6EB588AB3B7D906D3B81FD05BC
51685039B230AA8C2235E225E7A07327ECDB2E817F48353ABEFBB6F17E8DE96E
EC17BC36FD51DB3360D7EEA130B7ED2700B38FD7F4E03AD5CE8228BF9EAF5708
1F57DBF9D74E7C3017641863945488EC70E89A7B24032854B34F5FFF1B228362
1D7BEB77295CB49BA91CDD5B32B1520E51F6A929671EA01350913A4CFFA92B86
DB6D22D9483ED886CBEBBC0D7E4421D35B8F1F7617B89177F6308978F8DCFBA0
16CF96259A6F0A442E2CC3D9A075501943430D8984C41962CDEDF83B37DEB70C
29FD39FF02965F21CEF0917E1CC0E16F77888684526CD6374162BBE96EC800BE
87AEF330D9ACB450EBB838AACBF3430A40F35CA40C36582B49A13C2544000EBA
478AE284622B6BCF96B0507001D56A6AEAF511C4411967BC159176BB6F1E3E37
7FD97A1E62D442C5D546DC358BA0C2D3A68F622B8166EACE5F1892B4B5450623
8F06F910C43C706CCD84F5E6AC4BF58C1108349C6915CC6BB8C325B0E0DC02BB
BC847AEBDFF59F192B2A2CD3C1D688323AB8D78B954FBE75294FA0D311C1340D
E9A734A30DACA484EB4FE35A9C413D2EAC2F9B94FA22B7BE49BAE985490E19E6
C526BF2DFCD42B7DDD72CDB27D6B56D0EAAED1236B55D21A5C6AF7938C404F78
B6282D64AFDCBA13DDC5F2612DABC24DF23611AC9EEAE94F2C99ED6BD74639EC
9E30ED3D8235FB43E4FFBFD37AA077F2460A09F9F0DD9FCD7816DAFE75BA1E4E
C08BAECF8B152D96057F4EFAAF8B113A32CA7F6EBE649F95655F077738C18E4D
50151DF5B76736DEDA0FBC2D58E357E9AA19E35BF97CCED72963406AB794D6EE
465C3CD2F42053E4DFB68665A3F70E6C974E6DECD0F113B2CF4626600B1ED9B2
8A2112617F4FA5B2075A3B3EC70338C7208000FAA81A8520DCD708F9EA78FB55
C05F40C64340DB6694AEE7D63B3226D792190065ECFE86BBE94E7223E704545A
26E9C5B2E79AACDBABE1366C096AE65B56E3BA4607617A3B0DB102362B553691
9E07DAEAAFF37497951DA6E15E13987EB96A28F7A58B97BFF01FB5C81D720634
7BB9BF8E155936CB6F2C8F41E73DF02647EA0C3A36F9BE6691B79CE69046E4C5
3FC6F23CF4F34A9CED04E43ACB60C4BA4B90DF56A7BE729447FBEF36BB8CEC57
6642181AB80DBBFB8AD0320518BA886085C3D19906F0E89AA3BFFD810CBB8A00
7D38040200EDAE2413F8705E2F5506509DB6A4A0FFACE30A9319FE5D3E46744A
2F5B620A6A65505BFAE093559100373CF739B31CF95ECE64E3EAF374BDF0F5BA
41DFF7D6D2CD9B7E0BDA33B65ACE0E766EED2411E936735F0645D7EF0ECC05B1
28A3A043D03BC427E7DC8E621B06FE68FC37049684BC628996B0BD61096C5AFF
00F7ACAA23C940A5B767692A5DFB9DACCE6CD6AD71CCEEA1FB92BD28442FA100
812660DA8881EEEE9174F9B05C151FF1A617663B30F2F3224E908710A809E4DC
B3FEAD6F06729E1FB63B845185BED1F6B88EA20514F345CAF326843A4366E51E
65E1EA848D40F25AB0384F8F86EE5D21DBD347D0D85209021F0B0AD971DDAAB6
AD6AF41C3828DBDC83EE7FBF37AF3C45D94E6642DD04C298E52EFAD067042F11
20EC56BD21F3258BF3987C634A16FCB6278FE15D2353EEE2BE85903E48789503
C3A52BC4DD75B288EF403F3E4B3FADD45D085E42E9E1C490FD77F0F3AA9025EA
441D34361FB563378D8C5C3C804FF6F3FE2417AEA1B4AD9164E3511004A58EFD
38E70DAFA40DAE37BC0486514F69520D43B5B95634E02EFEF4BCD26208588B17
B7E640BD4F01B52FEFACF185F9AE85700C5BCFA8F85188E46B11D9522AE98CFE
42B6DBA0F5A42385E23E75CEF5E81D80A434F30A29E7CA89A28DC24DE4D3B114
8E4F85C4677D777BDB40CD6718F6BDE40E5DFBC1A171A7280E8FF4AC0D4C8A21
99E48B44F682397A677D32DEED9BB88C364DFF612D1B1228BDB23C543F7141BE
85EC280399F3EF010E2B8B6AB16D6F11E1257BE6EB5872FBFC8E8ED67EE64910
D1C29D15AC1DECC455F783F0DEBF8C75335EAA3E64D7FE12A986EE3C1AD15706
03816AFF594DA6F6E06EA1DDA59C8ACB25E0DBC0FFFED0C7701DB6F4992CD5F6
BE2BDA03F754CE80E2442B34970D48BBB48BCDDAE5E1B2C123A73DC56620278E
7DDEC5C6C5ABC7327BFDEB28B6B2167EE78289506E72C45AE7A2D1EF9FD3C256
FEE88B103A64602E8901BA39B6EB17D7B196D812C36FC9D70BF4C54BCED50924
B9FD4091891B67151184DB5FA0B27E7CE3787FED70B0431D3D5769D7418CA13F
CD6B0686B10042E494EAB88A9186DD22044BB23E9E5CAE30452C4A91796E95C7
93C00FFB494FE5B15590E4E80363ED65E0C7958E506CABEA119A7480F1BE4E98
D70269D66D466C8958E3C5DB0830495B967C11933ECF2D60834A5918F7477EB6
4B37267CBE626CBF336F304116288DE52AAD80413724D767BD00D973962527EB
0411450F1C4796ABBF09BF255AF95753870BDF50F61ECB56EC55E36B0260CFF2
99C71785CB889E27FAA3D4BBF997093F5ED44FF286124A6256DAB404B36D5C82
81D7B401F51DE0923D0D96FB1BE5537340D545AE339F55316446BA20BCA430F0
AA59241D4579E82B018E6CEA5892F10B90CAD809988746329C6177D8AB91FE70
10A8B868816387C3C2A78267ACA453D38B476C7BF909F9A6557F0DDFC0910257
07FC1408C5B9CB8D7554C9886DE4C5842622C4F271899BF95C91082CF1A27D96
26D808D495A9F90673B23C624884FCFBAE7F41B563D9B920A7C49A481C0104EF
78C9F62059DDCA7B5317801B0D2B04870AF84979BCF7CC11FD13B231214233F4
A3C1FD5B1365C999036F94982EFF4580479CDEE80D6C81C5083F72B8581DC6AF
E4EBECB47DAD5013F08DA61FF48FB20A2466E096714D861A8C780231C3BDA507
1EFC11ADB6A3CBDC49C23250184F14A87B944DB3EC9AB81EC6696CED68A4A349
896D1B391054ADCE63E90F0C84F4AB4A671CC8AB477D45CE9F263844E9854F0B
2FEA03E1347166C539085346E63D7D5D6D6F5D24BF56E4235255F3B9781519EC
24AE544B47012D19B5F87F53BB95A40E7E2350E791BFDE2844128B2F917FE6DA
FAE107283E6069EDE1EE8FC0667ACE605CA0E9395388B47AA0A44FC01EAF1FE8
72429C42466DD0629DEB9BF93143F39B0539802464F0F98253ADBA5B14BE8013
AE83DE4D4F2120D5C850001C166422FF60001DE0373B45E014A485F7F397CBC1
5865F445697877194CC7BC7A5A6821F275344904BF7907D43DB88A043B2A559B
B5BBFDEF35C6DFB4668C30B2EB15A21C2B817E309BCCBF58AF9A57969CFA98E4
6643744AEB22A318D369E3FB610004BB44EEB0A88C14DCA9A6AD4554DC27B052
01F85EA152778BA5E9C598377F653085CD0CB8CB8E904E7535B876EA60A241A4
1FC57B894C51FDD82C283D69031A086939B5B7A0DC8C42D047C9F1B5F063C046
3084AF7BD4CCAE540D82844FD8C7288ED1D8AAE4DB013379622D460701760E74
690806FC499D00A645B99153227367FB32F339401C9350CD475B31D839B1E58B
07E66219AF03529409C931CA3A019024C8B246B593A73447890C460AA2A400A1
620E73E8E654DCCC17E1BA37BA9AA0C55EC28DFBEFEEDF65C3823903980506A9
F5849FCCB56CE3C796053A00B2AFD34CDCCF817DA0DE7AAB9A079288068404C7
B8F3DBB328F0CAC6175EF0A6F46865ADF7C121C87EB4D097DC63A96CFDDA50CA
C273185081A5B64212172909CFB00AFAD92D0BBFE30B20C7CA8B699DF537AFA9
9FB4B99551EFC34FC24A23D086BA2B89E694048F4171295E8A0C8D2B0D3E8C48
029CC5A561A4ACC2B7568DD2C54FDF2BBA9EACB7C6CF040068973DD1C4A0461D
62990CCE6025F0CA3B9A1D56DABD0537D0BC5C16F2ACEF67E24217FEF98B9342
3A3E490C1FF90D574A6FFEC06E1A27D1ED0C5F2B2D9237D8205636144A137986
EF83A0DAB4CF73088651DAB92A9230A4721927B80F882507252BDE584B1311E2
7D224E6E7728C743D1152D8D3B04475F4C0395F86A006FCDE4D2642112F727A4
41DD6D7632947C4AB3AFCB21BF06CD3D659C26521C4AF9271650973032481CB9
F68A229EE0B5D2D59D2D532AAC66A2F8D70566590D6D1736ED88D2573817F783
BA8EB99C9F7ED031907E3B0CA2CDC156104B7C0552ACAA0DF51AB3CF14E388A7
FBE9450B41D1B65A41383B671211F8B9E687BDA6E459B7C8A281FC86EA0195AE
C8E694367A05DE4FC086BB21AB72BB2C4088E1BCA735D553257F7E4AB0BFFFEC
9F2F29A937DD7C38B0EFCA22CEB29C19EF0560349FB386A403DED60DDFD831EB
830D940A0A8BB5C7CF83F0E37998B29E361E5A8A100004BDA8B5EE56A7AA7CA1
24E40CD12EAA1E12E2BC1920ECCF75418F1E29700E7B45177AB1D8989639B0AE
7B4B25F8477FFA7C07E340D5ECC68693B7F4675AFED149E9A14574B51E99D530
57EEF59FE11A9F72F470E973DDD5259C9D7FEA6E9EB41D4A1DF4013D303556C8
91208DC4F798DD4FB54477CD9A5B262A980DF37882B2B51106AB5C904804286F
48EF5D953828E6D63C95838D731F303D386BA93230CB7AA2B3B9399FD420ACC2
77A38EAF52E651D0ADB1C1B35E05C1CDA7C610CF1695FC18B1C4EE1C31E3F41A
64E053AB34866E72AFD6B2C2AB8A48C68A79605D08B5080ADC7642698E4BDA4F
4614BCFF8AB1B76D2E4EC7F21856C039E8CA75E887D94F45B85F3948306B75C9
2C4E628550701F664C68605CA7FE67BA091CC6AB6AB62E76F69E0BF318AB1CD2
8AB0474DD3111E035B1D58A3A6F7F2EC223347BBE39572A3F3EB281E2396C305
49D8E4EAFB303BDEC31EE564E0C56BA213601DEF6E5A62D41ADB6614AD4F24D6
D31C9EEEE2DDFD6C7C0724EF2EF9F848050FA4D039DD850D0A192D081B9FD7D8
F3B3D6F433B568B7600BA5A37ECDA087F27D59CE9AA3594AF98FB3DE0428E8EC
213E5717CC611CE6CBE8FA619EA3A2E1677CE6043394BBFD969D9D1157C71A50
78A99FAFC2EBA839293368DFD8D67B9AE4C42A1EBA0E74C4818F4183AE7CC263
17EF76F88D88E8532AD6ECE5FFFC739925000AAA08BE4F679795DEF08E1247CB
5E5C1F639657468DB7E11189B30A708FCFFD2E2FEB1E34A20B34B87FE296D82E
0AF205B23FA3FF64600BC5DA00F8BD0C2BB9CB46BE8F89D5014485D6D33C05E8
E2CD1343FB683CDC99E9B5A78CA1A3B8BA9C17A467E46BB5FCF82DF0454EA30F
5921DBDB00DD8A2467E53D63351E886B045F7274D27BB322014D5EFD5C10B03B
5FF5F8034A0A4A390A6C0973642856BD19843CD1B2596B2C46EC2F1B0BE98553
048696194B522B0D6E33B754133321B4FE2F2326FE4898522B584D2FAD4D75C3
E437D69A2FE0730FC438108EBDE8BFB44C1D8657384FC3C330E4D3F946860C64
F367DEAA1A9516B4EA0977FCAB91A73A6A2ACD1E2E44DE0B3837FF789643BA28
09FA364D0F1BA658DD56E016CCA1E4DB4A84471FC8288A3A90464DDC02E3AE8B
620306835FAAA6AF1E74E2A0F06DFD61C6304F705F3DF23FEAF1F73E642251B4
CAC829311C0B67BDA2958CA5ED1A5E1765C22F7D33635ED6ED4783C36C195AB1
CC9C1656301EAF3F611E0A9FBEDCF78C6331072253024377E9C90EB229D9934D
F88210A5C33C3E26F4D5F0D929EC6A2E0D9DFBDC28DE914E8F8DB78A77919B44
45F437A58770F7FF5F8EDA75F1FC87C54C33223DB0E1E8B32EC03073C8B47F66
C2F8431A704A8FD845B8B94C07881A397F1A169C767BCD4DB585FEACE2ABF771
827D525C14908439B3CE5B2472F0BB29CF30231761209550C8A1B6FD8563AA3A
F51B38A9282664CEF758B3B6C88FB4EFC284E7C5B31E7CA3EE042B5DD7833B79
AF0DA2646C29258D4D3D1BA8A543B2B8F393853EA0F11AEB90ABD3FB4F2EE5C4
3613A54A8BF88547FE0454DBA3AFF19CC53182CBAA5351C1190E04762B8B4AE7
3350C33C8B3C3BD359DD580C01A824842D344CE38D52BA4FA9C6FB3D9885BC58
06335E606F670C7F356C742BBECA9C51B157BAADB06B65A22B4DEF75FE6D2BCD
0C767DF87D64C4090CFC78EECEB34C48316EFEEF506DD0C8476C45ED4A730B66
F160BF69C0A364DCB4A647F6EFCB630A03E20BCD322266F91EAE3BC5B70F373A
2562760514426313FE95BCD3B077501145795201FEB9FB0941A18A185C589E09
A47C1D5F0B6071178DF0120E7F41C9F1EDA2A7D7AD855ADF43FDC0C5957075D4
CBE39402B5F58B99BA4DB2F7051FB0FFD9E3B89823ED0E62D280F621AAA7255D
98541D52AA3577A429E3C460C9D0B47772DE42EF05504AF96525A2283B586870
FE655DDDAFBF5D15884D7DE4C4EFDD7A19BE5B74CDC2D181AD7F6FAF69C2EFD5
F4A9581C368F32F4C33D7673D987EFB01BABE3072473379623002E3FB274F47C
6B11E5FEB18764DB8C2CD2FA8548AF0BB009FD0760452BE29BAB0ADA91629411
9B0218FCA8977ECD199253D9A9698DA4D1AADFCFE30F39577614C29AD068F06F
275261B65C6AF754E848801430B71830C92C785486C157833714742CF6745CB2
156119EF3A048798C154CA1CBC5A23ADCA0781ABD2F217D6500879F5B890ADED
F982B2C028710A57039D0F868BA09792CE691AB55E62B2C152A056DBF48CA263
5DD72C79569B9414FF8BB68523F86303BA3467E7689A1AEAA94048E6827561A3
62A24C0E5DF0FF5CEBF075A2B9655252D6B99E7AF3CE0CFE7D19A583FE9A7911
2C3DE34EDE730F34B7547F7F6E6B55D4EA516B6166D7CDD3119542B181D29432
67C158647D0154855016DD9F131B117C8163D9F136FDA52A28554EEE76D79D95
1DCCCB8276A68441E9DF40FB603327B3F81D734440558A5409A1CE1AC7538AA2
2A909BA41339790F091D701459AB7FCD04D2C04D167601C7588CE112A6D2ABD4
EBC36A86357D61463AC4E0DF94245185A043A4A32E103F84531646FACAAF72F2
CAF56E59B4BE8BD304114C9E07C54BDD753DDF57765E9E304317FDBA1308689F
A9F8E5900FE0081A33E2658467295D432FF8AA96A02F03E86AE64E3EAE937F5C
A65280052E406F9936A8A0546225D41BAF75C2FC7A2A38D5FDD7AACE1BAE061F
071AD89732BE2E927CA797360627F5626C2F33965CC6DA7F7A4620A9DBE17DD1
798E97AD998D47DC30EA3D9E2BCEF721AD987A5AA78B6B8103647A14B41F7500
0323CBCB3A6D39154B4268A55C4E133675D74527BB49615EF372CB9CFAF7DA3C
67C966BB052F73A491CDC8CD63D7099E88E2E1D35D6BC2EA5960F3C55AADBB19
6431A4A461077BAE68E8A1343ED8EE5592AF8DEC605ADA62142CC449C751723B
98E72F4C56721034FD024126785DE91C228756971BFA0F9EC360B599AF37A79D
400A71021A9AD2CC972E3FCC05813BD7F785BC7ED79B6E4379005D8E23F967F5
AE4B24913EA67A1E9A49C5275E66B1B614B077C64A111E7EC57F9ACE7A263AE3
FC69D75AC2B36B199ED0AAE1BBAED9D40BDD7B5E04C9DC789F3E798A392736C7
3D8C276EEE35C5F63A6FD92632C225E4E592F140F60D97D86783E65DA6A29895
466C0A35846B83ECE8F45F00CE51567871D6E35F2824516E04CB3A9438AC4A54
EA329E382E024B71A0513234E9038CEFC41BA172A282F1ED00E603FA6FAD4F7E
B93E9CB662512955D5AFEDC941272B0A6D3F2F383FF5603F4D7CAB8AF75149CA
899AC290B390CA4CF70F8E2F576CAC15E3E8456BA285271AC60FFAC7B1F30C78
ADD92BB9A95E1691061E7974D5F00C39FB644792DACEBF750BAAA20B68DC7910
FC294364DD63691AE83945BA7A9AE42D42D54654C16419058C59F54017203BAA
F23BBF23B27B2DF046F3B3A2827CB9EE9219A37D3A693E1427BAC9F2F8B3DC1F
356DCBEDB0D20F1FD5D3C74C489ECA0C9770018C42E6EFE6024C863FCF1D4F34
67D9BC99B3CE6F59E40FE3D475B89BBB434772FC31C451136FE49FEBAC79E925
17F39B964B50E417DEA32FC28E3D111780ECFFEDFD52B56904E55CBE30265A67
6E95BA1398F0BE26D6F90207E578E52C32237B2581888D8DC9EAEEC0E77F469B
D5E065BBA7B5C92D5495F4FC5D41C815ACF23E6A09CDD33CE4192F6F699B6982
AC938F58312AC6415B74D025290C12CC4E3B08C3296B52AA96B595E427AFA07E
0C1FCB17EF24F3F9138C49339BB4694C123922E4E07C22C7DB85992FB055DA84
13141384F3435A5B7D9D3752ABB08BB878AB665A985C9EF1738C2A65C57F8C96
8D446D6EE42C665CED8F340B017C930892DCE0B52330C12B501A98A52D2F7702
98C023D2D201ABC2BC9C887570D002A022188A06B435EA591FBD640507DC49EC
9B96C00663DCC78956AA82D65DF243BF9AE9BF822306262B3F038971CD74ABEF
F2F3BC146F9F21C44ED5A95E1B773E8935FA331518EF0A471E4471CDD17C7E74
4C4F7E3A20470ABDC4E09BF7F820B31D6D8713F7F4329AD798DC75E935D03C62
CA5AEF41DBDDDC30EDEC1714D6A40082C97F25FF25EBD6679F626E4DDDFD1380
D6B8F3B34539C6765AB0CE32B4AEB6B72F304680C27CDE2F28FAF823B5CC3A47
26A5FBFE71C6B09F82A3BEC30BF9AEF10D03B2BE9377995326262963DCF66481
AFBC2148133A65CE8A6C134A18BA7380B5FC8D82AC6567680DC0A4C2F3763BEB
49C2D66F7151497D19060E7C2AECA0DF82D2E79125F605B4F1518CCFABDA2446
C7EF8D6F006D048C4AFBB6F5604A881B40B2AA7E54DBC01500642A1207AE194A
2EB640F2E213F2875956DD5AD46A843108F5935B19C064D71DA36817AC1F951E
005E4AB9260D2C4641F841FE0D793E76F9568FBD987B3664E9A0E1A1D669BDE6
0E820C4C1AB448FAB88BBAB5E0BBC572F2AD6B642DA907D66208013A2E64DE32
F644D8BB47720DE2E8F428540348EB6BB204201334B98A9766AE0AFA5C029141
6431B7C71D31E5C1506984DA1C17216273C019AE363D7A872586404998838452
DC37C4A059C0D898D0320401EEE288265B8C632B9DF86A1003272B73EE84C59C
67C23AB57254999A9C1D8EA15444F051F088915A9E7310DF3B2C53F5DAB26DFA
D023391089E62D36B2C51745D4F94520B5D642C8DEFCF6B67A066C205154CCAD
4F2085BF019C2CEC73711AFD23F25C3DDD6B0B80A3ECA586E23EBF003FBF8A6A
DA1294EBDDA32A6F343E7BAD16377906317A1389F033781C727F14EE832B1089
04036C0248C73B1FAA6F7A30494173BB3B1E33F80D335A949E7E8FD362F68C51
3DF82E1488877FAF77824785515583A939B362B442B94C92E3324FF1CC280F47
AA8E09EDD886F5A2C29CEACECF53EDB81A6E2CC113455B7F2C6E791BDA74636F
BDFB2EBC0484464F70ADE4F036C4FD03B29BE4DC37B30A65512F64E16206C162
161EFFFCB303BF3AB4314E07CE640FCC319A2B64564ED0B6A26E6EADB0DA7581
553FF0B8632F9E0CC3602195998EED0AA1DFA64396166D97EE97DF97F8AEB0BD
561D2D1236717122066B8B9546F42D29B70763B8092DDE1E35DC06AB902C464B
B90EF5A02EC5BACC517D009EF061E8F3B849CF20D9AFC361E759FAB35CDA0DA3
DD5C2683254E92834BE8C35A20C83BC6E87866BE012DAE63F64DDD95CEAE51FF
C6A922BEF4A5A10BCD5C1D39E3A17E71D5ACA29540D387037F270031BFA48C14
1A79C7ED327A12A5DE6085B65B4BB30564242B9F793E4C85DBE077E70778E3B0
EE9B8808A9142B122BC5919A4D2601457CD9CBC6E4B63E43BC9E59E3B616CCB1
86B8E1630E1691D4142715CCA44B66017138CCB657EF340D506296EAD592F028
303AF55E0445A499DBD71F32AB1D3C0CEBF62BF00D8DC0DAB455AED0B91E4D03
CCB2F36EE442BCF1A8B9C792614CEDA618C66B0169FF3964EA15F9D9BABB2225
59E142EE1A430704FC4133D22C6FA28288357848FAD13ECBFE865DA430A611CE
0166BC087A413650D8064AEABAC5FCEE3EB404548988967621ECA18C9D7DBFEC
93B44F930169133C3375C610424A5B7EE41D5B4275737AFFC12F74BAC3E493C9
1960671D321C288AC9C5F3566E62FEB1A7196F1807B58567A55A9DF5E98C228A
B4FF2D47B14F775B52CEADC40F41852873B2B0DF1196AA1C65A39015644D6FA3
6A7417AE030E025F7C2AAE3D5DB56335BA2453F2B891288CF3705FA78FB54158
FC1E064CE5F78974CA0C772E4356D835821142C5BDC4F1B01EE014BF559CD1AF
7D05FAB4DAC5373A6D2E83D197A48A4CABC554B01079C8DDE3B9F6F3120E95C1
67D2B2E573A63E5D0F8A9BF31545AB5A6F582F652131AEFFEE21A8684CB3722E
7D03C83818749E413CA4862F31EC37A18995B6D9D934B1BD5F7759BFE087997E
CECB530ECFD68680E549202AEBE00BC3E32798B6EE42E96FA3418CC71C274059
A0778AC5EA5FF6D0992421ABD63725310EF8CE3015CD02638B7C409552195CF7
E35927FFF2DE2E5B3E963C76388F44E5C2A3B520714DD9981DDD5ADC949D8DF4
BEA93A06C885BE94C468E66F5C0EEC9CF1A1AF4513558F46BCFFDE00EFB3CDA9
1CD70CE79E2A8BFE159D934107D8A4E995CF7042F9CC4C0B37E9D27FE41CDF01
12C8E8F81D7EF3977AD4FD8602B4EBD197E7970EFE582B94C9389D20233701B2
7FB64370737347FA62CB3F8ACDBD9F43E56178F5AC4BC4680BE059A38181FFAE
84BF69FF5BA129E10C28EA51B020DF5D93B92C6C7240B23E150185B6923626B0
E4383C2E7DCB7B43E1876886E8E7DF665148AEC66A6243F42A0EB4EA0F908B64
D5B0077083237297E6CAF0BB29AB1491212657D11D9EEADA3F97B071B76D79E8
510A7457457217187927A9B572C396389668C025127E7CC2982A9B6ADEE6AB80
281C2DAED272239FB9756DDA8A370ABE5B76E77DFFFD41C97D214760B2661E32
99EE4571A792036D5700D28B9730B913FDA1684BBA4AC7796974769E46925248
7E8FE16D7F384F97980F9307F4B6D97F87DB1EC70A3B92313C397F0A208E6B16
5DAA1EAFB7672471159146A95EE83020B5DD6928D32419CEF6AFF04D88C96F3D
24D6E4FC0325737A1BDB033CC5FE3C1D08B6B03941E0809FF885E32A60553706
6B43504800EB70A75822121CC7FAA62DE8D129807E89546E5BDCB55B8FD9E59F
423CE879C6FFC963011FA8EC9318FAF36BF07045D68DC16DC99CDDC7BEB9CCB5
FA06F77090B20EFE76C06D6CBA0C9A502991890BDA0170F7E3B0B6D8EE2B5809
F53723C06FD0C1BEE2FC844BD02B19C55B2F4CA66C2688C82A927C3B936EC4D8
E326F04F50B8A837E190CFA8181730A3531D9BD74F81A3D21260B14315DFE952
0229A9FD19A5AE169323C6B6A7688EBF9A24151C35EB7044C5B839E81327E830
122F249DE856E19501F20B954466C7032C6FD372E5F8F98F3FDBF9761342D660
F326C07C060D277A8C6B73511218A071CA8C52459866F698AB13700C8AE1969D
1E1A88E39FA77FF623A06FBC071FFD9EDC7626505003F27501753CF6F4727FD4
337D54ABE0AA759C21526ED1AAE2CD25FA3B9762AD4ACA7069C6D3F97ED73840
E57BE38F4DFA815E1F3765398A96C80A659108592B39F455821EA38404DFF5AC
75C027FFD21F302B6D63AC60E5E33320CB515C413D295A4DA42008478DD9E547
5DAB6DCA882EF326CF264C8E3170C93C0BF5EFC8529A4176D83E1506763177CA
8A9014B2A6E52745B5D1EF3F2DF8CBEAD8C77F2265041886D154643677B195A5
FE3FE9F7FBB6092277AC2A5786DDFC869B2644463A33FBFAAE8159BFD866DA7E
65F6DF89633DDCE9766DF2EC9428E9C4A4A5F88F1110541724EB1817F42FC4CA
E100BEAA9A85E12F0A0CF56FC524CC4D75A5512B5D8A20FD544E48F0498EEF31
93067EFC1BDFE66C99F0EAEBCC23E016E087EC88C2F722C8DDCCE2D2B2B68739
B57D3F14799229E027468B67116884328CAE9B99136D4A2960DFC05A4B2EF982
A7CE562A5EDE7249D7DE76B4F61200F73E9479B53135AC4FB61ECC7B328F28CD
1D7E1EA07F06F982D97FD6A16E7C3AB5270063FF6B15071FE407379EDB5B16F8
F74FC15A843444ADE14B96F5C456F2127E5A25FA4D72445295146C75ED4A863B
F22201B382A4C5B363564DFEC3995682F8D93603BAEE349895B73FD94D7F6013
DEFFC6CF7BF0B4DFD539867E32FDB9AF20D6050905B62B3F558879E5699C9A93
0BE20AAF5D4D78BC5918242DE7581CA5E5B9EAFA7B81DBB050727D915AC73295
914DCED64F248F6EEAA2FBC67498683F728FCFB516225C2F2F77301788B625B6
2DBF24EA5726A45737C378B85C7B7E34E65A58E65B0C3AA738AEE27D631AC677
0013B7943B485AC979B947DF185A328AB9DCCDA86862BA6EC33B5A103CEC9193
5979AF1B631790EF55A0AF208C78083F1D2B00788ECE40543199CE87E8B9A83A
9E7955F2E99018982906E91825CB528F8B39903D728F826FF59C0131BB188C3F
C10EB45B1AFB728C763F475E18A3501C33AF145421FDAB3EA631F44E629DF1E6
6C73701650865FCF655652F6ED5AAD4E18A1518BF2DEA52DF8E9FCC66DECA7E2
E353B7C138512F27741CECA6F2956B98A14C2BF7B045E0CDEC8EB0B29ABCBA23
7F2A60E73EBFF99159D770B455B1B2E5E81D3AC401C254C94E695A579304151D
99D96C3EB61968FB19D6B29E6835B1866EC99C82689B3694CC7D61891566B4ED
7EDB3EE87951970F488F94998AD34127D8A7F64EC29DCE02500FD6DD5BCADA57
4E426CF84B3FB85B224B8F7753768C32744B7286D25AF7DA08A2C13FEBEE345A
A680CC0213F690FF2F59B9B6F9A25F648AE4EE73873295B74085EFB96CC2DF86
57695ACB91387BA3C0595B6541C9DBC63E6646231C23DC0EA9E10C18551BBA7E
0674E2C2EAB158B6FB16BD2B741BF149D3AFE6260F40ECD8C4FC920FD3248C35
E5AA38915CD7B0AA4B3691C7E7DA9382114D8E55320EBB821253CFBF2EBC3C75
5D9EEBCEB7DA9166EC16074545E4310A0DAC3FDD96D7FC58983BEFDE5321C746
623D0DB2EE4E051440221A8AAA48FC26FB50D896F492E54BC3C69F52F43E6C9E
4A96D27820157E2FE1FA6C657BBC5BC2903560AAB98CF384D88BC04CA848BC65
7332C06994566F5CCE36586DC908A352ECBBD5D96956D7430879E1BF0F2DB3B7
9A7B6E4ACC264F4E6BEDA75EA60A50CAF4A79BB62A3F9153C591108514E011D1
D6F4C960D01E56D959600E9DF9EA5C9CC31FE075F6A9CB37E887BF59F0DAA841
16E012E25437F05BA262B5ABDE8C7C82147DD2784E937B711D5E2F1489C81271
11497FEFF95F224CAB0135A6D94BD63502BC47CF294C026238C0EDA0B520844B
29AA29730E688861DD6E9C525FA43E24CDF08C8C177108C055302521373E7CC6
A71E9A1104E5C52CB08DFC32C786278C8CE43F511720918E860F5773280DB3D5
811F5368A989967CB97024C55A427AEE8840DC5C18ACA793B6308B605CDCC490
B7E8C7EB5F2E1D62BABC34D336B7629A1ECB563D4909081B1201E5DBDE8CB56A
64E4E09BAFB3B8339D75783AAE65BEA9751F5514059FA62ED6A46E72706C51E5
E387651CA8CF516695CDECFA5AA4BB868512264233514256AF0725CDB0FFD911
DC71BA4B22D7507D8CB07B76E87453F3C81D63C23A85E439FE577722660BB461
2C89740754BB7F7B13CF404DA9BF1586034F4435208F936A1015AF245DB5E6B8
48EBD336D17A096935D6C745918C1D952659C3628C14504C1F4E07F8CADFCA0A
5191F1FD532EF4E5AAE0A8170D693D2999B14C12FE7C680D58D8DD67B51C532C
96E8898A5150DF8778F7553F588467173255D22E8AF1807EF79BB9E6DDC9D77B
8220C08D2B428772E5CD27B57B902AC647A3D94247CAEB3EF82AE22269D1E0F9
3D952ACF64764B792C11CCFF795C0173A74F8153E5F01C047F06D3B5C176086D
B1858E3A4E5F38E8A747FAD42ACD5D20B84138B959B5DD395CB038522D6E6600
7F5B27DF34278FB53D4973FC64852DE785A6FED8208BE486216257956DF9B561
7B3263F1C88E34D1C77CDC4F28F88DD1EC4DD311C5F88BF470B4894D7C3F44FC
4BAD909BD620D0890DC7902E3AACD7168489564BE90E88A32AE3D58918581378
D11CF3443052D434EECE7D98926E74411A4E7D66D4B47194DCF1B7C9C8A30C90
B3F67E36AB6BDE10F3507BCE1F258C2306486408A89981D4E40F4F1030D58247
DE6ED8D91F32475E07EB98641680028E51338E144BB8AE88AAB1348C6CED1B08
89BDC082794DCAD95D62912E2BCE07B98D909D837CA6EFC49E568043E8D7E12D
A2B2409D45577EE0A8E3BAEA4D7C42ADC93C5F86EDB8FA58308836510ED23BA8
3C3E8506C65F0B5239699B71CB4328B3595CEC3ECB5852B09F99380745A80260
CD84B4132C7EBF5B151DF33577AAAEAE6E3C333C11BCF29D9945C308E1E43461
FC854398FF6E617B27A9FFCDC294CC254564D035CCEEAE11FC4BACB0C73DDB5F
7A3E547102E575106D60CEBFE8E73F71C114DA4964B54CDE698E946AB0757AFD
95C53F75913AB5030C919F549C29789BC042758552848B50E95B94F8CB2E6067
7D27A31B5F6FE09E18DA9BCC172A7FD5C53F91E4659CFF8D71ADCA07D20FD29D
DC50A52DC39EC8FAE800DA780EA58EAA58CC4772EB08C6417652695BF81884C2
05963C6708659C343F8E8A64E4CA15BC36ACB44E43CCB3BBBA0A5045E3A34D8B
53AF8FAA7956D34CCBADA00FCEB244DCE56ACD710CD843D766AD003E108A4823
7B236F930C14AD1D56743FD5910FC88CCD6A808A94D0A1F95D2E2E87FCB48684
D78F13EAAA3382DAE82224B61112C98E6039CB1D752B2A9AA934957F49CF8FED
BD284971A2EC59B2E128E4D03A6FCEC5938700E9E0358D1F7306A3D5159B5634
B9A6AD7C9C2AFE77954A71D068148BB1E698FFD76994C94F05525E68BE6F4C1F
29549D1410D6BE21C2E17D214F880B5E5C2D7C4E6AF91BD8C258BB045AF63C3B
F364131810A5374FCADC41DE89143B9B8256988047011E70880A8AEDA89C1E4F
6C1C26AD47025D56EA9CA753AB9D1CBD03BF2AAFC56D0DA2CD6F49F926A096E5
CFC8B7982392151693249F18490315F1E5318E3AB75F2A70EEE84377783B90FB
BADBA1626E7DBC87D5B36D8B9F0597E88494765DE10E8E412251E185D450E257
CA18E86DBFA9967CD35639705A53AD3404BBEBF672055C4E43D00EC67070DC69
CB8CBD3B180114F30B74290CF1AF6D28277B945E7E9B3CC0C9CC22183C5C6B0D
783C14F9F2C8EF2F6DDD2098705465E4CC14CB2F3F28C5209C9F3DDD6C173F66
DB8EF632AD0BF5CA6F5E8CC1FA9C85AC12938B224FE9B95412058BE2A781AE64
9D52F815F2E7DF53CA3F0C2BA1C6E733A20BF30F92C025430BBA69A7BF0CA1B5
068091A29310F2B8FF13C171D4F18DC89DBA1732A05ED788B19CF0B6ED54CEE0
8597F8A452D3F0F997D8B8F399C2038CEB7E4C6269978D9CD9F693BB2185498E
B6605C3236952E02880F8F0E9CF2682B8F8788F0D403116DE1AA93D3D19C201F
523DB310687C9E89BDCE83A8BC7F83A6BE8376450EA2405F1E62B2FD03F940FF
C12A023D2309352791F8C8DD48B21C71BF50E18A9186FB640A8B7F7A53A1ECE3
14C92361593A4FD6AAFAB5D6F2C76DABF89C7DD0EC80343F8DECD0FCA0DA7D32
CC50D91C16D2A8A1F89AA433CCC286A6B8560A64545246F420F53C019CBC119C
B3230B9B72DADD63A1F068E103B0B513D7A2B0953F81406627CD10794E5429A4
E1B4EC75E7458C6660F0E0A2D91DDCA57D8B0D70A5B1EC8886B60689AEE40F3B
A6D0D980BD38CD920B354377CECC909AE530435A5AFA6CDBD875DDA91AAAD89D
A167063C5ADA6DB8A7F573BC7E2D3EEE9F91DD4DE087D3DD7A1183C7BB9952EF
141D9A235FECC10BA1388426694D700934B3B6A2CB19A21B84631360883B3598
6601929D318DD3723F9A0551CC54C45B02BBA1FF03DC9289C26B6784EDAFA937
ECE9915A31BFADF16E402FF5A076DDBBB8D87D71AE7DB6C3318A03911C6840AF
A2E518DB162BD5285C80F68F9BA331B9EC13B7220DB9E6C78FEA837E6A6CA6B0
191A11B9486664A26D4B158EBE597933F30816B596DC24EC2B5E11E17BE41177
52FCBC0FD9C6999D339DA261515C42F96A30B6A0C674F206EC286E4243D32EBE
EE8AEBFB74019D03205BCDB120245B0656EF1D2FA40AA58FEA38AB56B29BBF66
0E5241BAF6B378FAA21C56604F0FFE2AB42D5125794D1B9619170C876B3909F6
C2E75FF4AE70D56D45AC4F06EFFB7A3E40D61410D9EC7AC75375B5C088FE4F9F
B536921FDA06373F101A0EF760D2CED9B58ECD5BD8CEFA50AB73021E06442F46
0BDD1EB3FAEE9A56326D8C9451337CA2ECA6481CF92E104BFA3B0D8EBA1468AE
269286E3CF09972C5B476D2F436EB9B82DF4EDF5BD2114D414EA65598226876E
EB5650651A9ED44E6FBFCB6E1BBB88964A0821DC1421EBD629558E84C3EB769E
839BA6C79A15014A779938276541122D68092BAEB8C58DA32E131C1CC4A1F549
8F413CF418D67532
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (main.dvi)
@start /Fa 205[30 50[{}1 49.8132 /CMR6 rf /Fb 146[62
30[56 10[50 8[20 58[{}4 66.4176 /CMMI8 rf /Fc 230[71
22[71 2[{}2 90.9091 /CMSY10 rf /Fd 139[33 43 1[41 2[55
80 1[47 6[47 13[53 2[56 1[72 6[50 40 2[58 2[65 1[68 3[45
1[25 59[{}17 90.9091 /CMMI10 rf /Fe 133[50 4[62 44 1[46
5[31 2[31 3[51 1[50 1[54 26[70 19[56 56 2[31 26[56 19[{}14
99.6264 /CMBX12 rf /Ff 158[35 39[35 35 2[35 2[35 35 35
48[{}7 66.4176 /CMR8 rf /Fg 133[37 44 2[42 49 30 37 38
42 46 46 51 74 23 1[28 28 1[42 1[42 46 42 42 46 7[68
2[68 1[65 51 2[62 3[57 1[48 4[62 69 65 1[68 6[28 1[46
2[46 1[46 46 46 46 1[28 33 28 24[46 2[28 2[53 13[{}45
90.9091 /CMTI10 rf /Fh 134[71 3[75 52 53 55 1[75 67 75
112 37 2[37 2[41 61 75 60 1[65 14[100 4[128 3[50 3[88
103 9[37 4[67 67 67 67 67 2[37 45 25[67 19[{}30 119.552
/CMBX12 rf /Fi 133[46 4[58 41 41 43 1[58 52 58 87 29
1[32 29 2[32 48 58 46 1[51 27[69 16[52 52 52 52 2[29
35 25[52 19[{}25 90.9091 /CMBX10 rf /Fj 166[68 3[68 66
51 67 1[62 71 68 83 57 2[33 1[71 1[62 69 66 1[68 6[25
4[45 2[45 45 2[25 26[45 19[{}22 90.9091 /CMSL10 rf /Fk
152[38 23 34 43 34 43 38 97[{}7 74.7198 /CMR9 rf /Fl
129[45 3[40 48 48 1[48 51 35 36 36 48 51 45 51 76 25
1[28 25 51 45 28 40 51 40 51 45 11[68 66 51 2[62 1[68
83 57 2[33 68 2[62 69 66 1[68 3[71 1[25 25 45 45 45 45
45 45 45 45 45 45 1[25 30 25 2[35 35 5[45 9[40 4[45 2[25
2[51 51 12[{}62 90.9091 /CMR10 rf /Fm 138[129 90 92 95
2[116 129 1[65 2[65 1[116 1[106 129 103 1[113 19[220
7[153 49[116 19[{}16 206.559 /CMBX12 rf /Fn 138[108 75
3[108 97 2[54 10[94 29[140 16[97 97 29[97 2[54 16[{}11
172.188 /CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
183 447 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 183 447 a 183 447 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 183 447 a 183 447 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 183
447 a 183 447 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 183 447 a 714 x Fn(Cap)-22 b(\023)-75
b(\020tulo)63 b(1)183 1576 y Fm(Errores)324 2021 y Fl(Holaaaa)560
3447 y
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 560 3447 a 560 3447 a
tx@Dict begin  { 0.0 0.0 } PutCoor PutBegin  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 106.69778 0.0 106.69778  
/Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 28.45274 106.69778 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 14.22636 103.85233 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 92.4714 0.0 92.4714   /Lineto
/lineto load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 28.45274 92.4714 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 14.22636 89.62596 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 78.24504 0.0 78.24504   /Lineto
/lineto load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 28.45274 78.24504 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 14.22636 75.39958 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 64.01866 0.0 64.01866   /Lineto
/lineto load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 28.45274 64.01866 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 14.22636 61.17322 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 49.7923 0.0 49.7923   /Lineto
/lineto load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 28.45274 49.7923 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 14.22636 46.94684 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 35.56592 0.0 35.56592   /Lineto
/lineto load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 28.45274 35.56592 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 14.22636 32.72047 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 21.33955 0.0 21.33955   /Lineto
/lineto load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 28.45274 21.33955 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 14.22636 18.4941 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 156.49008 21.33955 128.03734 21.33955
  /Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 128.03734 21.33955 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 142.26372 18.4941 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 156.49008 35.56592 128.03734 35.56592
  /Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 128.03734 35.56592 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 142.26372 32.72047 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 156.49008 49.7923 128.03734 49.7923
  /Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 128.03734 49.7923 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 142.26372 46.94684 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 156.49008 64.01866 128.03734 64.01866
  /Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 128.03734 64.01866 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 142.26372 61.17322 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 156.49008 78.24504 128.03734 78.24504
  /Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 128.03734 78.24504 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 142.26372 75.39958 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 156.49008 92.4714 128.03734 92.4714
  /Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 128.03734 92.4714 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 142.26372 89.62596 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 156.49008 106.69778 128.03734 106.69778
  /Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 560 3447 a 560 3447
a
tx@Dict begin  { 128.03734 106.69778 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447
a 560 3447 a
tx@Dict begin  { 142.26372 103.85233 } PutCoor PutBegin  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end
 560 3447 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray   106.69778 21.33955 2 copy
moveto 2.84544 .5 CLW mul sub dup 0 rmoveto 0 360 arc closepath  gsave
0.4 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 0.0 128.03734 0.0 128.03734
128.03734 28.45274 128.03734 28.45274 0.0   /Lineto /lineto load def
1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray   0.9 true 58.3282 103.85233
98.16187 109.54323 .5 Frame  gsave 0  setgray  1. .setopacityalpha
 fill  grestore gsave 0.4 SLW 0  setgray  1. .setopacityalpha   1 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray   0.9 true 98.16187 66.86412
103.85233 103.85233 .5 Frame  gsave 0.4 SLW 0  setgray  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray   0.9 true 98.16187 24.185
103.85233 61.17322 .5 Frame  gsave 0  setgray  1. .setopacityalpha
 fill  grestore gsave 0.4 SLW 0  setgray  1. .setopacityalpha   1 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray   0.9 true 58.3282 18.4941
98.16187 24.185 .5 Frame  gsave 0  setgray  1. .setopacityalpha  fill
 grestore gsave 0.4 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray   0.9 true 52.63774 24.185
58.3282 61.17322 .5 Frame  gsave 0.4 SLW 0  setgray  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray   0.9 true 52.63774 66.86412
58.3282 103.85233 .5 Frame  gsave 0  setgray  1. .setopacityalpha 
fill  grestore gsave 0.4 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray   0.9 true 58.3282 61.17322
98.16187 66.86412 .5 Frame  gsave 0  setgray  1. .setopacityalpha 
fill  grestore gsave 0.4 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 560
3447 a 560 3447 a
tx@Dict begin  { 78.24504 106.69778 } PutCoor PutBegin  end
 560 3447 a 541 3521 a Fk(a)560 3447
y
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 560 3447 a 560 3447 a
tx@Dict begin  { 101.00732 86.78094 } PutCoor PutBegin  end
 560 3447
a 476 3473 a Fk(b)560 3447 y
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 560
3447 a 560 3447 a
tx@Dict begin  { 101.00732 44.10184 } PutCoor PutBegin  end
 560 3447 a 484 3463 a Fk(c)560 3447
y
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560 3447 a 560 3447 a
tx@Dict begin  { 78.24504 21.33955 } PutCoor PutBegin  end
 560 3447
a 539 3405 a Fk(d)560 3447 y
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 560
3447 a 560 3447 a
tx@Dict begin  { 55.48276 44.10184 } PutCoor PutBegin  end
 560 3447 a 602 3463 a Fk(e)560 3447
y
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 560 3447 a 560 3447 a
tx@Dict begin  { 55.48276 86.78094 } PutCoor PutBegin  end
 560 3447
a 602 3473 a Fk(f)560 3447 y
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 560
3447 a 560 3447 a
tx@Dict begin  { 78.24504 66.86412 } PutCoor PutBegin  end
 560 3447 a 541 3391 a Fk(g)560 3447
y
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 560 3447 a 560 3447 a
tx@Dict begin  { 128.03734 0.0 } PutCoor PutBegin  end
 560 3447
a 602 3478 a Fl(Name)560 3447 y
tx@Dict begin  PutEnd  end
 560 3447 a 560 3447 a
tx@Dict begin  PutEnd  end

560 3447 a 0 TeXcolorgray 1654 5622 a Fl(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 581
282 a Fl(2)1849 b Fj(CAP)2669 259 y(\023)2671 282 y(ITULO)29
b(1.)62 b(ERR)m(ORES)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 183 1165 a Fn(Cap)-22 b(\023)-75 b(\020tulo)63
b(2)183 1584 y Fm(Magnitudes)78 b(el)-5 b(\023)-111 b(ectricas)324
2032 y Fl(En)19 b(este)j(cap)-10 b(\023)-35 b(\020tulo,)21
b(arribaremos)f(a)h(de\014nir)e Fi(in)m(tensidad)k(de)h(corrien)m(te)f
(el)n(\023)-50 b(ectri-)183 2145 y(ca)p Fl(,)36 b Fi(tensi\023)-52
b(on)42 b(el)n(\023)-50 b(ectrica)p Fl(,)37 b Fi(resistencia)42
b(el)n(\023)-50 b(ectrica)p Fl(,)37 b(y)f(v)m(eremos)h(c\023)-45
b(omo)37 b(estas)g(tres)183 2258 y(magnitudes)28 b(se)h(encuen)m(tran)g
(relacionadas.)i(P)m(ara)f(ello,)g(ser\023)-45 b(a)29
b(necesario)h(con)m(tar)g(con)183 2371 y(no)s(ciones)39
b(acerca)h(de)e(los)h(\023)-45 b(atomos)40 b(y)f(su)f(estructura.)h(T)
-8 b(ranquilo...)39 b(no)g(nos)f(deten-)183 2484 y(dremos)33
b(demasiado)i(en)f(estas)h(ideas,)f(p)s(ero)g(deb)m(\023)-43
b(es)34 b(sab)s(er)g(que)f(son)h(fundamen)m(tales)183
2597 y(para)k(p)s(o)s(der)e(construir)h(una)h(base)g(s\023)-45
b(olida)38 b(en)g(la)h(comprensi\023)-45 b(on)37 b(de)h(los)g(fen\023)
-45 b(omenos)183 2710 y(el)m(\023)i(ectricos.)183 3017
y Fh(2.1.)135 b(El)45 b(\023)-66 b(atomo)324 3227 y Fl(La)36
b(materia)i(est\023)-45 b(a)37 b(constituida)g(p)s(or)e(unidades)g(m)m
(uy)h(p)s(eque)s(~)-48 b(nas)35 b(\(del)i(orden)f(de)183
3340 y(los)31 b(pic\023)-45 b(ometros\))31 b(llamadas)g
Fi(\023)-52 b(atomos)p Fl(.)324 3456 y(P)m(ara)26 b(tener)g(una)g(no)s
(ci\023)-45 b(on)26 b(m\023)-45 b(as)26 b(clara)g(de)g(la)h(p)s(eque)s
(~)-48 b(nez)25 b(de)h(los)g(\023)-45 b(atomos,)28 b
Fg(el)g(di\023)-46 b(ame-)183 3569 y(tr)-5 b(o)38 b(de)e(un)h(\023)-46
b(atomo)38 b(es)f(al)g(di\023)-46 b(ametr)-5 b(o)39 b(de)d(una)h
(manzana)i(c)-5 b(omo)38 b(el)e(di\023)-46 b(ametr)-5
b(o)39 b(de)e(una)183 3682 y(manzana)d(es)f(al)g(di\023)-46
b(ametr)-5 b(o)35 b(de)e(la)g(Tierr)-5 b(a)p Fl(.)324
3799 y(A)44 b(su)f(v)m(ez,)i(estos)f(\023)-45 b(atomos)45
b(p)s(oseen)f(un)e Fi(n)s(\023)-55 b(ucleo)p Fl(,)45
b(formado)f(p)s(or)e Fi(protones)i Fl(y)183 3911 y Fi(neutrones)p
Fl(,)39 b(y)g(uno)g(o)g(v)-5 b(arios)40 b Fi(electrones)p
Fl(;)g(to)s(dos)f(atra)-10 b(\023)-35 b(\020dos)40 b(o)g(rep)s(elidos)f
(p)s(or)f(lo)183 4024 y(que)30 b(se)g(cono)s(ce)i(con)f(el)f(nom)m(bre)
g(de)h Fi(fuerza)k(el)n(\023)-50 b(ectrica)p Fl(.)324
4141 y(Imaginemos)34 b(p)s(or)e(un)g(segundo)h(que)h(en)f(el)h(Univ)m
(erso,)g(to)s(das)f(las)h(part)-10 b(\023)-35 b(\020culas)34
b(se)183 4254 y(atra)m(y)m(eran)29 b(en)m(tre)f(s)-10
b(\023)-35 b(\020...)28 b(T)-8 b(o)s(da)27 b(la)h(materia)g(estar)-10
b(\023)-35 b(\020a)29 b(comprimida)e(en)g(un)i(\023)-48
b(unico)28 b(blo)s(que)183 4367 y(compacto.)324 4483
y(Si,)33 b(p)s(or)f(el)i(con)m(trario,)h(to)s(das)f(las)f(part)-10
b(\023)-35 b(\020culas)34 b(se)g(rep)s(elieran,)f(el)h(Univ)m(erso)g
(ser)-10 b(\023)-35 b(\020a)183 4596 y(un)29 b(gas)i(en)f(p)s(ermanen)m
(te)g(expansi\023)-45 b(on.)324 4713 y(Es)28 b(deducible)h(en)m
(tonces,)h(que)f(estos)h(tres)f(tip)s(os)g(de)g(part)-10
b(\023)-35 b(\020culas)29 b(\(protones,)h(neu-)183 4826
y(trones)k(y)g(electrones\),)i(se)e(encuen)m(tran)g(atra)-10
b(\023)-35 b(\020das)35 b(o)f(rep)s(elidas)g(en)m(tre)g(s)-10
b(\023)-35 b(\020)34 b(de)g(manera)183 4938 y(equilibrada)c(para)g(que)
h(el)g(Univ)m(erso)g(pueda)e(subsistir)h(tal)h(y)f(como)i(lo)f(cono)s
(cemos.)324 5055 y(Se)25 b(dice)g(que)g(los)h(protones)f(tienen)h
(carga)g(el)m(\023)-43 b(ectrica)29 b(p)s(ositiv)-5 b(a,)26
b(que)f(rep)s(ele)g(cargas)183 5168 y(p)s(ositiv)-5 b(as)25
b(p)s(ero)g(que)g(atrae)h(cargas)h(negativ)-5 b(as.)27
b(En)m(tonces,)f(estos)g(protones)f(p)s(ositiv)m(os)183
5281 y(en)30 b(el)g(n)s(\023)-48 b(ucleo,)31 b(atraen)g(a)f(una)g(n)m
(ub)s(e)f(de)h(electrones)h(negativ)m(os)h(a)f(su)e(alrededor)h(para)
183 5394 y(constituir)g(el)h(\023)-45 b(atomo.)p 0 TeXcolorgray
1654 5622 a(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 581
282 a Fl(4)1029 b Fj(CAP)1849 259 y(\023)1851 282 y(ITULO)29
b(2.)62 b(MA)m(GNITUDES)31 b(EL)3105 259 y(\023)3093
282 y(ECTRICAS)p 0 TeXcolorgray 722 539 a Fl(Los)38 b(electrones,)h
(con)f(carga)h(negativ)-5 b(a,)40 b(son)d(atra)-10 b(\023)-35
b(\020dos)39 b(p)s(or)e(el)h(n)s(\023)-48 b(ucleo)38
b(p)s(ositiv)m(o)581 652 y(de)f(protones,)h(p)s(ero)e(se)i(rec)m(hazan)
g(en)m(tre)g(s)-10 b(\023)-35 b(\020.)37 b(Son)g(m)m(uy)g(ligeros)h(y)f
(se)h(m)m(uev)m(en)f(m)m(uy)581 764 y(r\023)-45 b(apido.)722
883 y(Debido)31 b(a)g(este)g(rec)m(hazo)h(en)m(tre)f(los)g(electrones,)
h(no)e(atra)m(v)m(esamos)j(una)d(pared)f(al)581 996 y(to)s(carla.)722
1114 y(Si)e(bien)f(la)h(masa)g(de)g(un)e(prot\023)-45
b(on)27 b(es)f(m)m(uc)m(ho)i(ma)m(y)m(or)f(a)g(la)h(de)e(un)g
(electr\023)-45 b(on,)28 b(am)m(b)s(os)581 1227 y(p)s(oseen)e(la)h
(misma)f(carga)h(el)m(\023)-43 b(ectrica)30 b(\(es)d(decir)f(que)g(un)f
(electr\023)-45 b(on)28 b(es)e(tan)g(negativ)m(o)j(co-)581
1340 y(mo)22 b(p)s(ositiv)m(o)h(es)g(un)e(prot\023)-45
b(on\).)22 b(P)m(or)g(este)h(motiv)m(o,)h(las)f(fuerzas)f(el)m(\023)-43
b(ectricas)25 b(de)d(atracci\023)-45 b(on)581 1453 y(y)35
b(repulsi\023)-45 b(on,)35 b(har\023)-45 b(an)35 b(que)g(las)h(cargas)g
(de)f(un)f(\023)-45 b(atomo)37 b(se)e(encuen)m(tren)g(balanceadas.)581
1566 y(En)c(otras)i(palabras:)f(un)f(\023)-45 b(atomo)34
b(tendr\023)-45 b(a)32 b(la)g(misma)g(can)m(tidad)h(de)f(protones)g
(que)g(de)581 1679 y(electrones,)g(y)f(en)m(tonces)g(es)g(el)m(\023)-43
b(ectricamen)m(te)35 b(neutro.)722 1797 y(Aunque)24 b(los)h(\023)-45
b(atomos)26 b(tengan)f(carga)h(neutra,)e(a)h(v)m(eces)h(los)f
(electrones)h(de)f(un)e(\023)-45 b(ato-)581 1910 y(mo)21
b(son)f(atra)-10 b(\023)-35 b(\020dos)21 b(p)s(or)e(el)i(n)s(\023)-48
b(ucleo)21 b(de)f(otros)h(\023)-45 b(atomos,)21 b(pro)m(v)m(o)s(cando)g
(una)f(.)3051 1884 y Ff(a)3087 1910 y Fl(so)s(ciaci\023)-45
b(on"que)581 2023 y(da)30 b(lugar)h(a)g(la)g(formaci\023)-45
b(on)31 b(de)f(mol)m(\023)-43 b(eculas.)581 2297 y Fe(2.1.1.)113
b(F)-9 b(uerza)38 b(el)n(\023)-54 b(ectrica)722 2479
y Fl(Seg)s(\023)-48 b(un)30 b(la)i(can)m(tidad)f(de)g(electrones)h(que)
f(se)g(encuen)m(tren)g(atra)-10 b(\023)-35 b(\020dos)31
b(al)h(n)s(\023)-48 b(ucleo)31 b(de)581 2592 y(un)e(\023)-45
b(atomo,)32 b(se)e(organizar\023)-45 b(an)31 b(en)f(diferen)m(tes)g
(capas)g(o)h(niv)m(eles)g(de)f(energ)-10 b(\023)-35 b(\020a.)31
b(Mien)m(tras)581 2705 y(la)g(distancia)h(al)f(n)s(\023)-48
b(ucleo)30 b(sea)h(ma)m(y)m(or,)h(la)f Fi(fuerza)k(el)n(\023)-50
b(ectrica)31 b Fl(ser\023)-45 b(a)31 b(menor.)722 2823
y(La)45 b(fuerza)f(el)m(\023)-43 b(ectrica)48 b(es)d(una)e(magnitud)h
(v)m(ectorial,)j(que)e(aparece)g(en)m(tre)g(dos)581 2936
y(cuerp)s(os)30 b(cargados)h(el)m(\023)-43 b(ectricamen)m(te,)35
b(y)30 b(puede)g(ser)g(de)g(atracci\023)-45 b(on)33 b(o)d(de)h
(repulsi\023)-45 b(on.)722 3055 y(P)m(ara)21 b(comprender)f(mejor)g(la)
h(fuerza)f(el)m(\023)-43 b(ectrica,)24 b(p)s(o)s(demos)19
b(recurrir)h(a)g(una)g(analog)-10 b(\023)-35 b(\020a)581
3168 y(con)36 b(la)g(fuerza)f(magn)m(\023)-43 b(etica,)38
b(con)e(la)g(que)f(hemos)g(exp)s(erimen)m(tado)h(to)s(da)f(la)h(vida:)g
(A)581 3281 y(medida)23 b(que)f(acercamos)i(un)e(im\023)-45
b(an)22 b(\014jo)g(a)h(un)f(metal,)i(p)s(o)s(demos)d(p)s(ercibir)h(que)
g(la)h(fuer-)581 3393 y(za)29 b(de)e(atracci\023)-45
b(on)29 b(en)m(tre)g(am)m(bas)f(piezas)g(es)g(ma)m(y)m(or,)h(y)e(a)h
(medida)f(que)h(lo)g(alejamos,)h(la)581 3506 y(fuerza)i(es)f(menor.)722
3625 y(La)25 b(fuerza)g(el)m(\023)-43 b(ectrica)29 b(en)m(tre)d(dos)e
(cuerp)s(os)g(cargados)i(se)g(calcula)g(median)m(te)g(la)g(Ley)581
3738 y(de)k(Coulom)m(b:)1753 3995 y Fd(F)39 b Fl(=)25
b Fd(k)e Fc(\002)2117 3934 y Fd(q)2158 3948 y Ff(1)2217
3934 y Fc(\002)d Fd(q)2349 3948 y Ff(2)p 2117 3974 272
4 v 2209 4057 a Fd(d)2256 4031 y Ff(2)p 0 TeXcolorgray
726 4276 28 28 v 0 TeXcolorgray 808 4284 a Fd(k)29 b
Fl(=)c(9)20 b Fc(\002)g Fl(10)1226 4251 y Ff(9)1277 4248
y Fb(N)s(:m)1418 4225 y Fa(2)p 1277 4263 176 4 v 1320
4318 a Fb(C)1375 4299 y Fa(2)p 0 TeXcolorgray 726 4485
28 28 v 0 TeXcolorgray 808 4493 a Fd(q)849 4507 y Ff(1)922
4493 y Fl(y)34 b Fd(q)1045 4507 y Ff(2)1118 4493 y Fl(son)f(las)i(can)m
(tidades)g(de)e(carga)i(de)f(am)m(b)s(os)g(cuerp)s(os,)f(expresados)h
(en)808 4606 y(Coulom)m(bs.)p 0 TeXcolorgray 726 4807
V 0 TeXcolorgray 808 4815 a Fd(d)d Fl(es)g(la)g(distancia)g(que)f
(separa)h(am)m(b)s(os)f(cuerp)s(os.)722 5055 y(Con)35
b(resp)s(ecto)g(a)g(la)h(unidad)d(de)i(carga,)i Fg(1)g(Coulomb)k
Fl(equiv)-5 b(ale)36 b(a)g(apro)m(ximada-)581 5168 y(men)m(te)26
b(6)p Fd(;)15 b Fl(241509)10 b Fc(\002)g Fl(10)1382 5135
y Ff(18)1487 5168 y Fl(electrones,)27 b(o)e(6)p Fd(;)15
b Fl(24)28 b(millones)d(de)h(billones)f(de)h(electrones...)581
5281 y(que)j(si)g(bien)g(es)g(una)g(can)m(tidad)h(enorme,)f(s\023)-45
b(olo)30 b(represen)m(ta)g(a)f(la)h(carga)h(que)e(pasa)g(p)s(or)581
5394 y(un)g(cargador)j(de)e(tel)m(\023)-43 b(efono)33
b(celular)e(duran)m(te)f(unos)g(p)s(o)s(cos)g(segundos.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 183
282 a Fj(2.2.)62 b(MA)-8 b(TERIALES)30 b(CONDUCTORES)e(Y)j(AISLANTES)
726 b Fl(5)p 0 TeXcolorgray 183 539 a Fh(2.2.)135 b(Materiales)47
b(conductores)e(y)g(aislan)l(tes)324 745 y Fl(Aplicando)g(esta)h(Ley)-8
b(,)46 b(puede)f(deducirse)f(que)h(los)g(electrones)i(de)e(un)f(\023)
-45 b(atomo)183 858 y(pueden)34 b(estar)i(fuerte)f(o)g(d)m(\023)-43
b(ebilmen)m(te)38 b(atra)-10 b(\023)-35 b(\020dos)36
b(p)s(or)e(el)i(n)s(\023)-48 b(ucleo)36 b(seg)s(\023)-48
b(un)34 b(la)i(distancia)183 971 y(que)30 b(man)m(tengan)h(con)g(resp)s
(ecto)f(al)i(n)s(\023)-48 b(ucleo.)324 1085 y(Si)38 b(la)h(atracci\023)
-45 b(on)40 b(en)m(tre)e(el)h(n)s(\023)-48 b(ucleo)39
b(y)f(alguno)h(de)f(sus)f(electrones)j(es)e(d)m(\023)-43
b(ebil,)40 b(ese)183 1198 y(material)29 b(es)f(conductor.)g(Si,)f(p)s
(or)g(el)h(con)m(trario,)h(to)s(dos)f(los)g(electrones)h(del)f(\023)-45
b(atomo)29 b(se)183 1311 y(encuen)m(tran)d(fuertemen)m(te)h(atra)-10
b(\023)-35 b(\020dos)28 b(p)s(or)d(el)i(n)s(\023)-48
b(ucleo,)27 b(no)f(se)h(p)s(o)s(dr\023)-45 b(an)24 b(desprender)h(con)
183 1424 y(facilidad)31 b(del)f(\023)-45 b(atomo)32 b(y)e(p)s(or)g(lo)h
(tan)m(to)h(son)e(materiales)i(aislan)m(tes.)324 1539
y(P)m(ero)43 b(la)g(atracci\023)-45 b(on)45 b(de)d(los)h(electrones)h
(con)f(los)g(n)s(\023)-48 b(ucleos)43 b(de)g(sus)e(resp)s(ectiv)m(os)
183 1652 y(\023)-45 b(atomos)27 b(no)f(dep)s(ende)f(s\023)-45
b(olo)28 b(de)e(su)f(\030)-40 b(cercan)-10 b(\023)-35
b(\020a)28 b(al)f(n)s(\023)-48 b(ucleo"sino)27 b(tam)m(bi)m(\023)-43
b(en)28 b(de)e(la)h(comple-)183 1765 y(tud)34 b(de)h(las)h(capas:)f
(los)h(\023)-45 b(atomos)36 b(con)g(capas)f(completas)i(suelen)e(ser)g
(estables)h(y)f(los)183 1877 y(\023)-45 b(atomos)39 b(con)g(capas)g
(incompletas)g(suelen)f(tener)h(m\023)-45 b(as)38 b(facilidad)h(para)f
(ceder)h(elec-)183 1990 y(trones)32 b(\(recordando)g(que)g(un)f
(material)j(que)e(cede)g(electrones)i(con)e(facilidad)h(es)f(un)183
2103 y(conductor\).)324 2218 y(Una)d(capa)g(de)g(electrones)i(puede)d
(con)m(tener)i(hasta)f(2)p Fd(n)2233 2185 y Ff(2)2302
2218 y Fl(electrones,)i(donde)d Fd(n)g Fl(es)183 2331
y(el)j(n)s(\023)-48 b(umero)29 b(de)h(capa.)324 2445
y(T)-8 b(omemos)30 b(como)g(ejemplo)f(el)h(cobre,)g(cuy)m(os)f(\023)-45
b(atomos)31 b(p)s(oseen)d(29)i(protones)g(y)f(29)183
2558 y(electrones.)324 2673 y(Los)h(electrones)i(se)f(encuen)m(tran)f
(distribuidos)f(de)i(la)g(siguien)m(te)g(forma:)p 0 TeXcolorgray
327 2860 28 28 v 0 TeXcolorgray 410 2868 a(Capa)f(1:)h(2)p
0 TeXcolorgray 327 3054 V 0 TeXcolorgray 410 3062 a(Capa)f(2:)h(8)p
0 TeXcolorgray 327 3249 V 0 TeXcolorgray 410 3257 a(Capa)f(3:)h(18)p
0 TeXcolorgray 327 3443 V 0 TeXcolorgray 410 3451 a(Capa)f(4:)h(1)324
3646 y(El)c(electr\023)-45 b(on)28 b(de)f(la)g(cuarta)h(capa,)g(se)f
(encuen)m(tra)g(alejado)h(del)f(n)s(\023)-48 b(ucleo,)28
b(y)f(adem\023)-45 b(as,)183 3759 y(est\023)g(a)36 b(en)g(una)f(capa)i
(incompleta,)g(p)s(orque)e(la)i(cuarta)f(capa)h(puede)e(con)m(tener)i
(hasta)183 3871 y(2)p Fd(;)p Fl(4)298 3838 y Ff(2)382
3871 y Fl(=)43 b(32)f(electrones,)i(y)d(p)s(or)f(estos)j(motiv)m(os)g
(el)e(cobre)h(es)g(buen)e(conductor)i(de)183 3984 y(corrien)m(te)31
b(el)m(\023)-43 b(ectrica.)324 4099 y(Si)25 b(h)m(ubiera,)g(en)f(las)i
(inmediaciones)g(del)f(\023)-45 b(atomo)27 b(de)e(cobre,)g(una)g
(fuerza)g(de)g(atrac-)183 4212 y(ci\023)-45 b(on)33 b(lo)h(su\014cien)m
(temen)m(te)g(fuerte,)g(el)f(electr\023)-45 b(on)35 b(de)e(la)g(cuarta)
h(capa)g(se)f(lib)s(erar)-10 b(\023)-35 b(\020a)33 b(del)183
4325 y(\023)-45 b(atomo)38 b(padre,)f(quedando)f(el)i(\023)-45
b(atomo)38 b(con)g(29)f(protones)h(y)f(28)g(electrones)i(y)e(carga)183
4438 y(p)s(ositiv)-5 b(a.)31 b(Cuando)e(esto)j(o)s(curre,)e(el)h(\023)
-45 b(atomo)31 b(se)g(con)m(vierte)h(en)e(un)g(ion)g(p)s(ositiv)m(o.)
183 4734 y Fh(2.3.)135 b(Diferencia)47 b(de)e(p)t(otencial)g(el)m(\023)
-64 b(ectrico)47 b(o)e(tensi\023)-67 b(on)324 4940 y
Fl(Algo)34 b(similar)g(o)s(curre)e(en)h(to)s(das)g(las)h(bater)-10
b(\023)-35 b(\020as:)34 b(una)f(separaci\023)-45 b(on)33
b(de)g(cargas)i(p)s(o-)183 5053 y(sitiv)-5 b(as)31 b(y)f(cargas)i
(negativ)-5 b(as,)32 b(a)f(tra)m(v)m(\023)-43 b(es)32
b(de)e(medios)h(qu)-10 b(\023)-35 b(\020micos.)324 5168
y(Una)24 b(fuen)m(te)h(de)f(tensi\023)-45 b(on)25 b(no)f(es)h(m\023)-45
b(as)24 b(que)g(un)g(disp)s(ositiv)m(o)h(con)g(regiones)g(de)f(carga)
183 5281 y(p)s(ositiv)-5 b(a)35 b(y)h(carga)g(negativ)-5
b(a.)37 b(Mien)m(tras)g(ma)m(y)m(ores)g(sean)e(estas)h(cargas,)h(ma)m
(y)m(or)f(ser\023)-45 b(a)183 5394 y(la)31 b(tensi\023)-45
b(on)30 b(o)h(v)m(olta)5 b(je.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 581
282 a Fl(6)1029 b Fj(CAP)1849 259 y(\023)1851 282 y(ITULO)29
b(2.)62 b(MA)m(GNITUDES)31 b(EL)3105 259 y(\023)3093
282 y(ECTRICAS)p 0 TeXcolorgray 722 539 a Fl(P)m(ara)36
b(efectuar)g(este)g(pro)s(ceso)f(de)g(separaci\023)-45
b(on)35 b(de)g(cargas,)h(es)g(necesario)g(gastar)581
652 y(cierta)h(energ)-10 b(\023)-35 b(\020a.)36 b(As)-10
b(\023)-35 b(\020,)36 b(la)g Fi(diferencia)41 b(de)f(p)s(otencial)35
b Fl(se)h(de\014ne)e(como)i(el)g(traba)5 b(jo)581 764
y(necesario)32 b(para)e(mo)m(v)m(er)i(estas)f(cargas.)1158
1023 y(Dif.)g(de)f(p)s(otencial)i(el)m(\023)-43 b(ectrico)29
b(=)2309 962 y(energ)-10 b(\023)-35 b(\020a)31 b(p)s(otencial)p
2309 1002 675 4 v 2540 1085 a(carga)3383 1023 y(\(2.1\))722
1243 y(Si)23 b(utilizamos)i(las)e(unidades)f(del)h(S.I.,)g(se)g(dice)h
(que)f Fg(1)j(V)-7 b(olt)26 b(de)g(p)-5 b(otencial)28
b(e)-5 b(quivale)581 1356 y(a)33 b(1)g(Joule)g(de)f(de)h(ener)-5
b(g)c(\023)-37 b(\020a)33 b(p)-5 b(or)35 b(1)e(Coulomb)g(de)g(c)-5
b(ar)g(ga)1887 1614 y Fl(1)p Fd(V)46 b Fl(=)25 b(1)2189
1552 y Fd(J)p 2182 1593 72 4 v 2182 1676 a(C)p 0 TeXcolorgray
581 1866 a Fi(Ejemplo)35 b(2.1)p 0 TeXcolorgray 46 w
Fg(Determinar)h(la)h(tensi\023)-46 b(on)36 b(entr)-5
b(e)36 b(dos)g(puntos)h(si)e(se)h(r)-5 b(e)g(quier)g(en)36
b(80)g(J)581 1979 y(de)d(ener)-5 b(g)c(\023)-37 b(\020a)33
b(p)-5 b(ar)g(a)35 b(mover)e(20)h(C)e(de)h(c)-5 b(ar)g(ga.)722
2095 y Fl(Soluci\023)-45 b(on:)33 b Fg(Aplic)-5 b(ando)35
b(la)e(e)-5 b(cuaci\023)-46 b(on)33 b(2.1,)g(se)g(tiene)1881
2284 y Fl(80)p Fd(J)p 1874 2325 163 4 v 1874 2408 a Fl(20)p
Fd(C)2072 2346 y Fl(=)25 b(4)p Fd(V)581 2560 y Fg(.)p
0 TeXcolorgray 581 2788 a Fi(Ejemplo)35 b(2.2)p 0 TeXcolorgray
46 w Fg(Determinar)41 b(la)g(ener)-5 b(g)c(\023)-37 b(\020a)40
b(c)-5 b(onsumida)42 b(p)-5 b(ar)g(a)42 b(mover)f(una)f(c)-5
b(ar)g(ga)42 b(de)581 2901 y(0,05)34 b(C)f(entr)-5 b(e)33
b(dos)g(puntos)h(si)f(la)g(tensi\023)-46 b(on)33 b(entr)-5
b(e)33 b(los)h(mismos)g(es)e(de)h(10)g(V.)722 3017 y
Fl(Soluci\023)-45 b(on:)33 b Fg(De)f(la)i(e)-5 b(cuaci\023)-46
b(on)33 b(2.1,)g(se)f(desp)-5 b(eja)1147 3231 y(Ener)g(g)c(\023)-37
b(\020a)33 b(p)-5 b(otencial)27 b Fl(=)e Fg(Potencial)33
b(el)n(\023)-44 b(ectric)-5 b(o)21 b Fc(\002)f Fg(c)-5
b(ar)g(ga)722 3448 y(Lue)g(go)1658 3571 y Fl(0)p Fd(;)15
b Fl(05)p Fd(C)28 b Fc(\002)20 b Fl(10)p Fd(V)47 b Fl(=)25
b(0)p Fd(;)15 b Fl(5)p Fd(J)581 3876 y Fh(2.4.)136 b(In)l(tensidad)45
b(de)g(corrien)l(te)h(el)m(\023)-64 b(ectrica)722 4085
y Fl(La)39 b(corrien)m(te)g(el)m(\023)-43 b(ectrica)42
b(o)d(in)m(tensidad)f(de)g(corrien)m(te)h(el)m(\023)-43
b(ectrica,)42 b(es)d(el)g(\015ujo)e(de)581 4198 y(cargas)28
b(el)m(\023)-43 b(ectricas;)30 b(es)d(decir,)g(el)g(mo)m(vimien)m(to)i
(de)d(electrones)j(a)e(lo)g(largo)h(del)e(tiemp)s(o.)1945
4455 y Fd(I)33 b Fl(=)2124 4394 y Fd(Q)p 2124 4434 72
4 v 2143 4518 a(t)3383 4455 y Fl(\(2.2\))722 4658 y(La)e(unidad)e(que)i
(utilizamos)h(para)f(la)g(corrien)m(te)h(es)f(el)g(Amp)s(ere,)f(y)h
(equiv)-5 b(ale)31 b(a)g(1)581 4770 y(Coulom)m(b)g(de)f(carga)h(\015uy)
m(endo)f(duran)m(te)g(1)h(segundo)f(de)g(tiemp)s(o:)1890
5028 y(1)p Fd(A)c Fl(=)2135 4967 y(1)p Fd(C)p 2135 5007
117 4 v 2149 5090 a Fl(1)p Fd(s)p 0 TeXcolorgray 581
5281 a Fi(Ejemplo)35 b(2.3)p 0 TeXcolorgray 46 w Fg(Determinar)e(la)g
(c)-5 b(orriente)33 b(el)n(\023)-44 b(ectric)-5 b(a)32
b(en)g(A)n(mp)-5 b(er)g(es)33 b(si)f(la)h(c)-5 b(ar)g(ga)34
b(que)581 5394 y(\015uye)f(es)f(de)h(0,01)h(C)f(dur)-5
b(ante)34 b(5)f(mS.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 183
282 a Fj(2.5.)43 b(RELA)m(CI)732 259 y(\023)716 282 y(ON)20
b(ENTRE)h(TENSI)1516 259 y(\023)1501 282 y(ON)e(Y)i(CORRIENTE:)f(LA)h
(RESISTENCIA)p Fl(7)p 0 TeXcolorgray 324 539 a(Soluci\023)-45
b(on:)24 b Fg(De)e(la)i(e)-5 b(cuaci\023)-46 b(on)24
b(2.2)g(se)f(sab)-5 b(e)24 b(que)f(las)h(unidades)g(deb)-5
b(er\023)-46 b(an)25 b(ser)e(Coulomb)183 652 y(p)-5 b(ar)g(a)38
b(las)f(c)-5 b(ar)g(gas)38 b(y)e(se)-5 b(gundos)37 b(p)-5
b(ar)g(a)39 b(el)d(tiemp)-5 b(o.)38 b(Por)e(el)5 b(lo,)37
b(deb)-5 b(e)36 b(r)-5 b(e)g(alizarse)38 b(la)f(c)-5
b(on-)183 764 y(versi\023)-46 b(on)46 b Fl(5)p Fd(mS)54
b Fl(=)930 729 y Ff(5)p 877 744 142 4 v 877 796 a(1000)1028
764 y Fd(S)g Fl(=)48 b(0)p Fd(;)15 b Fl(005)p Fd(S)5
b Fg(,)48 b(y)e(a)g(c)-5 b(ontinuaci\023)-46 b(on,)46
b(aplic)-5 b(ar)48 b(la)e(e)-5 b(cuaci\023)-46 b(on,)183
877 y(obteniendo:)1324 1009 y Fd(I)32 b Fl(=)1520 948
y(0)p Fd(;)15 b Fl(01)p Fd(C)p 1502 988 284 4 v 1502
1072 a Fl(0)p Fd(;)g Fl(005)p Fd(S)1821 1009 y Fl(=)25
b(2)p Fd(A)p 0 TeXcolorgray 183 1260 a Fi(Ejemplo)35
b(2.4)p 0 TeXcolorgray 46 w Fg(Calcular)e(cu\023)-46
b(anto)32 b(tiemp)-5 b(o)33 b(deb)-5 b(er\023)-46 b(a)33
b(p)-5 b(asar)34 b(p)-5 b(ar)g(a)34 b(que)d(cir)-5 b(cule)32
b(1)g(C)g(de)183 1373 y(c)-5 b(ar)g(ga)34 b(si)e(la)i(c)-5
b(orriente)33 b(en)g(un)f(cir)-5 b(cuito)33 b(es)g(de)f(0,3)i(A.)324
1486 y Fl(Soluci\023)-45 b(on:)33 b Fg(De)f(la)h(e)-5
b(cuaci\023)-46 b(on)33 b(2.2)g(se)g(desp)-5 b(eja)34
b(el)f(tiemp)-5 b(o,)33 b(obteniendo:)1554 1727 y Fd(t)25
b Fl(=)1718 1666 y Fd(Q)p 1718 1706 72 4 v 1730 1789
a(I)2985 1727 y Fl(\(2.3\))183 1952 y Fg(Y)32 b(lue)-5
b(go,)33 b(es)f(inme)-5 b(diato)35 b(que)1093 2193 y
Fd(t)26 b Fl(=)1299 2132 y(1)p Fd(C)p 1257 2172 200 4
v 1257 2255 a Fl(0)p Fd(;)15 b Fl(3)p Fd(A)1492 2193
y Fl(=)25 b(\(1)p Fd(=)p Fl(3\))p Fd(S)32 b Fc(\031)25
b Fl(0)p Fd(;)15 b Fl(333)p Fd(S)183 2501 y Fh(2.5.)135
b(Relaci\023)-67 b(on)34 b(en)l(tre)g(tensi\023)-67 b(on)33
b(y)g(corrien)l(te:)h(la)f(resisten-)526 2651 y(cia)324
2854 y Fl(Es)h(com)s(\023)-48 b(un)34 b(confundir)f(tensi\023)-45
b(on)35 b(con)g(corrien)m(te,)h(p)s(ero)e(son)g(dos)h(t)m(\023)-43
b(erminos)36 b(com-)183 2967 y(pletamen)m(te)c(diferen)m(tes.)324
3080 y(Aplicar)41 b(una)f(tensi\023)-45 b(on)40 b(a)h(un)f(material)h
(conductor)g(har\023)-45 b(a)40 b(que)h(\015uy)m(a)f(corrien)m(te)183
3193 y(el)m(\023)-43 b(ectrica)33 b(p)s(or)d(el)h(mismo.)324
3306 y(La)f(tensi\023)-45 b(on)31 b(es)g(la)g(causa,)g(mien)m(tras)g
(que)f(la)h(corrien)m(te)h(es)e(la)h(consecuencia.)324
3418 y(Sin)d(tensi\023)-45 b(on)29 b(no)f(puede)g(hab)s(er)g(corrien)m
(te)i(el)m(\023)-43 b(ectrica,)32 b(p)s(ero)c(s)-10 b(\023)-35
b(\020)29 b(puede)f(existir)h(ten-)183 3531 y(si\023)-45
b(on)36 b(en)m(tre)i(dos)e(pun)m(tos)h(sin)f(una)g(corrien)m(te)i(que)f
(circule)h(en)m(tre)f(los)g(mismos)g(\(esto)183 3644
y(o)s(curre,)32 b(p)s(or)f(ejemplo,)i(en)m(tre)g(los)g(b)s(ornes)e(de)i
(una)f(pila)g(que)h(no)f(est\023)-45 b(a)33 b(conectada)i(en)183
3757 y(un)28 b(circuito,)j(y)m(a)f(que)f(existe)i(tensi\023)-45
b(on)29 b(p)s(ero)g(no)h(ha)m(y)f(corrien)m(te)i(circulando)f(en)m(tre)
g(los)183 3870 y(mismos\).)324 3983 y(Si)e(la)g(tensi\023)-45
b(on)29 b(es)f(la)g(causa)h(de)f(la)h(corrien)m(te,)g(eviden)m(temen)m
(te)i(una)c(mo)s(di\014caci\023)-45 b(on)183 4096 y(de)30
b(los)h(v)-5 b(alores)31 b(de)f(tensi\023)-45 b(on)31
b(alterar\023)-45 b(a)32 b(la)f(corrien)m(te)h(obtenida.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
